[33m[nodemon] 3.0.1[39m
[33m[nodemon] to restart at any time, enter `rs`[39m
[33m[nodemon] watching path(s): *.*[39m
[33m[nodemon] watching extensions: js,mjs,cjs,json[39m
[32m[nodemon] starting `node ./bin/www`[39m
Connected to MongoDB mongoose-flights at ac-sjskon9-shard-00-01.udxjpgm.mongodb.net:27017
[0mGET / [36m302 [0m7.449 ms - 60[0m
{ id: 'flights' }
/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/schema/objectid.js:250
    throw new CastError('ObjectId', value, this.path, error, this);
          ^

CastError: Cast to ObjectId failed for value "flights" (type string) at path "_id" for model "Flight"
    at ObjectId.cast (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/schema/objectid.js:250:11)
    at SchemaType.applySetters (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/schematype.js:1220:12)
    at SchemaType.castForQuery (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/schematype.js:1632:15)
    at cast (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/cast.js:356:32)
    at Query.cast (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/query.js:4910:12)
    at Query._castConditions (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/query.js:2232:10)
    at model.Query._findOne (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/query.js:2519:8)
    at model.Query.exec (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/query.js:4429:28)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async show (/Users/robwyse/code/mongoose-flights/controllers/flights.js:39:18) {
  stringValue: '"flights"',
  messageFormat: undefined,
  kind: 'ObjectId',
  value: 'flights',
  path: '_id',
  reason: BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer
      at new ObjectId (/Users/robwyse/code/mongoose-flights/node_modules/bson/lib/bson.cjs:2006:23)
      at castObjectId (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/cast/objectid.js:25:12)
      at ObjectId.cast (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/schema/objectid.js:248:12)
      at SchemaType.applySetters (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/schematype.js:1220:12)
      at SchemaType.castForQuery (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/schematype.js:1632:15)
      at cast (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/cast.js:356:32)
      at Query.cast (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/query.js:4910:12)
      at Query._castConditions (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/query.js:2232:10)
      at model.Query._findOne (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/query.js:2519:8)
      at model.Query.exec (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/query.js:4429:28),
  valueType: 'string',
  model: <ref *2> [Function: model] {
    hooks: Kareem {
      _pres: Map(9) {
        'save' => [
          { fn: [Function: validateBeforeSave], isAsync: false },
          { fn: [Function: saveSubdocsPreSave], isAsync: false },
          { fn: [Function: timestampsPreSave], isAsync: false },
          { fn: [Function: shardingPluginPreSave], isAsync: false },
          { fn: [Function: trackTransactionPreSave], isAsync: false },
          numAsync: undefined
        ],
        'findOneAndReplace' => [
          {
            query: true,
            model: false,
            fn: [Function],
            isAsync: undefined
          },
          numAsync: undefined
        ],
        'findOneAndUpdate' => [
          {
            query: true,
            model: false,
            fn: [Function],
            isAsync: undefined
          },
          numAsync: undefined
        ],
        'replaceOne' => [
          {
            query: true,
            model: false,
            fn: [Function],
            isAsync: undefined
          },
          numAsync: undefined
        ],
        'update' => [
          {
            query: true,
            model: false,
            fn: [Function],
            isAsync: undefined
          },
          numAsync: undefined
        ],
        'updateOne' => [
          {
            query: true,
            model: false,
            fn: [Function],
            isAsync: undefined
          },
          numAsync: undefined
        ],
        'updateMany' => [
          {
            query: true,
            model: false,
            fn: [Function],
            isAsync: undefined
          },
          numAsync: undefined
        ],
        'deleteOne' => [
          {
            document: true,
            query: false,
            fn: [Function: removeSubDocsPreRemove],
            isAsync: undefined
          },
          numAsync: undefined
        ],
        'remove' => [
          { fn: [Function: shardingPluginPreRemove], isAsync: false },
          numAsync: undefined
        ]
      },
      _posts: Map(2) {
        'save' => [
          { fn: [Function: saveSubdocsPostSave] },
          { fn: [Function: shardingPluginPostSave] }
        ],
        'init' => [ { fn: [Function: shardingPluginPostInit] } ]
      }
    },
    base: <ref *1> Mongoose {
      connections: [
        <ref *3> NativeConnection {
          base: [Circular *1],
          collections: { flights: [Collection], tickets: [Collection] },
          models: { Flight: [Circular *2], Ticket: [Function] },
          config: {},
          replica: false,
          options: null,
          otherDbs: [],
          relatedDbs: {},
          states: [Object: null prototype] {
            '0': 'disconnected',
            '1': 'connected',
            '2': 'connecting',
            '3': 'disconnecting',
            '99': 'uninitialized',
            disconnected: 0,
            connected: 1,
            connecting: 2,
            disconnecting: 3,
            uninitialized: 99
          },
          _readyState: 1,
          _closeCalled: undefined,
          _hasOpened: true,
          plugins: [],
          id: 0,
          _queue: [],
          _listening: false,
          _connectionOptions: { driverInfo: [Object] },
          _connectionString: 'mongodb+srv://rjwyse27:Rockwell1@cluster0.udxjpgm.mongodb.net/mongoose-flights?retryWrites=true&w=majority',
          client: MongoClient {
            _events: [Object: null prototype],
            _eventsCount: 1,
            _maxListeners: 0,
            mongoLogger: [MongoLogger],
            s: [Object],
            connectionLock: undefined,
            topology: [Topology],
            [Symbol(kCapture)]: false,
            [Symbol(options)]: [Object: null prototype]
          },
          '$initialConnection': Promise { [Circular *3] },
          _events: [Object: null prototype] {
            connected: [Function (anonymous)]
          },
          _eventsCount: 1,
          db: Db { s: [Object], client: [MongoClient] },
          host: 'ac-sjskon9-shard-00-01.udxjpgm.mongodb.net',
          port: 27017,
          name: 'mongoose-flights'
        }
      ],
      nextConnectionId: 1,
      models: <ref *4> {
        Flight: [Circular *2],
        Ticket: [Function: model] {
          hooks: Kareem { _pres: [Map], _posts: [Map] },
          base: [Circular *1],
          modelName: 'Ticket',
          model: [Function: model],
          db: <ref *3> NativeConnection {
            base: [Circular *1],
            collections: [Object],
            models: [Circular *4],
            config: {},
            replica: false,
            options: null,
            otherDbs: [],
            relatedDbs: {},
            states: [Object: null prototype],
            _readyState: 1,
            _closeCalled: undefined,
            _hasOpened: true,
            plugins: [],
            id: 0,
            _queue: [],
            _listening: false,
            _connectionOptions: [Object],
            _connectionString: 'mongodb+srv://rjwyse27:Rockwell1@cluster0.udxjpgm.mongodb.net/mongoose-flights?retryWrites=true&w=majority',
            client: [MongoClient],
            '$initialConnection': [Promise],
            _events: [Object: null prototype],
            _eventsCount: 1,
            db: [Db],
            host: 'ac-sjskon9-shard-00-01.udxjpgm.mongodb.net',
            port: 27017,
            name: 'mongoose-flights'
          },
          discriminators: undefined,
          events: EventEmitter {
            _events: [Object: null prototype] {},
            _eventsCount: 0,
            _maxListeners: undefined,
            [Symbol(kCapture)]: false
          },
          '$appliedMethods': true,
          '$appliedHooks': true,
          _middleware: Kareem { _pres: [Map], _posts: [Map] },
          '$__insertMany': [Function (anonymous)],
          schema: Schema {
            obj: [Object],
            paths: [Object],
            aliases: {},
            subpaths: {},
            virtuals: [Object],
            singleNestedPaths: {},
            nested: {},
            inherits: {},
            callQueue: [],
            _indexes: [],
            methods: {},
            methodOptions: {},
            statics: {},
            tree: [Object],
            query: {},
            childSchemas: [],
            plugins: [Array],
            '$id': 3,
            mapPaths: [],
            s: [Object],
            _userProvidedOptions: {},
            options: [Object],
            '$globalPluginsApplied': true
          },
          collection: Collection {
            collection: [Collection],
            Promise: [Function: Promise],
            modelName: 'Ticket',
            _closed: false,
            opts: [Object],
            name: 'tickets',
            collectionName: 'tickets',
            conn: [NativeConnection],
            queue: [],
            buffer: false,
            emitter: [EventEmitter]
          },
          '$__collection': Collection {
            collection: [Collection],
            Promise: [Function: Promise],
            modelName: 'Ticket',
            _closed: false,
            opts: [Object],
            name: 'tickets',
            collectionName: 'tickets',
            conn: [NativeConnection],
            queue: [],
            buffer: false,
            emitter: [EventEmitter]
          },
          Query: [Function (anonymous)] { base: [Object] },
          '$init': Promise { undefined, catch: [Function (anonymous)] },
          '$caught': true,
          [Symbol(mongoose#Model)]: true
        }
      },
      events: EventEmitter {
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        [Symbol(kCapture)]: false
      },
      __driver: {
        Collection: [Function: NativeCollection],
        Connection: [Function: NativeConnection] {
          STATES: [Object: null prototype] {
            '0': 'disconnected',
            '1': 'connected',
            '2': 'connecting',
            '3': 'disconnecting',
            '99': 'uninitialized',
            disconnected: 0,
            connected: 1,
            connecting: 2,
            disconnecting: 3,
            uninitialized: 99
          }
        }
      },
      options: {
        pluralization: true,
        autoIndex: true,
        autoCreate: true,
        [Symbol(mongoose:default)]: true
      },
      _pluralize: [Function: pluralize],
      Schema: [Function: Schema] {
        reserved: [Object: null prototype] {
          validate: 1,
          toObject: 1,
          save: 1,
          remove: 1,
          populated: 1,
          isNew: 1,
          isModified: 1,
          init: 1,
          get: 1,
          errors: 1,
          collection: 1,
          removeListener: 1,
          listeners: 1,
          emit: 1,
          prototype: 1
        },
        Types: {
          Array: [Function: SchemaArray] {
            schemaName: 'Array',
            options: [Object],
            defaultOptions: {},
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Boolean: [Function: SchemaBoolean] {
            schemaName: 'Boolean',
            defaultOptions: {},
            _cast: [Function],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)],
            '$conditionalHandlers': [Object]
          },
          BigInt: [Function: SchemaBigInt] {
            schemaName: 'BigInt',
            defaultOptions: {},
            _cast: [Function: castBigInt],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)],
            '$conditionalHandlers': [Object]
          },
          Buffer: [Function: SchemaBuffer] {
            schemaName: 'Buffer',
            defaultOptions: {},
            _checkRequired: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Date: [Function: SchemaDate] {
            schemaName: 'Date',
            defaultOptions: {},
            _cast: [Function: castDate],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Decimal: [Function: Decimal128] {
            schemaName: 'Decimal128',
            defaultOptions: {},
            _cast: [Function: castDecimal128],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Decimal128: [Function: Decimal128] {
            schemaName: 'Decimal128',
            defaultOptions: {},
            _cast: [Function: castDecimal128],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          DocumentArray: [Function: DocumentArrayPath] {
            schemaName: 'DocumentArray',
            options: [Object],
            defaultOptions: {},
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)]
          },
          Map: [class Map extends SchemaType] {
            schemaName: 'Map',
            defaultOptions: {}
          },
          Mixed: [Function: Mixed] {
            schemaName: 'Mixed',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: []
          },
          Number: [Function: SchemaNumber] {
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _cast: [Function: castNumber],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            schemaName: 'Number',
            defaultOptions: {},
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          ObjectId: [Function: ObjectId] {
            schemaName: 'ObjectId',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _checkRequired: [Function (anonymous)],
            _cast: [Function: castObjectId],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          String: [Function: SchemaString] {
            schemaName: 'String',
            defaultOptions: {},
            _cast: [Function: castString],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Subdocument: [Function: SubdocumentPath] {
            defaultOptions: {},
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)]
          },
          UUID: [Function: SchemaUUID] {
            schemaName: 'UUID',
            defaultOptions: {},
            _cast: [Function (anonymous)],
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            cast: [Function: cast],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Oid: [Function: ObjectId] {
            schemaName: 'ObjectId',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _checkRequired: [Function (anonymous)],
            _cast: [Function: castObjectId],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Object: [Function: Mixed] {
            schemaName: 'Mixed',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: []
          },
          Bool: [Function: SchemaBoolean] {
            schemaName: 'Boolean',
            defaultOptions: {},
            _cast: [Function],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)],
            '$conditionalHandlers': [Object]
          },
          ObjectID: [Function: ObjectId] {
            schemaName: 'ObjectId',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _checkRequired: [Function (anonymous)],
            _cast: [Function: castObjectId],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          }
        },
        ObjectId: [Function: ObjectId] {
          schemaName: 'ObjectId',
          defaultOptions: {},
          get: [Function (anonymous)],
          set: [Function: set],
          setters: [],
          _checkRequired: [Function (anonymous)],
          _cast: [Function: castObjectId],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        }
      },
      model: [Function (anonymous)],
      plugins: [
        [ [Function: removeSubdocs], { deduplicate: true } ],
        [ [Function: saveSubdocs], { deduplicate: true } ],
        [
          [Function: shardingPlugin] {
            storeShard: [Function: storeShard]
          },
          { deduplicate: true }
        ],
        [ [Function: trackTransaction], { deduplicate: true } ],
        [ [Function: validateBeforeSave], { deduplicate: true } ]
      ],
      default: [Circular *1],
      mongoose: [Circular *1],
      cast: [Function: cast],
      STATES: [Object: null prototype] {
        '0': 'disconnected',
        '1': 'connected',
        '2': 'connecting',
        '3': 'disconnecting',
        '99': 'uninitialized',
        disconnected: 0,
        connected: 1,
        connecting: 2,
        disconnecting: 3,
        uninitialized: 99
      },
      setDriver: [Function: setDriver],
      set: [Function (anonymous)],
      get: [Function (anonymous)],
      createConnection: [Function (anonymous)],
      connect: [AsyncFunction: connect],
      disconnect: [AsyncFunction: disconnect],
      startSession: [Function (anonymous)],
      pluralize: [Function (anonymous)],
      deleteModel: [Function (anonymous)],
      modelNames: [Function (anonymous)],
      plugin: [Function (anonymous)],
      version: '7.5.0',
      Mongoose: [Function: Mongoose],
      SchemaType: [Function: SchemaType] {
        cast: [Function: cast],
        set: [Function: set],
        get: [Function (anonymous)],
        _isRef: [Function (anonymous)],
        checkRequired: [Function (anonymous)],
        CastError: [class CastError extends MongooseError],
        ValidatorError: [class ValidatorError extends MongooseError]
      },
      SchemaTypes: {
        Array: [Function: SchemaArray] {
          schemaName: 'Array',
          options: { castNonArrays: true },
          defaultOptions: {},
          set: [Function: set],
          setters: [],
          get: [Function (anonymous)],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Boolean: [Function: SchemaBoolean] {
          schemaName: 'Boolean',
          defaultOptions: {},
          _cast: [Function: castBoolean] {
            convertToTrue: [Set],
            convertToFalse: [Set]
          },
          set: [Function: set],
          setters: [],
          get: [Function (anonymous)],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)],
          '$conditionalHandlers': {
            '$type': [Function (anonymous)],
            '$exists': [Function (anonymous)],
            '$nin': [Function: handle$in],
            '$ne': [Function: handleSingle],
            '$in': [Function: handle$in],
            '$eq': [Function: handleSingle],
            '$all': [Function: handleArray]
          }
        },
        BigInt: [Function: SchemaBigInt] {
          schemaName: 'BigInt',
          defaultOptions: {},
          _cast: [Function: castBigInt],
          set: [Function: set],
          setters: [],
          get: [Function (anonymous)],
          cast: [Function: cast],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)],
          '$conditionalHandlers': {
            '$gt': [Function: handleSingle],
            '$gte': [Function: handleSingle],
            '$lt': [Function: handleSingle],
            '$lte': [Function: handleSingle],
            '$type': [Function (anonymous)],
            '$exists': [Function (anonymous)],
            '$nin': [Function: handle$in],
            '$ne': [Function: handleSingle],
            '$in': [Function: handle$in],
            '$eq': [Function: handleSingle],
            '$all': [Function: handleArray]
          }
        },
        Buffer: [Function: SchemaBuffer] {
          schemaName: 'Buffer',
          defaultOptions: {},
          _checkRequired: [Function (anonymous)],
          set: [Function: set],
          setters: [],
          get: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Date: [Function: SchemaDate] {
          schemaName: 'Date',
          defaultOptions: {},
          _cast: [Function: castDate],
          set: [Function: set],
          setters: [],
          get: [Function (anonymous)],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Decimal: [Function: Decimal128] {
          schemaName: 'Decimal128',
          defaultOptions: {},
          _cast: [Function: castDecimal128],
          set: [Function: set],
          setters: [],
          get: [Function (anonymous)],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Decimal128: [Function: Decimal128] {
          schemaName: 'Decimal128',
          defaultOptions: {},
          _cast: [Function: castDecimal128],
          set: [Function: set],
          setters: [],
          get: [Function (anonymous)],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        DocumentArray: [Function: DocumentArrayPath] {
          schemaName: 'DocumentArray',
          options: { castNonArrays: true },
          defaultOptions: {},
          set: [Function: set],
          setters: [],
          get: [Function (anonymous)]
        },
        Map: [class Map extends SchemaType] {
          schemaName: 'Map',
          defaultOptions: {}
        },
        Mixed: [Function: Mixed] {
          schemaName: 'Mixed',
          defaultOptions: {},
          get: [Function (anonymous)],
          set: [Function: set],
          setters: []
        },
        Number: [Function: SchemaNumber] {
          get: [Function (anonymous)],
          set: [Function: set],
          setters: [],
          _cast: [Function: castNumber],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          schemaName: 'Number',
          defaultOptions: {},
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        ObjectId: [Function: ObjectId] {
          schemaName: 'ObjectId',
          defaultOptions: {},
          get: [Function (anonymous)],
          set: [Function: set],
          setters: [],
          _checkRequired: [Function (anonymous)],
          _cast: [Function: castObjectId],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        String: [Function: SchemaString] {
          schemaName: 'String',
          defaultOptions: {},
          _cast: [Function: castString],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          get: [Function (anonymous)],
          set: [Function: set],
          setters: [],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Subdocument: [Function: SubdocumentPath] {
          defaultOptions: {},
          set: [Function: set],
          setters: [],
          get: [Function (anonymous)]
        },
        UUID: [Function: SchemaUUID] {
          schemaName: 'UUID',
          defaultOptions: {},
          _cast: [Function (anonymous)],
          get: [Function (anonymous)],
          set: [Function: set],
          setters: [],
          cast: [Function: cast],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Oid: [Function: ObjectId] {
          schemaName: 'ObjectId',
          defaultOptions: {},
          get: [Function (anonymous)],
          set: [Function: set],
          setters: [],
          _checkRequired: [Function (anonymous)],
          _cast: [Function: castObjectId],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Object: [Function: Mixed] {
          schemaName: 'Mixed',
          defaultOptions: {},
          get: [Function (anonymous)],
          set: [Function: set],
          setters: []
        },
        Bool: [Function: SchemaBoolean] {
          schemaName: 'Boolean',
          defaultOptions: {},
          _cast: [Function: castBoolean] {
            convertToTrue: [Set],
            convertToFalse: [Set]
          },
          set: [Function: set],
          setters: [],
          get: [Function (anonymous)],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)],
          '$conditionalHandlers': {
            '$type': [Function (anonymous)],
            '$exists': [Function (anonymous)],
            '$nin': [Function: handle$in],
            '$ne': [Function: handleSingle],
            '$in': [Function: handle$in],
            '$eq': [Function: handleSingle],
            '$all': [Function: handleArray]
          }
        },
        ObjectID: [Function: ObjectId] {
          schemaName: 'ObjectId',
          defaultOptions: {},
          get: [Function (anonymous)],
          set: [Function: set],
          setters: [],
          _checkRequired: [Function (anonymous)],
          _cast: [Function: castObjectId],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        }
      },
      VirtualType: [Function: VirtualType],
      Types: {
        Array: [Function: MongooseArray],
        Buffer: [Function: MongooseBuffer] {
          pathSymbol: Symbol(mongoose#Buffer#_path),
          mixin: {
            _subtype: undefined,
            _markModified: [Function: _markModified],
            write: [Function: write],
            copy: [Function: copy],
            writeUInt8: [Function (anonymous)],
            writeInt8: [Function (anonymous)],
            fill: [Function (anonymous)],
            utf8Write: [Function (anonymous)],
            asciiWrite: [Function (anonymous)],
            set: [Function (anonymous)],
            writeUInt16LE: [Function (anonymous)],
            writeUInt16BE: [Function (anonymous)],
            writeUInt32LE: [Function (anonymous)],
            writeUInt32BE: [Function (anonymous)],
            writeInt16LE: [Function (anonymous)],
            writeInt16BE: [Function (anonymous)],
            writeInt32LE: [Function (anonymous)],
            writeInt32BE: [Function (anonymous)],
            writeFloatLE: [Function (anonymous)],
            writeFloatBE: [Function (anonymous)],
            writeDoubleLE: [Function (anonymous)],
            writeDoubleBE: [Function (anonymous)],
            toObject: [Function (anonymous)],
            '$toObject': [Function (anonymous)],
            toBSON: [Function (anonymous)],
            equals: [Function (anonymous)],
            subtype: [Function (anonymous)]
          },
          Binary: [class Binary extends BSONValue] {
            BSON_BINARY_SUBTYPE_DEFAULT: 0,
            BUFFER_SIZE: 256,
            SUBTYPE_DEFAULT: 0,
            SUBTYPE_FUNCTION: 1,
            SUBTYPE_BYTE_ARRAY: 2,
            SUBTYPE_UUID_OLD: 3,
            SUBTYPE_UUID: 4,
            SUBTYPE_MD5: 5,
            SUBTYPE_ENCRYPTED: 6,
            SUBTYPE_COLUMN: 7,
            SUBTYPE_USER_DEFINED: 128
          }
        },
        Embedded: [Function: ArraySubdocument] {
          _events: undefined,
          _eventsCount: 0,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames]
        },
        Document: [Function: ArraySubdocument] {
          _events: undefined,
          _eventsCount: 0,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames]
        },
        DocumentArray: [Function: MongooseDocumentArray],
        Decimal128: [class Decimal128 extends BSONValue],
        ObjectId: [class ObjectId extends BSONValue] { index: 10346966 },
        Map: [class MongooseMap extends Map],
        Subdocument: [Function: Subdocument],
        UUID: [class UUID extends Binary] { cacheHexString: false }
      },
      Query: [Function: Query] {
        base: {
          toConstructor: [Function: toConstructor],
          setOptions: [Function (anonymous)],
          collection: [Function: collection],
          collation: [Function (anonymous)],
          '$where': [Function (anonymous)],
          where: [Function (anonymous)],
          equals: [Function: equals],
          eq: [Function: eq],
          or: [Function: or],
          nor: [Function: nor],
          and: [Function: and],
          gt: [Function (anonymous)],
          gte: [Function (anonymous)],
          lt: [Function (anonymous)],
          lte: [Function (anonymous)],
          ne: [Function (anonymous)],
          in: [Function (anonymous)],
          nin: [Function (anonymous)],
          all: [Function (anonymous)],
          regex: [Function (anonymous)],
          size: [Function (anonymous)],
          maxDistance: [Function (anonymous)],
          minDistance: [Function (anonymous)],
          mod: [Function (anonymous)],
          exists: [Function (anonymous)],
          elemMatch: [Function (anonymous)],
          within: [Function: within],
          box: [Function (anonymous)],
          polygon: [Function (anonymous)],
          circle: [Function (anonymous)],
          near: [Function: near],
          intersects: [Function: intersects],
          geometry: [Function: geometry],
          select: [Function: select],
          slice: [Function (anonymous)],
          sort: [Function (anonymous)],
          limit: [Function (anonymous)],
          skip: [Function (anonymous)],
          batchSize: [Function (anonymous)],
          comment: [Function (anonymous)],
          maxTimeMS: [Function (anonymous)],
          maxTime: [Function (anonymous)],
          hint: [Function (anonymous)],
          j: [Function: j],
          slaveOk: [Function (anonymous)],
          setReadPreference: [Function (anonymous)],
          read: [Function (anonymous)],
          r: [Function (anonymous)],
          readConcern: [Function (anonymous)],
          tailable: [Function (anonymous)],
          w: [Function: writeConcern],
          writeConcern: [Function: writeConcern],
          wTimeout: [Function: wtimeout],
          wtimeout: [Function: wtimeout],
          merge: [Function (anonymous)],
          find: [Function (anonymous)],
          _find: [AsyncFunction: _find],
          cursor: [Function (anonymous)],
          findOne: [Function (anonymous)],
          _findOne: [AsyncFunction: _findOne],
          count: [Function (anonymous)],
          _count: [AsyncFunction: _count],
          distinct: [Function (anonymous)],
          _distinct: [AsyncFunction: _distinct],
          updateMany: [Function: updateMany],
          _updateMany: [AsyncFunction (anonymous)],
          updateOne: [Function: updateOne],
          _updateOne: [AsyncFunction (anonymous)],
          replaceOne: [Function: replaceOne],
          _replaceOne: [AsyncFunction (anonymous)],
          deleteOne: [Function (anonymous)],
          _deleteOne: [AsyncFunction (anonymous)],
          deleteMany: [Function (anonymous)],
          _deleteMany: [AsyncFunction (anonymous)],
          findOneAndUpdate: [Function (anonymous)],
          _findOneAndUpdate: [AsyncFunction (anonymous)],
          findOneAndDelete: [Function (anonymous)],
          findOneAndRemove: [Function (anonymous)],
          _findOneAndRemove: [AsyncFunction (anonymous)],
          setTraceFunction: [Function (anonymous)],
          exec: [AsyncFunction: exec],
          then: [AsyncFunction (anonymous)],
          selected: [Function: selected],
          selectedInclusively: [Function: selectedInclusively],
          selectedExclusively: [Function: selectedExclusively],
          _mergeUpdate: [Function (anonymous)],
          _optionsForExec: [Function (anonymous)],
          _fieldsForExec: [Function (anonymous)],
          _updateForExec: [Function (anonymous)],
          _ensurePath: [Function (anonymous)],
          _validate: [Function (anonymous)]
        },
        'use$geoWithin': true
      },
      Model: [Function: Model] {
        exists: [Function: exists],
        discriminator: [Function (anonymous)],
        _events: undefined,
        _eventsCount: 0,
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        off: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        rawListeners: [Function: rawListeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        createCollection: [AsyncFunction: createCollection],
        syncIndexes: [AsyncFunction: syncIndexes],
        diffIndexes: [AsyncFunction: diffIndexes],
        cleanIndexes: [AsyncFunction: cleanIndexes],
        listIndexes: [AsyncFunction: listIndexes],
        ensureIndexes: [AsyncFunction: ensureIndexes],
        createIndexes: [AsyncFunction: createIndexes],
        translateAliases: [Function: translateAliases],
        deleteOne: [Function: deleteOne],
        deleteMany: [Function: deleteMany],
        find: [Function: find],
        findById: [Function: findById],
        findOne: [Function: findOne],
        estimatedDocumentCount: [Function: estimatedDocumentCount],
        countDocuments: [Function: countDocuments],
        count: [Function: count],
        distinct: [Function: distinct],
        where: [Function: where],
        '$where': [Function: $where],
        findOneAndUpdate: [Function (anonymous)],
        findByIdAndUpdate: [Function (anonymous)],
        findOneAndDelete: [Function (anonymous)],
        findByIdAndDelete: [Function (anonymous)],
        findOneAndReplace: [Function (anonymous)],
        findOneAndRemove: [Function (anonymous)],
        findByIdAndRemove: [Function (anonymous)],
        create: [AsyncFunction: create],
        watch: [Function (anonymous)],
        startSession: [Function (anonymous)],
        insertMany: [AsyncFunction: insertMany],
        '$__insertMany': [Function (anonymous)],
        bulkWrite: [AsyncFunction: bulkWrite],
        bulkSave: [AsyncFunction (anonymous)],
        applyDefaults: [Function: applyDefaults],
        castObject: [Function: castObject],
        buildBulkWriteOperations: [Function: buildBulkWriteOperations],
        hydrate: [Function (anonymous)],
        updateMany: [Function: updateMany],
        updateOne: [Function: updateOne],
        replaceOne: [Function: replaceOne],
        aggregate: [Function: aggregate],
        validate: [AsyncFunction: validate],
        populate: [AsyncFunction: populate],
        compile: [Function: compile],
        __subclass: [Function: subclass],
        inspect: [Function (anonymous)],
        [Symbol(nodejs.util.inspect.custom)]: [Function (anonymous)]
      },
      Document: [Function: Document] {
        _events: undefined,
        _eventsCount: 0,
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        off: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        rawListeners: [Function: rawListeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        ValidationError: [class ValidationError extends MongooseError]
      },
      ObjectId: [Function: ObjectId] {
        schemaName: 'ObjectId',
        defaultOptions: {},
        get: [Function (anonymous)],
        set: [Function: set],
        setters: [],
        _checkRequired: [Function (anonymous)],
        _cast: [Function: castObjectId],
        cast: [Function: cast],
        _defaultCaster: [Function (anonymous)],
        checkRequired: [Function (anonymous)]
      },
      isValidObjectId: [Function (anonymous)],
      isObjectIdOrHexString: [Function (anonymous)],
      syncIndexes: [Function (anonymous)],
      Decimal128: [Function: Decimal128] {
        schemaName: 'Decimal128',
        defaultOptions: {},
        _cast: [Function: castDecimal128],
        set: [Function: set],
        setters: [],
        get: [Function (anonymous)],
        cast: [Function: cast],
        _defaultCaster: [Function (anonymous)],
        _checkRequired: [Function (anonymous)],
        checkRequired: [Function (anonymous)]
      },
      Mixed: [Function: Mixed] {
        schemaName: 'Mixed',
        defaultOptions: {},
        get: [Function (anonymous)],
        set: [Function: set],
        setters: []
      },
      Date: [Function: SchemaDate] {
        schemaName: 'Date',
        defaultOptions: {},
        _cast: [Function: castDate],
        set: [Function: set],
        setters: [],
        get: [Function (anonymous)],
        cast: [Function: cast],
        _defaultCaster: [Function (anonymous)],
        _checkRequired: [Function (anonymous)],
        checkRequired: [Function (anonymous)]
      },
      Number: [Function: SchemaNumber] {
        get: [Function (anonymous)],
        set: [Function: set],
        setters: [],
        _cast: [Function: castNumber],
        cast: [Function: cast],
        _defaultCaster: [Function (anonymous)],
        schemaName: 'Number',
        defaultOptions: {},
        _checkRequired: [Function (anonymous)],
        checkRequired: [Function (anonymous)]
      },
      Error: [class MongooseError extends Error] {
        messages: {
          DocumentNotFoundError: null,
          general: {
            default: 'Validator failed for path `{PATH}` with value `{VALUE}`',
            required: 'Path `{PATH}` is required.'
          },
          Number: {
            min: 'Path `{PATH}` ({VALUE}) is less than minimum allowed value ({MIN}).',
            max: 'Path `{PATH}` ({VALUE}) is more than maximum allowed value ({MAX}).',
            enum: '`{VALUE}` is not a valid enum value for path `{PATH}`.'
          },
          Date: {
            min: 'Path `{PATH}` ({VALUE}) is before minimum allowed value ({MIN}).',
            max: 'Path `{PATH}` ({VALUE}) is after maximum allowed value ({MAX}).'
          },
          String: {
            enum: '`{VALUE}` is not a valid enum value for path `{PATH}`.',
            match: 'Path `{PATH}` is invalid ({VALUE}).',
            minlength: 'Path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).',
            maxlength: 'Path `{PATH}` (`{VALUE}`) is longer than the maximum allowed length ({MAXLENGTH}).'
          }
        },
        Messages: {
          DocumentNotFoundError: null,
          general: {
            default: 'Validator failed for path `{PATH}` with value `{VALUE}`',
            required: 'Path `{PATH}` is required.'
          },
          Number: {
            min: 'Path `{PATH}` ({VALUE}) is less than minimum allowed value ({MIN}).',
            max: 'Path `{PATH}` ({VALUE}) is more than maximum allowed value ({MAX}).',
            enum: '`{VALUE}` is not a valid enum value for path `{PATH}`.'
          },
          Date: {
            min: 'Path `{PATH}` ({VALUE}) is before minimum allowed value ({MIN}).',
            max: 'Path `{PATH}` ({VALUE}) is after maximum allowed value ({MAX}).'
          },
          String: {
            enum: '`{VALUE}` is not a valid enum value for path `{PATH}`.',
            match: 'Path `{PATH}` is invalid ({VALUE}).',
            minlength: 'Path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).',
            maxlength: 'Path `{PATH}` (`{VALUE}`) is longer than the maximum allowed length ({MAXLENGTH}).'
          }
        },
        DocumentNotFoundError: [class DocumentNotFoundError extends MongooseError],
        CastError: [class CastError extends MongooseError],
        ValidationError: [class ValidationError extends MongooseError],
        ValidatorError: [class ValidatorError extends MongooseError],
        VersionError: [class VersionError extends MongooseError],
        ParallelSaveError: [class ParallelSaveError extends MongooseError],
        OverwriteModelError: [class OverwriteModelError extends MongooseError],
        MissingSchemaError: [class MissingSchemaError extends MongooseError],
        MongooseServerSelectionError: [class MongooseServerSelectionError extends MongooseError],
        DivergentArrayError: [class DivergentArrayError extends MongooseError],
        StrictModeError: [class StrictModeError extends MongooseError],
        StrictPopulateError: [class StrictPopulateError extends MongooseError]
      },
      MongooseError: [class MongooseError extends Error] {
        messages: {
          DocumentNotFoundError: null,
          general: {
            default: 'Validator failed for path `{PATH}` with value `{VALUE}`',
            required: 'Path `{PATH}` is required.'
          },
          Number: {
            min: 'Path `{PATH}` ({VALUE}) is less than minimum allowed value ({MIN}).',
            max: 'Path `{PATH}` ({VALUE}) is more than maximum allowed value ({MAX}).',
            enum: '`{VALUE}` is not a valid enum value for path `{PATH}`.'
          },
          Date: {
            min: 'Path `{PATH}` ({VALUE}) is before minimum allowed value ({MIN}).',
            max: 'Path `{PATH}` ({VALUE}) is after maximum allowed value ({MAX}).'
          },
          String: {
            enum: '`{VALUE}` is not a valid enum value for path `{PATH}`.',
            match: 'Path `{PATH}` is invalid ({VALUE}).',
            minlength: 'Path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).',
            maxlength: 'Path `{PATH}` (`{VALUE}`) is longer than the maximum allowed length ({MAXLENGTH}).'
          }
        },
        Messages: {
          DocumentNotFoundError: null,
          general: {
            default: 'Validator failed for path `{PATH}` with value `{VALUE}`',
            required: 'Path `{PATH}` is required.'
          },
          Number: {
            min: 'Path `{PATH}` ({VALUE}) is less than minimum allowed value ({MIN}).',
            max: 'Path `{PATH}` ({VALUE}) is more than maximum allowed value ({MAX}).',
            enum: '`{VALUE}` is not a valid enum value for path `{PATH}`.'
          },
          Date: {
            min: 'Path `{PATH}` ({VALUE}) is before minimum allowed value ({MIN}).',
            max: 'Path `{PATH}` ({VALUE}) is after maximum allowed value ({MAX}).'
          },
          String: {
            enum: '`{VALUE}` is not a valid enum value for path `{PATH}`.',
            match: 'Path `{PATH}` is invalid ({VALUE}).',
            minlength: 'Path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).',
            maxlength: 'Path `{PATH}` (`{VALUE}`) is longer than the maximum allowed length ({MAXLENGTH}).'
          }
        },
        DocumentNotFoundError: [class DocumentNotFoundError extends MongooseError],
        CastError: [class CastError extends MongooseError],
        ValidationError: [class ValidationError extends MongooseError],
        ValidatorError: [class ValidatorError extends MongooseError],
        VersionError: [class VersionError extends MongooseError],
        ParallelSaveError: [class ParallelSaveError extends MongooseError],
        OverwriteModelError: [class OverwriteModelError extends MongooseError],
        MissingSchemaError: [class MissingSchemaError extends MongooseError],
        MongooseServerSelectionError: [class MongooseServerSelectionError extends MongooseError],
        DivergentArrayError: [class DivergentArrayError extends MongooseError],
        StrictModeError: [class StrictModeError extends MongooseError],
        StrictPopulateError: [class StrictPopulateError extends MongooseError]
      },
      now: [Function: now],
      CastError: [class CastError extends MongooseError],
      SchemaTypeOptions: [class SchemaTypeOptions],
      mongo: {
        BSON: [Getter],
        Binary: [Getter],
        BSONRegExp: [Getter],
        BSONSymbol: [Getter],
        BSONType: [Getter],
        Code: [Getter],
        DBRef: [Getter],
        Decimal128: [Getter],
        Double: [Getter],
        Int32: [Getter],
        Long: [Getter],
        MaxKey: [Getter],
        MinKey: [Getter],
        ObjectId: [Getter],
        Timestamp: [Getter],
        MongoBulkWriteError: [Getter],
        ChangeStreamCursor: [Getter],
        MongoAPIError: [Getter],
        MongoAWSError: [Getter],
        MongoAzureError: [Getter],
        MongoBatchReExecutionError: [Getter],
        MongoChangeStreamError: [Getter],
        MongoCompatibilityError: [Getter],
        MongoCursorExhaustedError: [Getter],
        MongoCursorInUseError: [Getter],
        MongoDecompressionError: [Getter],
        MongoDriverError: [Getter],
        MongoError: [Getter],
        MongoExpiredSessionError: [Getter],
        MongoGridFSChunkError: [Getter],
        MongoGridFSStreamError: [Getter],
        MongoInvalidArgumentError: [Getter],
        MongoKerberosError: [Getter],
        MongoMissingCredentialsError: [Getter],
        MongoMissingDependencyError: [Getter],
        MongoNetworkError: [Getter],
        MongoNetworkTimeoutError: [Getter],
        MongoNotConnectedError: [Getter],
        MongoParseError: [Getter],
        MongoRuntimeError: [Getter],
        MongoServerClosedError: [Getter],
        MongoServerError: [Getter],
        MongoServerSelectionError: [Getter],
        MongoSystemError: [Getter],
        MongoTailableCursorError: [Getter],
        MongoTopologyClosedError: [Getter],
        MongoTransactionError: [Getter],
        MongoUnexpectedServerResponseError: [Getter],
        MongoWriteConcernError: [Getter],
        AbstractCursor: [Getter],
        Admin: [Getter],
        AggregationCursor: [Getter],
        CancellationToken: [Getter],
        ChangeStream: [Getter],
        ClientSession: [Getter],
        Collection: [Getter],
        Db: [Getter],
        FindCursor: [Getter],
        GridFSBucket: [Getter],
        GridFSBucketReadStream: [Getter],
        GridFSBucketWriteStream: [Getter],
        ListCollectionsCursor: [Getter],
        ListIndexesCursor: [Getter],
        MongoClient: [Getter],
        OrderedBulkOperation: [Getter],
        UnorderedBulkOperation: [Getter],
        BatchType: [Getter],
        GSSAPICanonicalizationValue: [Getter],
        AuthMechanism: [Getter],
        Compressor: [Getter],
        CURSOR_FLAGS: [Getter],
        AutoEncryptionLoggerLevel: [Getter],
        MongoErrorLabel: [Getter],
        ExplainVerbosity: [Getter],
        ServerApiVersion: [Getter],
        ReturnDocument: [Getter],
        ProfilingLevel: [Getter],
        ReadConcernLevel: [Getter],
        ReadPreferenceMode: [Getter],
        ServerType: [Getter],
        TopologyType: [Getter],
        ReadConcern: [Getter],
        ReadPreference: [Getter],
        WriteConcern: [Getter],
        CommandFailedEvent: [Getter],
        CommandStartedEvent: [Getter],
        CommandSucceededEvent: [Getter],
        ConnectionCheckedInEvent: [Getter],
        ConnectionCheckedOutEvent: [Getter],
        ConnectionCheckOutFailedEvent: [Getter],
        ConnectionCheckOutStartedEvent: [Getter],
        ConnectionClosedEvent: [Getter],
        ConnectionCreatedEvent: [Getter],
        ConnectionPoolClearedEvent: [Getter],
        ConnectionPoolClosedEvent: [Getter],
        ConnectionPoolCreatedEvent: [Getter],
        ConnectionPoolMonitoringEvent: [Getter],
        ConnectionPoolReadyEvent: [Getter],
        ConnectionReadyEvent: [Getter],
        ServerClosedEvent: [Getter],
        ServerDescriptionChangedEvent: [Getter],
        ServerHeartbeatFailedEvent: [Getter],
        ServerHeartbeatStartedEvent: [Getter],
        ServerHeartbeatSucceededEvent: [Getter],
        ServerOpeningEvent: [Getter],
        TopologyClosedEvent: [Getter],
        TopologyDescriptionChangedEvent: [Getter],
        TopologyOpeningEvent: [Getter],
        SrvPollingEvent: [Getter]
      },
      mquery: [Function: Query] {
        permissions: {
          distinct: [Function (anonymous)] {
            tailable: true,
            hint: true,
            batchSize: true,
            skip: true,
            limit: true,
            sort: true,
            slice: true,
            select: true
          },
          findOneAndRemove: [Function (anonymous)] {
            tailable: true,
            batchSize: true,
            skip: true,
            limit: true
          },
          findOneAndUpdate: [Function (anonymous)] {
            tailable: true,
            batchSize: true,
            skip: true,
            limit: true
          },
          count: [Function (anonymous)] {
            tailable: true,
            batchSize: true,
            slice: true
          }
        },
        _isPermitted: [Function (anonymous)],
        canMerge: [Function (anonymous)],
        setGlobalTraceFunction: [Function (anonymous)],
        utils: {
          clone: [Function: clone],
          cloneObject: [Function: cloneObject],
          cloneArray: [Function: cloneArray],
          merge: [Function: merge],
          mergeClone: [Function: mergeClone],
          readPref: [Function: readPref],
          readConcern: [Function: readConcern],
          toString: [Function (anonymous)],
          isObject: [Function (anonymous)],
          keys: [Function: keys],
          create: [Function: create],
          inherits: [Function (anonymous)],
          isArgumentsObject: [Function (anonymous)]
        },
        env: {
          isNode: [
            '/usr/local/bin/node',
            '/Users/robwyse/code/mongoose-flights/bin/www'
          ],
          isMongo: false,
          isBrowser: false,
          type: 'node'
        },
        Collection: [class NodeCollection extends Collection],
        BaseCollection: [Function: Collection] {
          methods: [
            'find',             'findOne',
            'updateMany',       'updateOne',
            'replaceOne',       'count',
            'distinct',         'findOneAndDelete',
            'findOneAndUpdate', 'aggregate',
            'findCursor',       'deleteOne',
            'deleteMany'
          ]
        }
      },
      sanitizeFilter: [Function: sanitizeFilter],
      trusted: [Function: trusted],
      skipMiddlewareFunction: [Function: skipWrappedFunction],
      overwriteMiddlewareResult: [Function: overwriteResult]
    },
    modelName: 'Flight',
    model: [Function: model],
    db: <ref *3> NativeConnection {
      base: <ref *1> Mongoose {
        connections: [ [Circular *3] ],
        nextConnectionId: 1,
        models: <ref *4> {
          Flight: [Circular *2],
          Ticket: [Function: model] {
            hooks: [Kareem],
            base: [Circular *1],
            modelName: 'Ticket',
            model: [Function: model],
            db: [Circular *3],
            discriminators: undefined,
            events: [EventEmitter],
            '$appliedMethods': true,
            '$appliedHooks': true,
            _middleware: [Kareem],
            '$__insertMany': [Function (anonymous)],
            schema: [Schema],
            collection: [Collection],
            '$__collection': [Collection],
            Query: [Function],
            '$init': [Promise],
            '$caught': true,
            [Symbol(mongoose#Model)]: true
          }
        },
        events: EventEmitter {
          _events: [Object: null prototype] {},
          _eventsCount: 0,
          _maxListeners: undefined,
          [Symbol(kCapture)]: false
        },
        __driver: {
          Collection: [Function: NativeCollection],
          Connection: [Function: NativeConnection] {
            STATES: [Object: null prototype]
          }
        },
        options: {
          pluralization: true,
          autoIndex: true,
          autoCreate: true,
          [Symbol(mongoose:default)]: true
        },
        _pluralize: [Function: pluralize],
        Schema: [Function: Schema] {
          reserved: [Object: null prototype] {
            validate: 1,
            toObject: 1,
            save: 1,
            remove: 1,
            populated: 1,
            isNew: 1,
            isModified: 1,
            init: 1,
            get: 1,
            errors: 1,
            collection: 1,
            removeListener: 1,
            listeners: 1,
            emit: 1,
            prototype: 1
          },
          Types: {
            Array: [Function],
            Boolean: [Function],
            BigInt: [Function],
            Buffer: [Function],
            Date: [Function],
            Decimal: [Function],
            Decimal128: [Function],
            DocumentArray: [Function],
            Map: [Function],
            Mixed: [Function],
            Number: [Function],
            ObjectId: [Function],
            String: [Function],
            Subdocument: [Function],
            UUID: [Function],
            Oid: [Function],
            Object: [Function],
            Bool: [Function],
            ObjectID: [Function]
          },
          ObjectId: [Function: ObjectId] {
            schemaName: 'ObjectId',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _checkRequired: [Function (anonymous)],
            _cast: [Function: castObjectId],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          }
        },
        model: [Function (anonymous)],
        plugins: [
          [ [Function: removeSubdocs], [Object] ],
          [ [Function: saveSubdocs], [Object] ],
          [ [Function], [Object] ],
          [ [Function: trackTransaction], [Object] ],
          [ [Function: validateBeforeSave], [Object] ]
        ],
        default: [Circular *1],
        mongoose: [Circular *1],
        cast: [Function: cast],
        STATES: [Object: null prototype] {
          '0': 'disconnected',
          '1': 'connected',
          '2': 'connecting',
          '3': 'disconnecting',
          '99': 'uninitialized',
          disconnected: 0,
          connected: 1,
          connecting: 2,
          disconnecting: 3,
          uninitialized: 99
        },
        setDriver: [Function: setDriver],
        set: [Function (anonymous)],
        get: [Function (anonymous)],
        createConnection: [Function (anonymous)],
        connect: [AsyncFunction: connect],
        disconnect: [AsyncFunction: disconnect],
        startSession: [Function (anonymous)],
        pluralize: [Function (anonymous)],
        deleteModel: [Function (anonymous)],
        modelNames: [Function (anonymous)],
        plugin: [Function (anonymous)],
        version: '7.5.0',
        Mongoose: [Function: Mongoose],
        SchemaType: [Function: SchemaType] {
          cast: [Function: cast],
          set: [Function: set],
          get: [Function (anonymous)],
          _isRef: [Function (anonymous)],
          checkRequired: [Function (anonymous)],
          CastError: [class CastError extends MongooseError],
          ValidatorError: [class ValidatorError extends MongooseError]
        },
        SchemaTypes: {
          Array: [Function: SchemaArray] {
            schemaName: 'Array',
            options: [Object],
            defaultOptions: {},
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Boolean: [Function: SchemaBoolean] {
            schemaName: 'Boolean',
            defaultOptions: {},
            _cast: [Function],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)],
            '$conditionalHandlers': [Object]
          },
          BigInt: [Function: SchemaBigInt] {
            schemaName: 'BigInt',
            defaultOptions: {},
            _cast: [Function: castBigInt],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)],
            '$conditionalHandlers': [Object]
          },
          Buffer: [Function: SchemaBuffer] {
            schemaName: 'Buffer',
            defaultOptions: {},
            _checkRequired: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Date: [Function: SchemaDate] {
            schemaName: 'Date',
            defaultOptions: {},
            _cast: [Function: castDate],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Decimal: [Function: Decimal128] {
            schemaName: 'Decimal128',
            defaultOptions: {},
            _cast: [Function: castDecimal128],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Decimal128: [Function: Decimal128] {
            schemaName: 'Decimal128',
            defaultOptions: {},
            _cast: [Function: castDecimal128],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          DocumentArray: [Function: DocumentArrayPath] {
            schemaName: 'DocumentArray',
            options: [Object],
            defaultOptions: {},
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)]
          },
          Map: [class Map extends SchemaType] {
            schemaName: 'Map',
            defaultOptions: {}
          },
          Mixed: [Function: Mixed] {
            schemaName: 'Mixed',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: []
          },
          Number: [Function: SchemaNumber] {
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _cast: [Function: castNumber],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            schemaName: 'Number',
            defaultOptions: {},
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          ObjectId: [Function: ObjectId] {
            schemaName: 'ObjectId',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _checkRequired: [Function (anonymous)],
            _cast: [Function: castObjectId],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          String: [Function: SchemaString] {
            schemaName: 'String',
            defaultOptions: {},
            _cast: [Function: castString],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Subdocument: [Function: SubdocumentPath] {
            defaultOptions: {},
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)]
          },
          UUID: [Function: SchemaUUID] {
            schemaName: 'UUID',
            defaultOptions: {},
            _cast: [Function (anonymous)],
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            cast: [Function: cast],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Oid: [Function: ObjectId] {
            schemaName: 'ObjectId',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _checkRequired: [Function (anonymous)],
            _cast: [Function: castObjectId],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Object: [Function: Mixed] {
            schemaName: 'Mixed',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: []
          },
          Bool: [Function: SchemaBoolean] {
            schemaName: 'Boolean',
            defaultOptions: {},
            _cast: [Function],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)],
            '$conditionalHandlers': [Object]
          },
          ObjectID: [Function: ObjectId] {
            schemaName: 'ObjectId',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _checkRequired: [Function (anonymous)],
            _cast: [Function: castObjectId],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          }
        },
        VirtualType: [Function: VirtualType],
        Types: {
          Array: [Function: MongooseArray],
          Buffer: [Function: MongooseBuffer] {
            pathSymbol: Symbol(mongoose#Buffer#_path),
            mixin: [Object],
            Binary: [Function]
          },
          Embedded: [Function: ArraySubdocument] {
            _events: undefined,
            _eventsCount: 0,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames]
          },
          Document: [Function: ArraySubdocument] {
            _events: undefined,
            _eventsCount: 0,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames]
          },
          DocumentArray: [Function: MongooseDocumentArray],
          Decimal128: [class Decimal128 extends BSONValue],
          ObjectId: [class ObjectId extends BSONValue] { index: 10346966 },
          Map: [class MongooseMap extends Map],
          Subdocument: [Function: Subdocument],
          UUID: [class UUID extends Binary] { cacheHexString: false }
        },
        Query: [Function: Query] {
          base: {
            toConstructor: [Function: toConstructor],
            setOptions: [Function (anonymous)],
            collection: [Function: collection],
            collation: [Function (anonymous)],
            '$where': [Function (anonymous)],
            where: [Function (anonymous)],
            equals: [Function: equals],
            eq: [Function: eq],
            or: [Function: or],
            nor: [Function: nor],
            and: [Function: and],
            gt: [Function (anonymous)],
            gte: [Function (anonymous)],
            lt: [Function (anonymous)],
            lte: [Function (anonymous)],
            ne: [Function (anonymous)],
            in: [Function (anonymous)],
            nin: [Function (anonymous)],
            all: [Function (anonymous)],
            regex: [Function (anonymous)],
            size: [Function (anonymous)],
            maxDistance: [Function (anonymous)],
            minDistance: [Function (anonymous)],
            mod: [Function (anonymous)],
            exists: [Function (anonymous)],
            elemMatch: [Function (anonymous)],
            within: [Function: within],
            box: [Function (anonymous)],
            polygon: [Function (anonymous)],
            circle: [Function (anonymous)],
            near: [Function: near],
            intersects: [Function: intersects],
            geometry: [Function: geometry],
            select: [Function: select],
            slice: [Function (anonymous)],
            sort: [Function (anonymous)],
            limit: [Function (anonymous)],
            skip: [Function (anonymous)],
            batchSize: [Function (anonymous)],
            comment: [Function (anonymous)],
            maxTimeMS: [Function (anonymous)],
            maxTime: [Function (anonymous)],
            hint: [Function (anonymous)],
            j: [Function: j],
            slaveOk: [Function (anonymous)],
            setReadPreference: [Function (anonymous)],
            read: [Function (anonymous)],
            r: [Function (anonymous)],
            readConcern: [Function (anonymous)],
            tailable: [Function (anonymous)],
            w: [Function: writeConcern],
            writeConcern: [Function: writeConcern],
            wTimeout: [Function: wtimeout],
            wtimeout: [Function: wtimeout],
            merge: [Function (anonymous)],
            find: [Function (anonymous)],
            _find: [AsyncFunction: _find],
            cursor: [Function (anonymous)],
            findOne: [Function (anonymous)],
            _findOne: [AsyncFunction: _findOne],
            count: [Function (anonymous)],
            _count: [AsyncFunction: _count],
            distinct: [Function (anonymous)],
            _distinct: [AsyncFunction: _distinct],
            updateMany: [Function: updateMany],
            _updateMany: [AsyncFunction (anonymous)],
            updateOne: [Function: updateOne],
            _updateOne: [AsyncFunction (anonymous)],
            replaceOne: [Function: replaceOne],
            _replaceOne: [AsyncFunction (anonymous)],
            deleteOne: [Function (anonymous)],
            _deleteOne: [AsyncFunction (anonymous)],
            deleteMany: [Function (anonymous)],
            _deleteMany: [AsyncFunction (anonymous)],
            findOneAndUpdate: [Function (anonymous)],
            _findOneAndUpdate: [AsyncFunction (anonymous)],
            findOneAndDelete: [Function (anonymous)],
            findOneAndRemove: [Function (anonymous)],
            _findOneAndRemove: [AsyncFunction (anonymous)],
            setTraceFunction: [Function (anonymous)],
            exec: [AsyncFunction: exec],
            then: [AsyncFunction (anonymous)],
            selected: [Function: selected],
            selectedInclusively: [Function: selectedInclusively],
            selectedExclusively: [Function: selectedExclusively],
            _mergeUpdate: [Function (anonymous)],
            _optionsForExec: [Function (anonymous)],
            _fieldsForExec: [Function (anonymous)],
            _updateForExec: [Function (anonymous)],
            _ensurePath: [Function (anonymous)],
            _validate: [Function (anonymous)]
          },
          'use$geoWithin': true
        },
        Model: [Function: Model] {
          exists: [Function: exists],
          discriminator: [Function (anonymous)],
          _events: undefined,
          _eventsCount: 0,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames],
          init: [Function: init],
          createCollection: [AsyncFunction: createCollection],
          syncIndexes: [AsyncFunction: syncIndexes],
          diffIndexes: [AsyncFunction: diffIndexes],
          cleanIndexes: [AsyncFunction: cleanIndexes],
          listIndexes: [AsyncFunction: listIndexes],
          ensureIndexes: [AsyncFunction: ensureIndexes],
          createIndexes: [AsyncFunction: createIndexes],
          translateAliases: [Function: translateAliases],
          deleteOne: [Function: deleteOne],
          deleteMany: [Function: deleteMany],
          find: [Function: find],
          findById: [Function: findById],
          findOne: [Function: findOne],
          estimatedDocumentCount: [Function: estimatedDocumentCount],
          countDocuments: [Function: countDocuments],
          count: [Function: count],
          distinct: [Function: distinct],
          where: [Function: where],
          '$where': [Function: $where],
          findOneAndUpdate: [Function (anonymous)],
          findByIdAndUpdate: [Function (anonymous)],
          findOneAndDelete: [Function (anonymous)],
          findByIdAndDelete: [Function (anonymous)],
          findOneAndReplace: [Function (anonymous)],
          findOneAndRemove: [Function (anonymous)],
          findByIdAndRemove: [Function (anonymous)],
          create: [AsyncFunction: create],
          watch: [Function (anonymous)],
          startSession: [Function (anonymous)],
          insertMany: [AsyncFunction: insertMany],
          '$__insertMany': [Function (anonymous)],
          bulkWrite: [AsyncFunction: bulkWrite],
          bulkSave: [AsyncFunction (anonymous)],
          applyDefaults: [Function: applyDefaults],
          castObject: [Function: castObject],
          buildBulkWriteOperations: [Function: buildBulkWriteOperations],
          hydrate: [Function (anonymous)],
          updateMany: [Function: updateMany],
          updateOne: [Function: updateOne],
          replaceOne: [Function: replaceOne],
          aggregate: [Function: aggregate],
          validate: [AsyncFunction: validate],
          populate: [AsyncFunction: populate],
          compile: [Function: compile],
          __subclass: [Function: subclass],
          inspect: [Function (anonymous)],
          [Symbol(nodejs.util.inspect.custom)]: [Function (anonymous)]
        },
        Document: [Function: Document] {
          _events: undefined,
          _eventsCount: 0,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames],
          ValidationError: [class ValidationError extends MongooseError]
        },
        ObjectId: [Function: ObjectId] {
          schemaName: 'ObjectId',
          defaultOptions: {},
          get: [Function (anonymous)],
          set: [Function: set],
          setters: [],
          _checkRequired: [Function (anonymous)],
          _cast: [Function: castObjectId],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        isValidObjectId: [Function (anonymous)],
        isObjectIdOrHexString: [Function (anonymous)],
        syncIndexes: [Function (anonymous)],
        Decimal128: [Function: Decimal128] {
          schemaName: 'Decimal128',
          defaultOptions: {},
          _cast: [Function: castDecimal128],
          set: [Function: set],
          setters: [],
          get: [Function (anonymous)],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Mixed: [Function: Mixed] {
          schemaName: 'Mixed',
          defaultOptions: {},
          get: [Function (anonymous)],
          set: [Function: set],
          setters: []
        },
        Date: [Function: SchemaDate] {
          schemaName: 'Date',
          defaultOptions: {},
          _cast: [Function: castDate],
          set: [Function: set],
          setters: [],
          get: [Function (anonymous)],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Number: [Function: SchemaNumber] {
          get: [Function (anonymous)],
          set: [Function: set],
          setters: [],
          _cast: [Function: castNumber],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          schemaName: 'Number',
          defaultOptions: {},
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Error: [class MongooseError extends Error] {
          messages: {
            DocumentNotFoundError: null,
            general: [Object],
            Number: [Object],
            Date: [Object],
            String: [Object]
          },
          Messages: {
            DocumentNotFoundError: null,
            general: [Object],
            Number: [Object],
            Date: [Object],
            String: [Object]
          },
          DocumentNotFoundError: [class DocumentNotFoundError extends MongooseError],
          CastError: [class CastError extends MongooseError],
          ValidationError: [class ValidationError extends MongooseError],
          ValidatorError: [class ValidatorError extends MongooseError],
          VersionError: [class VersionError extends MongooseError],
          ParallelSaveError: [class ParallelSaveError extends MongooseError],
          OverwriteModelError: [class OverwriteModelError extends MongooseError],
          MissingSchemaError: [class MissingSchemaError extends MongooseError],
          MongooseServerSelectionError: [class MongooseServerSelectionError extends MongooseError],
          DivergentArrayError: [class DivergentArrayError extends MongooseError],
          StrictModeError: [class StrictModeError extends MongooseError],
          StrictPopulateError: [class StrictPopulateError extends MongooseError]
        },
        MongooseError: [class MongooseError extends Error] {
          messages: {
            DocumentNotFoundError: null,
            general: [Object],
            Number: [Object],
            Date: [Object],
            String: [Object]
          },
          Messages: {
            DocumentNotFoundError: null,
            general: [Object],
            Number: [Object],
            Date: [Object],
            String: [Object]
          },
          DocumentNotFoundError: [class DocumentNotFoundError extends MongooseError],
          CastError: [class CastError extends MongooseError],
          ValidationError: [class ValidationError extends MongooseError],
          ValidatorError: [class ValidatorError extends MongooseError],
          VersionError: [class VersionError extends MongooseError],
          ParallelSaveError: [class ParallelSaveError extends MongooseError],
          OverwriteModelError: [class OverwriteModelError extends MongooseError],
          MissingSchemaError: [class MissingSchemaError extends MongooseError],
          MongooseServerSelectionError: [class MongooseServerSelectionError extends MongooseError],
          DivergentArrayError: [class DivergentArrayError extends MongooseError],
          StrictModeError: [class StrictModeError extends MongooseError],
          StrictPopulateError: [class StrictPopulateError extends MongooseError]
        },
        now: [Function: now],
        CastError: [class CastError extends MongooseError],
        SchemaTypeOptions: [class SchemaTypeOptions],
        mongo: {
          BSON: [Getter],
          Binary: [Getter],
          BSONRegExp: [Getter],
          BSONSymbol: [Getter],
          BSONType: [Getter],
          Code: [Getter],
          DBRef: [Getter],
          Decimal128: [Getter],
          Double: [Getter],
          Int32: [Getter],
          Long: [Getter],
          MaxKey: [Getter],
          MinKey: [Getter],
          ObjectId: [Getter],
          Timestamp: [Getter],
          MongoBulkWriteError: [Getter],
          ChangeStreamCursor: [Getter],
          MongoAPIError: [Getter],
          MongoAWSError: [Getter],
          MongoAzureError: [Getter],
          MongoBatchReExecutionError: [Getter],
          MongoChangeStreamError: [Getter],
          MongoCompatibilityError: [Getter],
          MongoCursorExhaustedError: [Getter],
          MongoCursorInUseError: [Getter],
          MongoDecompressionError: [Getter],
          MongoDriverError: [Getter],
          MongoError: [Getter],
          MongoExpiredSessionError: [Getter],
          MongoGridFSChunkError: [Getter],
          MongoGridFSStreamError: [Getter],
          MongoInvalidArgumentError: [Getter],
          MongoKerberosError: [Getter],
          MongoMissingCredentialsError: [Getter],
          MongoMissingDependencyError: [Getter],
          MongoNetworkError: [Getter],
          MongoNetworkTimeoutError: [Getter],
          MongoNotConnectedError: [Getter],
          MongoParseError: [Getter],
          MongoRuntimeError: [Getter],
          MongoServerClosedError: [Getter],
          MongoServerError: [Getter],
          MongoServerSelectionError: [Getter],
          MongoSystemError: [Getter],
          MongoTailableCursorError: [Getter],
          MongoTopologyClosedError: [Getter],
          MongoTransactionError: [Getter],
          MongoUnexpectedServerResponseError: [Getter],
          MongoWriteConcernError: [Getter],
          AbstractCursor: [Getter],
          Admin: [Getter],
          AggregationCursor: [Getter],
          CancellationToken: [Getter],
          ChangeStream: [Getter],
          ClientSession: [Getter],
          Collection: [Getter],
          Db: [Getter],
          FindCursor: [Getter],
          GridFSBucket: [Getter],
          GridFSBucketReadStream: [Getter],
          GridFSBucketWriteStream: [Getter],
          ListCollectionsCursor: [Getter],
          ListIndexesCursor: [Getter],
          MongoClient: [Getter],
          OrderedBulkOperation: [Getter],
          UnorderedBulkOperation: [Getter],
          BatchType: [Getter],
          GSSAPICanonicalizationValue: [Getter],
          AuthMechanism: [Getter],
          Compressor: [Getter],
          CURSOR_FLAGS: [Getter],
          AutoEncryptionLoggerLevel: [Getter],
          MongoErrorLabel: [Getter],
          ExplainVerbosity: [Getter],
          ServerApiVersion: [Getter],
          ReturnDocument: [Getter],
          ProfilingLevel: [Getter],
          ReadConcernLevel: [Getter],
          ReadPreferenceMode: [Getter],
          ServerType: [Getter],
          TopologyType: [Getter],
          ReadConcern: [Getter],
          ReadPreference: [Getter],
          WriteConcern: [Getter],
          CommandFailedEvent: [Getter],
          CommandStartedEvent: [Getter],
          CommandSucceededEvent: [Getter],
          ConnectionCheckedInEvent: [Getter],
          ConnectionCheckedOutEvent: [Getter],
          ConnectionCheckOutFailedEvent: [Getter],
          ConnectionCheckOutStartedEvent: [Getter],
          ConnectionClosedEvent: [Getter],
          ConnectionCreatedEvent: [Getter],
          ConnectionPoolClearedEvent: [Getter],
          ConnectionPoolClosedEvent: [Getter],
          ConnectionPoolCreatedEvent: [Getter],
          ConnectionPoolMonitoringEvent: [Getter],
          ConnectionPoolReadyEvent: [Getter],
          ConnectionReadyEvent: [Getter],
          ServerClosedEvent: [Getter],
          ServerDescriptionChangedEvent: [Getter],
          ServerHeartbeatFailedEvent: [Getter],
          ServerHeartbeatStartedEvent: [Getter],
          ServerHeartbeatSucceededEvent: [Getter],
          ServerOpeningEvent: [Getter],
          TopologyClosedEvent: [Getter],
          TopologyDescriptionChangedEvent: [Getter],
          TopologyOpeningEvent: [Getter],
          SrvPollingEvent: [Getter]
        },
        mquery: [Function: Query] {
          permissions: {
            distinct: [Function],
            findOneAndRemove: [Function],
            findOneAndUpdate: [Function],
            count: [Function]
          },
          _isPermitted: [Function (anonymous)],
          canMerge: [Function (anonymous)],
          setGlobalTraceFunction: [Function (anonymous)],
          utils: {
            clone: [Function: clone],
            cloneObject: [Function: cloneObject],
            cloneArray: [Function: cloneArray],
            merge: [Function: merge],
            mergeClone: [Function: mergeClone],
            readPref: [Function: readPref],
            readConcern: [Function: readConcern],
            toString: [Function (anonymous)],
            isObject: [Function (anonymous)],
            keys: [Function: keys],
            create: [Function: create],
            inherits: [Function (anonymous)],
            isArgumentsObject: [Function (anonymous)]
          },
          env: {
            isNode: [Array],
            isMongo: false,
            isBrowser: false,
            type: 'node'
          },
          Collection: [class NodeCollection extends Collection],
          BaseCollection: [Function: Collection] { methods: [Array] }
        },
        sanitizeFilter: [Function: sanitizeFilter],
        trusted: [Function: trusted],
        skipMiddlewareFunction: [Function: skipWrappedFunction],
        overwriteMiddlewareResult: [Function: overwriteResult]
      },
      collections: {
        flights: Collection {
          collection: Collection { s: [Object], client: [MongoClient] },
          Promise: [Function: Promise],
          modelName: 'Flight',
          _closed: false,
          opts: {
            autoIndex: true,
            autoCreate: true,
            schemaUserProvidedOptions: [Object],
            capped: false,
            Promise: undefined,
            '$wasForceClosed': undefined
          },
          name: 'flights',
          collectionName: 'flights',
          conn: [Circular *3],
          queue: [],
          buffer: false,
          emitter: EventEmitter {
            _events: [Object: null prototype] {},
            _eventsCount: 0,
            _maxListeners: undefined,
            [Symbol(kCapture)]: false
          }
        },
        tickets: Collection {
          collection: Collection { s: [Object], client: [MongoClient] },
          Promise: [Function: Promise],
          modelName: 'Ticket',
          _closed: false,
          opts: {
            autoIndex: true,
            autoCreate: true,
            schemaUserProvidedOptions: {},
            capped: false,
            Promise: undefined,
            '$wasForceClosed': undefined
          },
          name: 'tickets',
          collectionName: 'tickets',
          conn: [Circular *3],
          queue: [],
          buffer: false,
          emitter: EventEmitter {
            _events: [Object: null prototype] {},
            _eventsCount: 0,
            _maxListeners: undefined,
            [Symbol(kCapture)]: false
          }
        }
      },
      models: <ref *4> {
        Flight: [Circular *2],
        Ticket: [Function: model] {
          hooks: Kareem { _pres: [Map], _posts: [Map] },
          base: <ref *1> Mongoose {
            connections: [Array],
            nextConnectionId: 1,
            models: [Circular *4],
            events: [EventEmitter],
            __driver: [Object],
            options: [Object],
            _pluralize: [Function: pluralize],
            Schema: [Function],
            model: [Function (anonymous)],
            plugins: [Array],
            default: [Circular *1],
            mongoose: [Circular *1],
            cast: [Function: cast],
            STATES: [Object: null prototype],
            setDriver: [Function: setDriver],
            set: [Function (anonymous)],
            get: [Function (anonymous)],
            createConnection: [Function (anonymous)],
            connect: [AsyncFunction: connect],
            disconnect: [AsyncFunction: disconnect],
            startSession: [Function (anonymous)],
            pluralize: [Function (anonymous)],
            deleteModel: [Function (anonymous)],
            modelNames: [Function (anonymous)],
            plugin: [Function (anonymous)],
            version: '7.5.0',
            Mongoose: [Function: Mongoose],
            SchemaType: [Function],
            SchemaTypes: [Object],
            VirtualType: [Function: VirtualType],
            Types: [Object],
            Query: [Function],
            Model: [Function],
            Document: [Function],
            ObjectId: [Function],
            isValidObjectId: [Function (anonymous)],
            isObjectIdOrHexString: [Function (anonymous)],
            syncIndexes: [Function (anonymous)],
            Decimal128: [Function],
            Mixed: [Function],
            Date: [Function],
            Number: [Function],
            Error: [Function],
            MongooseError: [Function],
            now: [Function: now],
            CastError: [class CastError extends MongooseError],
            SchemaTypeOptions: [class SchemaTypeOptions],
            mongo: [Object],
            mquery: [Function],
            sanitizeFilter: [Function: sanitizeFilter],
            trusted: [Function: trusted],
            skipMiddlewareFunction: [Function: skipWrappedFunction],
            overwriteMiddlewareResult: [Function: overwriteResult]
          },
          modelName: 'Ticket',
          model: [Function: model],
          db: [Circular *3],
          discriminators: undefined,
          events: EventEmitter {
            _events: [Object: null prototype] {},
            _eventsCount: 0,
            _maxListeners: undefined,
            [Symbol(kCapture)]: false
          },
          '$appliedMethods': true,
          '$appliedHooks': true,
          _middleware: Kareem { _pres: [Map], _posts: [Map] },
          '$__insertMany': [Function (anonymous)],
          schema: Schema {
            obj: [Object],
            paths: [Object],
            aliases: {},
            subpaths: {},
            virtuals: [Object],
            singleNestedPaths: {},
            nested: {},
            inherits: {},
            callQueue: [],
            _indexes: [],
            methods: {},
            methodOptions: {},
            statics: {},
            tree: [Object],
            query: {},
            childSchemas: [],
            plugins: [Array],
            '$id': 3,
            mapPaths: [],
            s: [Object],
            _userProvidedOptions: {},
            options: [Object],
            '$globalPluginsApplied': true
          },
          collection: Collection {
            collection: [Collection],
            Promise: [Function: Promise],
            modelName: 'Ticket',
            _closed: false,
            opts: [Object],
            name: 'tickets',
            collectionName: 'tickets',
            conn: [Circular *3],
            queue: [],
            buffer: false,
            emitter: [EventEmitter]
          },
          '$__collection': Collection {
            collection: [Collection],
            Promise: [Function: Promise],
            modelName: 'Ticket',
            _closed: false,
            opts: [Object],
            name: 'tickets',
            collectionName: 'tickets',
            conn: [Circular *3],
            queue: [],
            buffer: false,
            emitter: [EventEmitter]
          },
          Query: [Function (anonymous)] { base: [Object] },
          '$init': Promise { undefined, catch: [Function (anonymous)] },
          '$caught': true,
          [Symbol(mongoose#Model)]: true
        }
      },
      config: {},
      replica: false,
      options: null,
      otherDbs: [],
      relatedDbs: {},
      states: [Object: null prototype] {
        '0': 'disconnected',
        '1': 'connected',
        '2': 'connecting',
        '3': 'disconnecting',
        '99': 'uninitialized',
        disconnected: 0,
        connected: 1,
        connecting: 2,
        disconnecting: 3,
        uninitialized: 99
      },
      _readyState: 1,
      _closeCalled: undefined,
      _hasOpened: true,
      plugins: [],
      id: 0,
      _queue: [],
      _listening: false,
      _connectionOptions: { driverInfo: { name: 'Mongoose', version: '7.5.0' } },
      _connectionString: 'mongodb+srv://rjwyse27:Rockwell1@cluster0.udxjpgm.mongodb.net/mongoose-flights?retryWrites=true&w=majority',
      client: <ref *5> MongoClient {
        _events: [Object: null prototype] {
          topologyDescriptionChanged: [Function (anonymous)]
        },
        _eventsCount: 1,
        _maxListeners: 0,
        mongoLogger: MongoLogger {
          error: [Function: bound log],
          warn: [Function: bound log],
          info: [Function: bound log],
          debug: [Function: bound log],
          trace: [Function: bound log],
          componentSeverities: {
            command: 'off',
            topology: 'off',
            serverSelection: 'off',
            connection: 'off',
            default: 'off'
          },
          maxDocumentLength: 1000,
          logDestination: { write: [Function: write] }
        },
        s: {
          url: 'mongodb+srv://rjwyse27:Rockwell1@cluster0.udxjpgm.mongodb.net/mongoose-flights?retryWrites=true&w=majority',
          bsonOptions: {
            raw: false,
            useBigInt64: false,
            promoteLongs: true,
            promoteValues: true,
            promoteBuffers: false,
            ignoreUndefined: false,
            bsonRegExp: false,
            serializeFunctions: false,
            fieldsAsRaw: {},
            enableUtf8Validation: true
          },
          namespace: MongoDBNamespace { db: 'admin', collection: undefined },
          hasBeenClosed: false,
          sessionPool: ServerSessionPool { client: [Circular *5], sessions: [List] },
          activeSessions: Set(0) {},
          options: [Getter],
          readConcern: [Getter],
          writeConcern: [Getter],
          readPreference: [Getter],
          isMongoClient: [Getter]
        },
        connectionLock: undefined,
        topology: Topology {
          _events: [Object: null prototype] {
            topologyDescriptionChanged: [Array],
            connectionPoolCreated: [Function (anonymous)],
            connectionPoolReady: [Function (anonymous)],
            connectionPoolCleared: [Function (anonymous)],
            connectionPoolClosed: [Function (anonymous)],
            connectionCreated: [Function (anonymous)],
            connectionReady: [Function (anonymous)],
            connectionClosed: [Function (anonymous)],
            connectionCheckOutStarted: [Function (anonymous)],
            connectionCheckOutFailed: [Function (anonymous)],
            connectionCheckedOut: [Function (anonymous)],
            connectionCheckedIn: [Function (anonymous)],
            commandStarted: [Function (anonymous)],
            commandSucceeded: [Function (anonymous)],
            commandFailed: [Function (anonymous)],
            serverOpening: [Function (anonymous)],
            serverClosed: [Function (anonymous)],
            serverDescriptionChanged: [Function (anonymous)],
            topologyOpening: [Function (anonymous)],
            topologyClosed: [Function (anonymous)],
            error: [Function (anonymous)],
            timeout: [Function (anonymous)],
            close: [Function (anonymous)],
            serverHeartbeatStarted: [Function (anonymous)],
            serverHeartbeatSucceeded: [Function (anonymous)],
            serverHeartbeatFailed: [Function (anonymous)]
          },
          _eventsCount: 26,
          _maxListeners: undefined,
          client: [Circular *5],
          selectServerAsync: [Function (anonymous)],
          s: {
            id: 0,
            options: [Object: null prototype],
            seedlist: [Array],
            state: 'connected',
            description: [TopologyDescription],
            serverSelectionTimeoutMS: 30000,
            heartbeatFrequencyMS: 10000,
            minHeartbeatFrequencyMS: 500,
            servers: [Map],
            credentials: [MongoCredentials],
            clusterTime: [Object],
            connectionTimers: Set(0) {},
            detectShardedTopology: [Function: detectShardedTopology],
            detectSrvRecords: [Function: detectSrvRecords],
            srvPoller: [SrvPoller]
          },
          [Symbol(kCapture)]: false,
          [Symbol(waitQueue)]: List { count: 0, head: [Object] }
        },
        [Symbol(kCapture)]: false,
        [Symbol(options)]: [Object: null prototype] {
          hosts: [ [HostAddress], [HostAddress], [HostAddress] ],
          credentials: MongoCredentials {
            username: 'rjwyse27',
            password: 'Rockwell1',
            source: 'admin',
            mechanism: 'DEFAULT',
            mechanismProperties: {}
          },
          compressors: [ 'none' ],
          connectTimeoutMS: 30000,
          dbName: 'mongoose-flights',
          directConnection: false,
          driverInfo: { name: 'Mongoose', version: '7.5.0' },
          enableUtf8Validation: true,
          forceServerObjectId: false,
          heartbeatFrequencyMS: 10000,
          keepAlive: true,
          keepAliveInitialDelay: 120000,
          loadBalanced: false,
          localThresholdMS: 15,
          maxConnecting: 2,
          maxIdleTimeMS: 0,
          maxPoolSize: 100,
          minPoolSize: 0,
          minHeartbeatFrequencyMS: 500,
          monitorCommands: false,
          noDelay: true,
          pkFactory: { createPk: [Function: createPk] },
          raw: false,
          readPreference: ReadPreference {
            mode: 'primary',
            tags: undefined,
            hedge: undefined,
            maxStalenessSeconds: undefined,
            minWireVersion: undefined
          },
          retryReads: true,
          retryWrites: true,
          serverSelectionTimeoutMS: 30000,
          socketTimeoutMS: 0,
          srvMaxHosts: 0,
          srvServiceName: 'mongodb',
          writeConcern: WriteConcern { w: 'majority' },
          waitQueueTimeoutMS: 0,
          zlibCompressionLevel: 0,
          userSpecifiedAuthSource: false,
          userSpecifiedReplicaSet: false,
          srvHost: 'cluster0.udxjpgm.mongodb.net',
          tls: true,
          mongoLoggerOptions: {
            componentSeverities: [Object],
            maxDocumentLength: 1000,
            logDestination: [Object]
          },
          metadata: {
            driver: [Object],
            platform: 'Node.js v20.5.0, LE',
            os: [Object]
          },
          replicaSet: 'atlas-kc5ppa-shard-0',
          [Symbol(@@mdb.enableMongoLogger)]: false
        }
      },
      '$initialConnection': Promise { [Circular *3] },
      _events: [Object: null prototype] { connected: [Function (anonymous)] },
      _eventsCount: 1,
      db: Db {
        s: {
          options: {
            enableUtf8Validation: true,
            forceServerObjectId: false,
            pkFactory: [Object],
            raw: false,
            readPreference: [ReadPreference],
            retryWrites: true,
            writeConcern: [WriteConcern]
          },
          readPreference: ReadPreference {
            mode: 'primary',
            tags: undefined,
            hedge: undefined,
            maxStalenessSeconds: undefined,
            minWireVersion: undefined
          },
          bsonOptions: {
            raw: false,
            useBigInt64: false,
            promoteLongs: true,
            promoteValues: true,
            promoteBuffers: false,
            ignoreUndefined: false,
            bsonRegExp: false,
            serializeFunctions: false,
            fieldsAsRaw: {},
            enableUtf8Validation: true
          },
          pkFactory: { createPk: [Function: createPk] },
          readConcern: undefined,
          writeConcern: WriteConcern { w: 'majority' },
          namespace: MongoDBNamespace {
            db: 'mongoose-flights',
            collection: undefined
          }
        },
        client: <ref *5> MongoClient {
          _events: [Object: null prototype] {
            topologyDescriptionChanged: [Function (anonymous)]
          },
          _eventsCount: 1,
          _maxListeners: 0,
          mongoLogger: MongoLogger {
            error: [Function: bound log],
            warn: [Function: bound log],
            info: [Function: bound log],
            debug: [Function: bound log],
            trace: [Function: bound log],
            componentSeverities: [Object],
            maxDocumentLength: 1000,
            logDestination: [Object]
          },
          s: {
            url: 'mongodb+srv://rjwyse27:Rockwell1@cluster0.udxjpgm.mongodb.net/mongoose-flights?retryWrites=true&w=majority',
            bsonOptions: [Object],
            namespace: [MongoDBNamespace],
            hasBeenClosed: false,
            sessionPool: [ServerSessionPool],
            activeSessions: Set(0) {},
            options: [Getter],
            readConcern: [Getter],
            writeConcern: [Getter],
            readPreference: [Getter],
            isMongoClient: [Getter]
          },
          connectionLock: undefined,
          topology: Topology {
            _events: [Object: null prototype],
            _eventsCount: 26,
            _maxListeners: undefined,
            client: [Circular *5],
            selectServerAsync: [Function (anonymous)],
            s: [Object],
            [Symbol(kCapture)]: false,
            [Symbol(waitQueue)]: [List]
          },
          [Symbol(kCapture)]: false,
          [Symbol(options)]: [Object: null prototype] {
            hosts: [Array],
            credentials: [MongoCredentials],
            compressors: [Array],
            connectTimeoutMS: 30000,
            dbName: 'mongoose-flights',
            directConnection: false,
            driverInfo: [Object],
            enableUtf8Validation: true,
            forceServerObjectId: false,
            heartbeatFrequencyMS: 10000,
            keepAlive: true,
            keepAliveInitialDelay: 120000,
            loadBalanced: false,
            localThresholdMS: 15,
            maxConnecting: 2,
            maxIdleTimeMS: 0,
            maxPoolSize: 100,
            minPoolSize: 0,
            minHeartbeatFrequencyMS: 500,
            monitorCommands: false,
            noDelay: true,
            pkFactory: [Object],
            raw: false,
            readPreference: [ReadPreference],
            retryReads: true,
            retryWrites: true,
            serverSelectionTimeoutMS: 30000,
            socketTimeoutMS: 0,
            srvMaxHosts: 0,
            srvServiceName: 'mongodb',
            writeConcern: [WriteConcern],
            waitQueueTimeoutMS: 0,
            zlibCompressionLevel: 0,
            userSpecifiedAuthSource: false,
            userSpecifiedReplicaSet: false,
            srvHost: 'cluster0.udxjpgm.mongodb.net',
            tls: true,
            mongoLoggerOptions: [Object],
            metadata: [Object],
            replicaSet: 'atlas-kc5ppa-shard-0',
            [Symbol(@@mdb.enableMongoLogger)]: false
          }
        }
      },
      host: 'ac-sjskon9-shard-00-01.udxjpgm.mongodb.net',
      port: 27017,
      name: 'mongoose-flights'
    },
    discriminators: undefined,
    events: EventEmitter {
      _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: undefined,
      [Symbol(kCapture)]: false
    },
    '$appliedMethods': true,
    '$appliedHooks': true,
    _middleware: Kareem {
      _pres: Map(8) {
        'save' => [
          {
            fn: [Function: validateBeforeSave],
            isAsync: false,
            name: 'save'
          },
          {
            fn: [Function: saveSubdocsPreSave],
            isAsync: false,
            name: 'save'
          },
          {
            fn: [Function: timestampsPreSave],
            isAsync: false,
            name: 'save'
          },
          {
            fn: [Function: shardingPluginPreSave],
            isAsync: false,
            name: 'save'
          },
          {
            fn: [Function: trackTransactionPreSave],
            isAsync: false,
            name: 'save'
          },
          numAsync: 0
        ],
        'findOneAndReplace' => [
          {
            query: true,
            model: false,
            fn: [Function],
            isAsync: undefined,
            name: 'findOneAndReplace'
          },
          numAsync: 0
        ],
        'findOneAndUpdate' => [
          {
            query: true,
            model: false,
            fn: [Function],
            isAsync: undefined,
            name: 'findOneAndUpdate'
          },
          numAsync: 0
        ],
        'replaceOne' => [
          {
            query: true,
            model: false,
            fn: [Function],
            isAsync: undefined,
            name: 'replaceOne'
          },
          numAsync: 0
        ],
        'update' => [
          {
            query: true,
            model: false,
            fn: [Function],
            isAsync: undefined,
            name: 'update'
          },
          numAsync: 0
        ],
        'updateMany' => [
          {
            query: true,
            model: false,
            fn: [Function],
            isAsync: undefined,
            name: 'updateMany'
          },
          numAsync: 0
        ],
        'deleteOne' => [
          {
            document: true,
            query: false,
            fn: [Function: removeSubDocsPreRemove],
            isAsync: undefined,
            name: 'deleteOne'
          },
          numAsync: 0
        ],
        'remove' => [
          {
            fn: [Function: shardingPluginPreRemove],
            isAsync: false,
            name: 'remove'
          },
          numAsync: 0
        ]
      },
      _posts: Map(2) {
        'save' => [
          { fn: [Function: saveSubdocsPostSave], name: 'save' },
          { fn: [Function: shardingPluginPostSave], name: 'save' }
        ],
        'init' => [ { fn: [Function: shardingPluginPostInit], name: 'init' } ]
      }
    },
    '$__insertMany': [Function (anonymous)],
    schema: Schema {
      obj: {
        airline: {
          type: [Function: String],
          enum: [ 'American', 'Southwest', 'United' ]
        },
        airport: {
          type: [Function: String],
          default: 'DEN',
          enum: [ 'AUS', 'DFW', 'DEN', 'LAX', 'SAN' ]
        },
        flightNo: { type: [Function: Number], min: 10, max: 9999 },
        departs: { type: [Function: Date] },
        destinations: [
          Schema {
            obj: [Object],
            paths: [Object],
            aliases: {},
            subpaths: {},
            virtuals: [Object],
            singleNestedPaths: {},
            nested: {},
            inherits: {},
            callQueue: [],
            _indexes: [],
            methods: {},
            methodOptions: {},
            statics: {},
            tree: [Object],
            query: {},
            childSchemas: [],
            plugins: [Array],
            '$id': 1,
            mapPaths: [],
            s: [Object],
            _userProvidedOptions: {},
            options: [Object],
            '$globalPluginsApplied': true
          }
        ],
        tickets: [ { type: [Function], ref: 'Ticket' } ]
      },
      paths: {
        airline: SchemaString {
          enumValues: [ 'American', 'Southwest', 'United' ],
          regExp: null,
          path: 'airline',
          instance: 'String',
          validators: [ [Object] ],
          getters: [],
          setters: [],
          _presplitPath: [ 'airline' ],
          options: SchemaStringOptions {
            type: [Function: String],
            enum: [Array]
          },
          _index: null,
          enumValidator: [Function (anonymous)],
          [Symbol(mongoose#schemaType)]: true
        },
        airport: SchemaString {
          enumValues: [ 'AUS', 'DFW', 'DEN', 'LAX', 'SAN' ],
          regExp: null,
          path: 'airport',
          instance: 'String',
          validators: [ [Object] ],
          getters: [],
          setters: [],
          _presplitPath: [ 'airport' ],
          options: SchemaStringOptions {
            type: [Function: String],
            default: 'DEN',
            enum: [Array]
          },
          _index: null,
          defaultValue: 'DEN',
          enumValidator: [Function (anonymous)],
          [Symbol(mongoose#schemaType)]: true
        },
        flightNo: SchemaNumber {
          path: 'flightNo',
          instance: 'Number',
          validators: [ [Object], [Object] ],
          getters: [],
          setters: [],
          _presplitPath: [ 'flightNo' ],
          options: SchemaNumberOptions {
            type: [Function: Number],
            min: 10,
            max: 9999
          },
          _index: null,
          minValidator: [Function (anonymous)],
          maxValidator: [Function (anonymous)],
          [Symbol(mongoose#schemaType)]: true
        },
        departs: SchemaDate {
          path: 'departs',
          instance: 'Date',
          validators: [],
          getters: [],
          setters: [],
          _presplitPath: [ 'departs' ],
          options: SchemaDateOptions { type: [Function: Date] },
          _index: null,
          [Symbol(mongoose#schemaType)]: true
        },
        destinations: <ref *6> DocumentArrayPath {
          schemaOptions: {},
          casterConstructor: [Function: EmbeddedDocument] {
            schema: [Schema],
            '$isArraySubdocument': true,
            events: [EventEmitter],
            base: [Mongoose],
            _events: undefined,
            _eventsCount: 0,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            options: [Object],
            path: 'destinations',
            '$appliedMethods': true,
            '$appliedHooks': true,
            _middleware: [Kareem]
          },
          caster: [Function: EmbeddedDocument] {
            schema: [Schema],
            '$isArraySubdocument': true,
            events: [EventEmitter],
            base: [Mongoose],
            _events: undefined,
            _eventsCount: 0,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            options: [Object],
            path: 'destinations',
            '$appliedMethods': true,
            '$appliedHooks': true,
            _middleware: [Kareem]
          },
          '$embeddedSchemaType': DocumentArrayElement {
            '$parentSchemaType': [Circular *6],
            path: 'destinations.$',
            instance: 'DocumentArrayElement',
            validators: [],
            getters: [],
            setters: [],
            _presplitPath: [Array],
            options: [SchemaTypeOptions],
            _index: null,
            isRequired: false,
            '$isMongooseDocumentArrayElement': true,
            caster: [Function],
            schema: [Schema],
            [Symbol(mongoose#schemaType)]: true
          },
          '$isMongooseArray': true,
          path: 'destinations',
          instance: 'Array',
          validators: [],
          getters: [],
          setters: [],
          _presplitPath: [ 'destinations' ],
          options: SchemaDocumentArrayOptions { type: [Array] },
          _index: null,
          defaultValue: [Function (anonymous)],
          schema: Schema {
            obj: [Object],
            paths: [Object],
            aliases: {},
            subpaths: {},
            virtuals: [Object],
            singleNestedPaths: {},
            nested: {},
            inherits: {},
            callQueue: [],
            _indexes: [],
            methods: {},
            methodOptions: {},
            statics: {},
            tree: [Object],
            query: {},
            childSchemas: [],
            plugins: [Array],
            '$id': 1,
            mapPaths: [],
            s: [Object],
            _userProvidedOptions: {},
            options: [Object],
            '$globalPluginsApplied': true
          },
          '$isMongooseDocumentArray': true,
          Constructor: [Function: EmbeddedDocument] {
            schema: [Schema],
            '$isArraySubdocument': true,
            events: [EventEmitter],
            base: [Mongoose],
            _events: undefined,
            _eventsCount: 0,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            options: [Object],
            path: 'destinations',
            '$appliedMethods': true,
            '$appliedHooks': true,
            _middleware: [Kareem]
          },
          [Symbol(mongoose#schemaType)]: true
        },
        tickets: SchemaArray {
          schemaOptions: {
            timestamps: true,
            typeKey: 'type',
            id: true,
            _id: true,
            validateModifiedOnly: false,
            validateBeforeSave: true,
            read: null,
            shardKey: null,
            discriminatorKey: '__t',
            autoIndex: null,
            minimize: true,
            optimisticConcurrency: false,
            versionKey: '__v',
            capped: false,
            bufferCommands: true,
            strictQuery: false,
            strict: true,
            pluralization: true
          },
          casterConstructor: [Function: ObjectId] {
            schemaName: 'ObjectId',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _checkRequired: [Function (anonymous)],
            _cast: [Function: castObjectId],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          caster: ObjectId {
            path: 'tickets',
            instance: 'ObjectId',
            validators: [],
            getters: [],
            setters: [],
            _presplitPath: [Array],
            options: [SchemaObjectIdOptions],
            _index: null,
            _arrayPath: 'tickets.$',
            _arrayParentPath: 'tickets',
            [Symbol(mongoose#schemaType)]: true
          },
          '$embeddedSchemaType': ObjectId {
            path: 'tickets',
            instance: 'ObjectId',
            validators: [],
            getters: [],
            setters: [],
            _presplitPath: [Array],
            options: [SchemaObjectIdOptions],
            _index: null,
            _arrayPath: 'tickets.$',
            _arrayParentPath: 'tickets',
            [Symbol(mongoose#schemaType)]: true
          },
          '$isMongooseArray': true,
          path: 'tickets',
          instance: 'Array',
          validators: [],
          getters: [],
          setters: [],
          _presplitPath: [ 'tickets' ],
          options: SchemaArrayOptions { type: [Array] },
          _index: null,
          defaultValue: [Function: defaultFn] { '$runBeforeSetters': true },
          [Symbol(mongoose#schemaType)]: true
        },
        _id: ObjectId {
          path: '_id',
          instance: 'ObjectId',
          validators: [],
          getters: [],
          setters: [ [Function: resetId] ],
          _presplitPath: [ '_id' ],
          options: SchemaObjectIdOptions { auto: true, type: 'ObjectId' },
          _index: null,
          defaultValue: [Function: defaultId] { '$runBeforeSetters': true },
          [Symbol(mongoose#schemaType)]: true
        },
        createdAt: SchemaDate {
          path: 'createdAt',
          instance: 'Date',
          validators: [],
          getters: [],
          setters: [ [Function: immutableSetter], [Function: immutableSetter] ],
          _presplitPath: [ 'createdAt' ],
          options: SchemaDateOptions { type: [Function: Date], immutable: true },
          _index: null,
          '$immutable': true,
          '$immutableSetter': [Function: immutableSetter],
          [Symbol(mongoose#schemaType)]: true
        },
        updatedAt: SchemaDate {
          path: 'updatedAt',
          instance: 'Date',
          validators: [],
          getters: [],
          setters: [],
          _presplitPath: [ 'updatedAt' ],
          options: SchemaDateOptions { type: [Function: Date] },
          _index: null,
          [Symbol(mongoose#schemaType)]: true
        },
        __v: SchemaNumber {
          path: '__v',
          instance: 'Number',
          validators: [],
          getters: [],
          setters: [],
          _presplitPath: [ '__v' ],
          options: SchemaNumberOptions { type: [Function: Number] },
          _index: null,
          [Symbol(mongoose#schemaType)]: true
        }
      },
      aliases: {},
      subpaths: {
        'destinations.airport': SchemaString {
          enumValues: [ 'AUS', 'DFW', 'DEN', 'LAX', 'SAN' ],
          regExp: null,
          path: 'airport',
          instance: 'String',
          validators: [ [Object], [Object] ],
          getters: [],
          setters: [],
          _presplitPath: [ 'airport' ],
          options: SchemaStringOptions {
            type: [Function: String],
            enum: [Array],
            required: true
          },
          _index: null,
          enumValidator: [Function (anonymous)],
          isRequired: true,
          requiredValidator: [Function (anonymous)],
          originalRequiredValue: true,
          '$parentSchemaDocArray': <ref *6> DocumentArrayPath {
            schemaOptions: {},
            casterConstructor: [Function],
            caster: [Function],
            '$embeddedSchemaType': [DocumentArrayElement],
            '$isMongooseArray': true,
            path: 'destinations',
            instance: 'Array',
            validators: [],
            getters: [],
            setters: [],
            _presplitPath: [Array],
            options: [SchemaDocumentArrayOptions],
            _index: null,
            defaultValue: [Function (anonymous)],
            schema: [Schema],
            '$isMongooseDocumentArray': true,
            Constructor: [Function],
            [Symbol(mongoose#schemaType)]: true
          },
          [Symbol(mongoose#schemaType)]: true
        },
        'destinations.arrival': SchemaDate {
          path: 'arrival',
          instance: 'Date',
          validators: [],
          getters: [],
          setters: [],
          _presplitPath: [ 'arrival' ],
          options: SchemaDateOptions { type: [Function: Date] },
          _index: null,
          '$parentSchemaDocArray': <ref *6> DocumentArrayPath {
            schemaOptions: {},
            casterConstructor: [Function],
            caster: [Function],
            '$embeddedSchemaType': [DocumentArrayElement],
            '$isMongooseArray': true,
            path: 'destinations',
            instance: 'Array',
            validators: [],
            getters: [],
            setters: [],
            _presplitPath: [Array],
            options: [SchemaDocumentArrayOptions],
            _index: null,
            defaultValue: [Function (anonymous)],
            schema: [Schema],
            '$isMongooseDocumentArray': true,
            Constructor: [Function],
            [Symbol(mongoose#schemaType)]: true
          },
          [Symbol(mongoose#schemaType)]: true
        },
        'destinations._id': ObjectId {
          path: '_id',
          instance: 'ObjectId',
          validators: [],
          getters: [],
          setters: [ [Function: resetId] ],
          _presplitPath: [ '_id' ],
          options: SchemaObjectIdOptions { auto: true, type: 'ObjectId' },
          _index: null,
          defaultValue: [Function: defaultId] { '$runBeforeSetters': true },
          '$parentSchemaDocArray': <ref *6> DocumentArrayPath {
            schemaOptions: {},
            casterConstructor: [Function],
            caster: [Function],
            '$embeddedSchemaType': [DocumentArrayElement],
            '$isMongooseArray': true,
            path: 'destinations',
            instance: 'Array',
            validators: [],
            getters: [],
            setters: [],
            _presplitPath: [Array],
            options: [SchemaDocumentArrayOptions],
            _index: null,
            defaultValue: [Function (anonymous)],
            schema: [Schema],
            '$isMongooseDocumentArray': true,
            Constructor: [Function],
            [Symbol(mongoose#schemaType)]: true
          },
          [Symbol(mongoose#schemaType)]: true
        },
        'tickets.$': ObjectId {
          path: 'tickets.$',
          instance: 'ObjectId',
          validators: [],
          getters: [],
          setters: [],
          _presplitPath: [ 'tickets' ],
          options: SchemaObjectIdOptions { ref: 'Ticket' },
          _index: null,
          [Symbol(mongoose#schemaType)]: true
        }
      },
      virtuals: {
        id: VirtualType {
          path: 'id',
          getters: [ [Function: idGetter] ],
          setters: [ [Function: idSetter] ],
          options: {}
        }
      },
      singleNestedPaths: {},
      nested: {},
      inherits: {},
      callQueue: [],
      _indexes: [],
      methods: { initializeTimestamps: [Function (anonymous)] },
      methodOptions: {},
      statics: {},
      tree: {
        airline: {
          type: [Function: String],
          enum: [ 'American', 'Southwest', 'United' ]
        },
        airport: {
          type: [Function: String],
          default: 'DEN',
          enum: [ 'AUS', 'DFW', 'DEN', 'LAX', 'SAN' ]
        },
        flightNo: { type: [Function: Number], min: 10, max: 9999 },
        departs: { type: [Function: Date] },
        destinations: [
          Schema {
            obj: [Object],
            paths: [Object],
            aliases: {},
            subpaths: {},
            virtuals: [Object],
            singleNestedPaths: {},
            nested: {},
            inherits: {},
            callQueue: [],
            _indexes: [],
            methods: {},
            methodOptions: {},
            statics: {},
            tree: [Object],
            query: {},
            childSchemas: [],
            plugins: [Array],
            '$id': 1,
            mapPaths: [],
            s: [Object],
            _userProvidedOptions: {},
            options: [Object],
            '$globalPluginsApplied': true
          }
        ],
        tickets: [ { type: [Function], ref: 'Ticket' } ],
        _id: { auto: true, type: 'ObjectId' },
        createdAt: { type: [Function: Date], immutable: true },
        updatedAt: [Function: Date],
        __v: [Function: Number],
        id: VirtualType {
          path: 'id',
          getters: [ [Function: idGetter] ],
          setters: [ [Function: idSetter] ],
          options: {}
        }
      },
      query: {},
      childSchemas: [
        {
          schema: Schema {
            obj: [Object],
            paths: [Object],
            aliases: {},
            subpaths: {},
            virtuals: [Object],
            singleNestedPaths: {},
            nested: {},
            inherits: {},
            callQueue: [],
            _indexes: [],
            methods: {},
            methodOptions: {},
            statics: {},
            tree: [Object],
            query: {},
            childSchemas: [],
            plugins: [Array],
            '$id': 1,
            mapPaths: [],
            s: [Object],
            _userProvidedOptions: {},
            options: [Object],
            '$globalPluginsApplied': true
          },
          model: [Function: EmbeddedDocument] {
            schema: [Schema],
            '$isArraySubdocument': true,
            events: [EventEmitter],
            base: [Mongoose],
            _events: undefined,
            _eventsCount: 0,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            options: [Object],
            path: 'destinations',
            '$appliedMethods': true,
            '$appliedHooks': true,
            _middleware: [Kareem]
          }
        }
      ],
      plugins: [
        { fn: [Function: removeSubdocs], opts: { deduplicate: true } },
        { fn: [Function: saveSubdocs], opts: { deduplicate: true } },
        {
          fn: [Function: shardingPlugin] {
            storeShard: [Function: storeShard]
          },
          opts: { deduplicate: true }
        },
        {
          fn: [Function: trackTransaction],
          opts: { deduplicate: true }
        },
        {
          fn: [Function: validateBeforeSave],
          opts: { deduplicate: true }
        }
      ],
      '$id': 2,
      mapPaths: [],
      s: {
        hooks: Kareem {
          _pres: Map(9) {
            'save' => [Array],
            'findOneAndReplace' => [Array],
            'findOneAndUpdate' => [Array],
            'replaceOne' => [Array],
            'update' => [Array],
            'updateOne' => [Array],
            'updateMany' => [Array],
            'deleteOne' => [Array],
            'remove' => [Array]
          },
          _posts: Map(2) { 'save' => [Array], 'init' => [Array] }
        }
      },
      _userProvidedOptions: { timestamps: true },
      options: {
        timestamps: true,
        typeKey: 'type',
        id: true,
        _id: true,
        validateModifiedOnly: false,
        validateBeforeSave: true,
        read: null,
        shardKey: null,
        discriminatorKey: '__t',
        autoIndex: null,
        minimize: true,
        optimisticConcurrency: false,
        versionKey: '__v',
        capped: false,
        bufferCommands: true,
        strictQuery: false,
        strict: true,
        pluralization: true
      },
      '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' },
      '$globalPluginsApplied': true
    },
    collection: <ref *7> Collection {
      collection: Collection {
        s: {
          db: Db { s: [Object], client: [MongoClient] },
          options: {
            raw: false,
            useBigInt64: false,
            promoteLongs: true,
            promoteValues: true,
            promoteBuffers: false,
            ignoreUndefined: false,
            bsonRegExp: false,
            serializeFunctions: false,
            fieldsAsRaw: {},
            enableUtf8Validation: true,
            writeConcern: [WriteConcern],
            readPreference: [ReadPreference]
          },
          namespace: MongoDBCollectionNamespace {
            db: 'mongoose-flights',
            collection: 'flights'
          },
          pkFactory: { createPk: [Function: createPk] },
          readPreference: ReadPreference {
            mode: 'primary',
            tags: undefined,
            hedge: undefined,
            maxStalenessSeconds: undefined,
            minWireVersion: undefined
          },
          bsonOptions: {
            raw: false,
            useBigInt64: false,
            promoteLongs: true,
            promoteValues: true,
            promoteBuffers: false,
            ignoreUndefined: false,
            bsonRegExp: false,
            serializeFunctions: false,
            fieldsAsRaw: {},
            enableUtf8Validation: true
          },
          readConcern: undefined,
          writeConcern: WriteConcern { w: 'majority' }
        },
        client: <ref *5> MongoClient {
          _events: [Object: null prototype] {
            topologyDescriptionChanged: [Function (anonymous)]
          },
          _eventsCount: 1,
          _maxListeners: 0,
          mongoLogger: MongoLogger {
            error: [Function: bound log],
            warn: [Function: bound log],
            info: [Function: bound log],
            debug: [Function: bound log],
            trace: [Function: bound log],
            componentSeverities: [Object],
            maxDocumentLength: 1000,
            logDestination: [Object]
          },
          s: {
            url: 'mongodb+srv://rjwyse27:Rockwell1@cluster0.udxjpgm.mongodb.net/mongoose-flights?retryWrites=true&w=majority',
            bsonOptions: [Object],
            namespace: [MongoDBNamespace],
            hasBeenClosed: false,
            sessionPool: [ServerSessionPool],
            activeSessions: Set(0) {},
            options: [Getter],
            readConcern: [Getter],
            writeConcern: [Getter],
            readPreference: [Getter],
            isMongoClient: [Getter]
          },
          connectionLock: undefined,
          topology: Topology {
            _events: [Object: null prototype],
            _eventsCount: 26,
            _maxListeners: undefined,
            client: [Circular *5],
            selectServerAsync: [Function (anonymous)],
            s: [Object],
            [Symbol(kCapture)]: false,
            [Symbol(waitQueue)]: [List]
          },
          [Symbol(kCapture)]: false,
          [Symbol(options)]: [Object: null prototype] {
            hosts: [Array],
            credentials: [MongoCredentials],
            compressors: [Array],
            connectTimeoutMS: 30000,
            dbName: 'mongoose-flights',
            directConnection: false,
            driverInfo: [Object],
            enableUtf8Validation: true,
            forceServerObjectId: false,
            heartbeatFrequencyMS: 10000,
            keepAlive: true,
            keepAliveInitialDelay: 120000,
            loadBalanced: false,
            localThresholdMS: 15,
            maxConnecting: 2,
            maxIdleTimeMS: 0,
            maxPoolSize: 100,
            minPoolSize: 0,
            minHeartbeatFrequencyMS: 500,
            monitorCommands: false,
            noDelay: true,
            pkFactory: [Object],
            raw: false,
            readPreference: [ReadPreference],
            retryReads: true,
            retryWrites: true,
            serverSelectionTimeoutMS: 30000,
            socketTimeoutMS: 0,
            srvMaxHosts: 0,
            srvServiceName: 'mongodb',
            writeConcern: [WriteConcern],
            waitQueueTimeoutMS: 0,
            zlibCompressionLevel: 0,
            userSpecifiedAuthSource: false,
            userSpecifiedReplicaSet: false,
            srvHost: 'cluster0.udxjpgm.mongodb.net',
            tls: true,
            mongoLoggerOptions: [Object],
            metadata: [Object],
            replicaSet: 'atlas-kc5ppa-shard-0',
            [Symbol(@@mdb.enableMongoLogger)]: false
          }
        }
      },
      Promise: [Function: Promise],
      modelName: 'Flight',
      _closed: false,
      opts: {
        autoIndex: true,
        autoCreate: true,
        schemaUserProvidedOptions: { timestamps: true },
        capped: false,
        Promise: undefined,
        '$wasForceClosed': undefined
      },
      name: 'flights',
      collectionName: 'flights',
      conn: <ref *3> NativeConnection {
        base: <ref *1> Mongoose {
          connections: [ [Circular *3] ],
          nextConnectionId: 1,
          models: <ref *4> { Flight: [Circular *2], Ticket: [Function] },
          events: EventEmitter {
            _events: [Object: null prototype] {},
            _eventsCount: 0,
            _maxListeners: undefined,
            [Symbol(kCapture)]: false
          },
          __driver: {
            Collection: [Function: NativeCollection],
            Connection: [Function]
          },
          options: {
            pluralization: true,
            autoIndex: true,
            autoCreate: true,
            [Symbol(mongoose:default)]: true
          },
          _pluralize: [Function: pluralize],
          Schema: [Function: Schema] {
            reserved: [Object: null prototype],
            Types: [Object],
            ObjectId: [Function]
          },
          model: [Function (anonymous)],
          plugins: [ [Array], [Array], [Array], [Array], [Array] ],
          default: [Circular *1],
          mongoose: [Circular *1],
          cast: [Function: cast],
          STATES: [Object: null prototype] {
            '0': 'disconnected',
            '1': 'connected',
            '2': 'connecting',
            '3': 'disconnecting',
            '99': 'uninitialized',
            disconnected: 0,
            connected: 1,
            connecting: 2,
            disconnecting: 3,
            uninitialized: 99
          },
          setDriver: [Function: setDriver],
          set: [Function (anonymous)],
          get: [Function (anonymous)],
          createConnection: [Function (anonymous)],
          connect: [AsyncFunction: connect],
          disconnect: [AsyncFunction: disconnect],
          startSession: [Function (anonymous)],
          pluralize: [Function (anonymous)],
          deleteModel: [Function (anonymous)],
          modelNames: [Function (anonymous)],
          plugin: [Function (anonymous)],
          version: '7.5.0',
          Mongoose: [Function: Mongoose],
          SchemaType: [Function: SchemaType] {
            cast: [Function: cast],
            set: [Function: set],
            get: [Function (anonymous)],
            _isRef: [Function (anonymous)],
            checkRequired: [Function (anonymous)],
            CastError: [class CastError extends MongooseError],
            ValidatorError: [class ValidatorError extends MongooseError]
          },
          SchemaTypes: {
            Array: [Function],
            Boolean: [Function],
            BigInt: [Function],
            Buffer: [Function],
            Date: [Function],
            Decimal: [Function],
            Decimal128: [Function],
            DocumentArray: [Function],
            Map: [Function],
            Mixed: [Function],
            Number: [Function],
            ObjectId: [Function],
            String: [Function],
            Subdocument: [Function],
            UUID: [Function],
            Oid: [Function],
            Object: [Function],
            Bool: [Function],
            ObjectID: [Function]
          },
          VirtualType: [Function: VirtualType],
          Types: {
            Array: [Function: MongooseArray],
            Buffer: [Function],
            Embedded: [Function],
            Document: [Function],
            DocumentArray: [Function: MongooseDocumentArray],
            Decimal128: [class Decimal128 extends BSONValue],
            ObjectId: [Function],
            Map: [class MongooseMap extends Map],
            Subdocument: [Function: Subdocument],
            UUID: [Function]
          },
          Query: [Function: Query] { base: [Object], 'use$geoWithin': true },
          Model: [Function: Model] {
            exists: [Function: exists],
            discriminator: [Function (anonymous)],
            _events: undefined,
            _eventsCount: 0,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            createCollection: [AsyncFunction: createCollection],
            syncIndexes: [AsyncFunction: syncIndexes],
            diffIndexes: [AsyncFunction: diffIndexes],
            cleanIndexes: [AsyncFunction: cleanIndexes],
            listIndexes: [AsyncFunction: listIndexes],
            ensureIndexes: [AsyncFunction: ensureIndexes],
            createIndexes: [AsyncFunction: createIndexes],
            translateAliases: [Function: translateAliases],
            deleteOne: [Function: deleteOne],
            deleteMany: [Function: deleteMany],
            find: [Function: find],
            findById: [Function: findById],
            findOne: [Function: findOne],
            estimatedDocumentCount: [Function: estimatedDocumentCount],
            countDocuments: [Function: countDocuments],
            count: [Function: count],
            distinct: [Function: distinct],
            where: [Function: where],
            '$where': [Function: $where],
            findOneAndUpdate: [Function (anonymous)],
            findByIdAndUpdate: [Function (anonymous)],
            findOneAndDelete: [Function (anonymous)],
            findByIdAndDelete: [Function (anonymous)],
            findOneAndReplace: [Function (anonymous)],
            findOneAndRemove: [Function (anonymous)],
            findByIdAndRemove: [Function (anonymous)],
            create: [AsyncFunction: create],
            watch: [Function (anonymous)],
            startSession: [Function (anonymous)],
            insertMany: [AsyncFunction: insertMany],
            '$__insertMany': [Function (anonymous)],
            bulkWrite: [AsyncFunction: bulkWrite],
            bulkSave: [AsyncFunction (anonymous)],
            applyDefaults: [Function: applyDefaults],
            castObject: [Function: castObject],
            buildBulkWriteOperations: [Function: buildBulkWriteOperations],
            hydrate: [Function (anonymous)],
            updateMany: [Function: updateMany],
            updateOne: [Function: updateOne],
            replaceOne: [Function: replaceOne],
            aggregate: [Function: aggregate],
            validate: [AsyncFunction: validate],
            populate: [AsyncFunction: populate],
            compile: [Function: compile],
            __subclass: [Function: subclass],
            inspect: [Function (anonymous)],
            [Symbol(nodejs.util.inspect.custom)]: [Function (anonymous)]
          },
          Document: [Function: Document] {
            _events: undefined,
            _eventsCount: 0,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            ValidationError: [class ValidationError extends MongooseError]
          },
          ObjectId: [Function: ObjectId] {
            schemaName: 'ObjectId',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _checkRequired: [Function (anonymous)],
            _cast: [Function: castObjectId],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          isValidObjectId: [Function (anonymous)],
          isObjectIdOrHexString: [Function (anonymous)],
          syncIndexes: [Function (anonymous)],
          Decimal128: [Function: Decimal128] {
            schemaName: 'Decimal128',
            defaultOptions: {},
            _cast: [Function: castDecimal128],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Mixed: [Function: Mixed] {
            schemaName: 'Mixed',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: []
          },
          Date: [Function: SchemaDate] {
            schemaName: 'Date',
            defaultOptions: {},
            _cast: [Function: castDate],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Number: [Function: SchemaNumber] {
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _cast: [Function: castNumber],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            schemaName: 'Number',
            defaultOptions: {},
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Error: [class MongooseError extends Error] {
            messages: [Object],
            Messages: [Object],
            DocumentNotFoundError: [class DocumentNotFoundError extends MongooseError],
            CastError: [class CastError extends MongooseError],
            ValidationError: [class ValidationError extends MongooseError],
            ValidatorError: [class ValidatorError extends MongooseError],
            VersionError: [class VersionError extends MongooseError],
            ParallelSaveError: [class ParallelSaveError extends MongooseError],
            OverwriteModelError: [class OverwriteModelError extends MongooseError],
            MissingSchemaError: [class MissingSchemaError extends MongooseError],
            MongooseServerSelectionError: [class MongooseServerSelectionError extends MongooseError],
            DivergentArrayError: [class DivergentArrayError extends MongooseError],
            StrictModeError: [class StrictModeError extends MongooseError],
            StrictPopulateError: [class StrictPopulateError extends MongooseError]
          },
          MongooseError: [class MongooseError extends Error] {
            messages: [Object],
            Messages: [Object],
            DocumentNotFoundError: [class DocumentNotFoundError extends MongooseError],
            CastError: [class CastError extends MongooseError],
            ValidationError: [class ValidationError extends MongooseError],
            ValidatorError: [class ValidatorError extends MongooseError],
            VersionError: [class VersionError extends MongooseError],
            ParallelSaveError: [class ParallelSaveError extends MongooseError],
            OverwriteModelError: [class OverwriteModelError extends MongooseError],
            MissingSchemaError: [class MissingSchemaError extends MongooseError],
            MongooseServerSelectionError: [class MongooseServerSelectionError extends MongooseError],
            DivergentArrayError: [class DivergentArrayError extends MongooseError],
            StrictModeError: [class StrictModeError extends MongooseError],
            StrictPopulateError: [class StrictPopulateError extends MongooseError]
          },
          now: [Function: now],
          CastError: [class CastError extends MongooseError],
          SchemaTypeOptions: [class SchemaTypeOptions],
          mongo: {
            BSON: [Getter],
            Binary: [Getter],
            BSONRegExp: [Getter],
            BSONSymbol: [Getter],
            BSONType: [Getter],
            Code: [Getter],
            DBRef: [Getter],
            Decimal128: [Getter],
            Double: [Getter],
            Int32: [Getter],
            Long: [Getter],
            MaxKey: [Getter],
            MinKey: [Getter],
            ObjectId: [Getter],
            Timestamp: [Getter],
            MongoBulkWriteError: [Getter],
            ChangeStreamCursor: [Getter],
            MongoAPIError: [Getter],
            MongoAWSError: [Getter],
            MongoAzureError: [Getter],
            MongoBatchReExecutionError: [Getter],
            MongoChangeStreamError: [Getter],
            MongoCompatibilityError: [Getter],
            MongoCursorExhaustedError: [Getter],
            MongoCursorInUseError: [Getter],
            MongoDecompressionError: [Getter],
            MongoDriverError: [Getter],
            MongoError: [Getter],
            MongoExpiredSessionError: [Getter],
            MongoGridFSChunkError: [Getter],
            MongoGridFSStreamError: [Getter],
            MongoInvalidArgumentError: [Getter],
            MongoKerberosError: [Getter],
            MongoMissingCredentialsError: [Getter],
            MongoMissingDependencyError: [Getter],
            MongoNetworkError: [Getter],
            MongoNetworkTimeoutError: [Getter],
            MongoNotConnectedError: [Getter],
            MongoParseError: [Getter],
            MongoRuntimeError: [Getter],
            MongoServerClosedError: [Getter],
            MongoServerError: [Getter],
            MongoServerSelectionError: [Getter],
            MongoSystemError: [Getter],
            MongoTailableCursorError: [Getter],
            MongoTopologyClosedError: [Getter],
            MongoTransactionError: [Getter],
            MongoUnexpectedServerResponseError: [Getter],
            MongoWriteConcernError: [Getter],
            AbstractCursor: [Getter],
            Admin: [Getter],
            AggregationCursor: [Getter],
            CancellationToken: [Getter],
            ChangeStream: [Getter],
            ClientSession: [Getter],
            Collection: [Getter],
            Db: [Getter],
            FindCursor: [Getter],
            GridFSBucket: [Getter],
            GridFSBucketReadStream: [Getter],
            GridFSBucketWriteStream: [Getter],
            ListCollectionsCursor: [Getter],
            ListIndexesCursor: [Getter],
            MongoClient: [Getter],
            OrderedBulkOperation: [Getter],
            UnorderedBulkOperation: [Getter],
            BatchType: [Getter],
            GSSAPICanonicalizationValue: [Getter],
            AuthMechanism: [Getter],
            Compressor: [Getter],
            CURSOR_FLAGS: [Getter],
            AutoEncryptionLoggerLevel: [Getter],
            MongoErrorLabel: [Getter],
            ExplainVerbosity: [Getter],
            ServerApiVersion: [Getter],
            ReturnDocument: [Getter],
            ProfilingLevel: [Getter],
            ReadConcernLevel: [Getter],
            ReadPreferenceMode: [Getter],
            ServerType: [Getter],
            TopologyType: [Getter],
            ReadConcern: [Getter],
            ReadPreference: [Getter],
            WriteConcern: [Getter],
            CommandFailedEvent: [Getter],
            CommandStartedEvent: [Getter],
            CommandSucceededEvent: [Getter],
            ConnectionCheckedInEvent: [Getter],
            ConnectionCheckedOutEvent: [Getter],
            ConnectionCheckOutFailedEvent: [Getter],
            ConnectionCheckOutStartedEvent: [Getter],
            ConnectionClosedEvent: [Getter],
            ConnectionCreatedEvent: [Getter],
            ConnectionPoolClearedEvent: [Getter],
            ConnectionPoolClosedEvent: [Getter],
            ConnectionPoolCreatedEvent: [Getter],
            ConnectionPoolMonitoringEvent: [Getter],
            ConnectionPoolReadyEvent: [Getter],
            ConnectionReadyEvent: [Getter],
            ServerClosedEvent: [Getter],
            ServerDescriptionChangedEvent: [Getter],
            ServerHeartbeatFailedEvent: [Getter],
            ServerHeartbeatStartedEvent: [Getter],
            ServerHeartbeatSucceededEvent: [Getter],
            ServerOpeningEvent: [Getter],
            TopologyClosedEvent: [Getter],
            TopologyDescriptionChangedEvent: [Getter],
            TopologyOpeningEvent: [Getter],
            SrvPollingEvent: [Getter]
          },
          mquery: [Function: Query] {
            permissions: [Object],
            _isPermitted: [Function (anonymous)],
            canMerge: [Function (anonymous)],
            setGlobalTraceFunction: [Function (anonymous)],
            utils: [Object],
            env: [Object],
            Collection: [class NodeCollection extends Collection],
            BaseCollection: [Function]
          },
          sanitizeFilter: [Function: sanitizeFilter],
          trusted: [Function: trusted],
          skipMiddlewareFunction: [Function: skipWrappedFunction],
          overwriteMiddlewareResult: [Function: overwriteResult]
        },
        collections: {
          flights: [Circular *7],
          tickets: Collection {
            collection: [Collection],
            Promise: [Function: Promise],
            modelName: 'Ticket',
            _closed: false,
            opts: [Object],
            name: 'tickets',
            collectionName: 'tickets',
            conn: [Circular *3],
            queue: [],
            buffer: false,
            emitter: [EventEmitter]
          }
        },
        models: <ref *4> {
          Flight: [Circular *2],
          Ticket: [Function: model] {
            hooks: [Kareem],
            base: [Mongoose],
            modelName: 'Ticket',
            model: [Function: model],
            db: [Circular *3],
            discriminators: undefined,
            events: [EventEmitter],
            '$appliedMethods': true,
            '$appliedHooks': true,
            _middleware: [Kareem],
            '$__insertMany': [Function (anonymous)],
            schema: [Schema],
            collection: [Collection],
            '$__collection': [Collection],
            Query: [Function],
            '$init': [Promise],
            '$caught': true,
            [Symbol(mongoose#Model)]: true
          }
        },
        config: {},
        replica: false,
        options: null,
        otherDbs: [],
        relatedDbs: {},
        states: [Object: null prototype] {
          '0': 'disconnected',
          '1': 'connected',
          '2': 'connecting',
          '3': 'disconnecting',
          '99': 'uninitialized',
          disconnected: 0,
          connected: 1,
          connecting: 2,
          disconnecting: 3,
          uninitialized: 99
        },
        _readyState: 1,
        _closeCalled: undefined,
        _hasOpened: true,
        plugins: [],
        id: 0,
        _queue: [],
        _listening: false,
        _connectionOptions: { driverInfo: { name: 'Mongoose', version: '7.5.0' } },
        _connectionString: 'mongodb+srv://rjwyse27:Rockwell1@cluster0.udxjpgm.mongodb.net/mongoose-flights?retryWrites=true&w=majority',
        client: <ref *5> MongoClient {
          _events: [Object: null prototype] {
            topologyDescriptionChanged: [Function (anonymous)]
          },
          _eventsCount: 1,
          _maxListeners: 0,
          mongoLogger: MongoLogger {
            error: [Function: bound log],
            warn: [Function: bound log],
            info: [Function: bound log],
            debug: [Function: bound log],
            trace: [Function: bound log],
            componentSeverities: [Object],
            maxDocumentLength: 1000,
            logDestination: [Object]
          },
          s: {
            url: 'mongodb+srv://rjwyse27:Rockwell1@cluster0.udxjpgm.mongodb.net/mongoose-flights?retryWrites=true&w=majority',
            bsonOptions: [Object],
            namespace: [MongoDBNamespace],
            hasBeenClosed: false,
            sessionPool: [ServerSessionPool],
            activeSessions: Set(0) {},
            options: [Getter],
            readConcern: [Getter],
            writeConcern: [Getter],
            readPreference: [Getter],
            isMongoClient: [Getter]
          },
          connectionLock: undefined,
          topology: Topology {
            _events: [Object: null prototype],
            _eventsCount: 26,
            _maxListeners: undefined,
            client: [Circular *5],
            selectServerAsync: [Function (anonymous)],
            s: [Object],
            [Symbol(kCapture)]: false,
            [Symbol(waitQueue)]: [List]
          },
          [Symbol(kCapture)]: false,
          [Symbol(options)]: [Object: null prototype] {
            hosts: [Array],
            credentials: [MongoCredentials],
            compressors: [Array],
            connectTimeoutMS: 30000,
            dbName: 'mongoose-flights',
            directConnection: false,
            driverInfo: [Object],
            enableUtf8Validation: true,
            forceServerObjectId: false,
            heartbeatFrequencyMS: 10000,
            keepAlive: true,
            keepAliveInitialDelay: 120000,
            loadBalanced: false,
            localThresholdMS: 15,
            maxConnecting: 2,
            maxIdleTimeMS: 0,
            maxPoolSize: 100,
            minPoolSize: 0,
            minHeartbeatFrequencyMS: 500,
            monitorCommands: false,
            noDelay: true,
            pkFactory: [Object],
            raw: false,
            readPreference: [ReadPreference],
            retryReads: true,
            retryWrites: true,
            serverSelectionTimeoutMS: 30000,
            socketTimeoutMS: 0,
            srvMaxHosts: 0,
            srvServiceName: 'mongodb',
            writeConcern: [WriteConcern],
            waitQueueTimeoutMS: 0,
            zlibCompressionLevel: 0,
            userSpecifiedAuthSource: false,
            userSpecifiedReplicaSet: false,
            srvHost: 'cluster0.udxjpgm.mongodb.net',
            tls: true,
            mongoLoggerOptions: [Object],
            metadata: [Object],
            replicaSet: 'atlas-kc5ppa-shard-0',
            [Symbol(@@mdb.enableMongoLogger)]: false
          }
        },
        '$initialConnection': Promise { [Circular *3] },
        _events: [Object: null prototype] { connected: [Function (anonymous)] },
        _eventsCount: 1,
        db: Db {
          s: {
            options: [Object],
            readPreference: [ReadPreference],
            bsonOptions: [Object],
            pkFactory: [Object],
            readConcern: undefined,
            writeConcern: [WriteConcern],
            namespace: [MongoDBNamespace]
          },
          client: <ref *5> MongoClient {
            _events: [Object: null prototype],
            _eventsCount: 1,
            _maxListeners: 0,
            mongoLogger: [MongoLogger],
            s: [Object],
            connectionLock: undefined,
            topology: [Topology],
            [Symbol(kCapture)]: false,
            [Symbol(options)]: [Object: null prototype]
          }
        },
        host: 'ac-sjskon9-shard-00-01.udxjpgm.mongodb.net',
        port: 27017,
        name: 'mongoose-flights'
      },
      queue: [],
      buffer: false,
      emitter: EventEmitter {
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        [Symbol(kCapture)]: false
      }
    },
    '$__collection': <ref *7> Collection {
      collection: Collection {
        s: {
          db: Db { s: [Object], client: [MongoClient] },
          options: {
            raw: false,
            useBigInt64: false,
            promoteLongs: true,
            promoteValues: true,
            promoteBuffers: false,
            ignoreUndefined: false,
            bsonRegExp: false,
            serializeFunctions: false,
            fieldsAsRaw: {},
            enableUtf8Validation: true,
            writeConcern: [WriteConcern],
            readPreference: [ReadPreference]
          },
          namespace: MongoDBCollectionNamespace {
            db: 'mongoose-flights',
            collection: 'flights'
          },
          pkFactory: { createPk: [Function: createPk] },
          readPreference: ReadPreference {
            mode: 'primary',
            tags: undefined,
            hedge: undefined,
            maxStalenessSeconds: undefined,
            minWireVersion: undefined
          },
          bsonOptions: {
            raw: false,
            useBigInt64: false,
            promoteLongs: true,
            promoteValues: true,
            promoteBuffers: false,
            ignoreUndefined: false,
            bsonRegExp: false,
            serializeFunctions: false,
            fieldsAsRaw: {},
            enableUtf8Validation: true
          },
          readConcern: undefined,
          writeConcern: WriteConcern { w: 'majority' }
        },
        client: <ref *5> MongoClient {
          _events: [Object: null prototype] {
            topologyDescriptionChanged: [Function (anonymous)]
          },
          _eventsCount: 1,
          _maxListeners: 0,
          mongoLogger: MongoLogger {
            error: [Function: bound log],
            warn: [Function: bound log],
            info: [Function: bound log],
            debug: [Function: bound log],
            trace: [Function: bound log],
            componentSeverities: [Object],
            maxDocumentLength: 1000,
            logDestination: [Object]
          },
          s: {
            url: 'mongodb+srv://rjwyse27:Rockwell1@cluster0.udxjpgm.mongodb.net/mongoose-flights?retryWrites=true&w=majority',
            bsonOptions: [Object],
            namespace: [MongoDBNamespace],
            hasBeenClosed: false,
            sessionPool: [ServerSessionPool],
            activeSessions: Set(0) {},
            options: [Getter],
            readConcern: [Getter],
            writeConcern: [Getter],
            readPreference: [Getter],
            isMongoClient: [Getter]
          },
          connectionLock: undefined,
          topology: Topology {
            _events: [Object: null prototype],
            _eventsCount: 26,
            _maxListeners: undefined,
            client: [Circular *5],
            selectServerAsync: [Function (anonymous)],
            s: [Object],
            [Symbol(kCapture)]: false,
            [Symbol(waitQueue)]: [List]
          },
          [Symbol(kCapture)]: false,
          [Symbol(options)]: [Object: null prototype] {
            hosts: [Array],
            credentials: [MongoCredentials],
            compressors: [Array],
            connectTimeoutMS: 30000,
            dbName: 'mongoose-flights',
            directConnection: false,
            driverInfo: [Object],
            enableUtf8Validation: true,
            forceServerObjectId: false,
            heartbeatFrequencyMS: 10000,
            keepAlive: true,
            keepAliveInitialDelay: 120000,
            loadBalanced: false,
            localThresholdMS: 15,
            maxConnecting: 2,
            maxIdleTimeMS: 0,
            maxPoolSize: 100,
            minPoolSize: 0,
            minHeartbeatFrequencyMS: 500,
            monitorCommands: false,
            noDelay: true,
            pkFactory: [Object],
            raw: false,
            readPreference: [ReadPreference],
            retryReads: true,
            retryWrites: true,
            serverSelectionTimeoutMS: 30000,
            socketTimeoutMS: 0,
            srvMaxHosts: 0,
            srvServiceName: 'mongodb',
            writeConcern: [WriteConcern],
            waitQueueTimeoutMS: 0,
            zlibCompressionLevel: 0,
            userSpecifiedAuthSource: false,
            userSpecifiedReplicaSet: false,
            srvHost: 'cluster0.udxjpgm.mongodb.net',
            tls: true,
            mongoLoggerOptions: [Object],
            metadata: [Object],
            replicaSet: 'atlas-kc5ppa-shard-0',
            [Symbol(@@mdb.enableMongoLogger)]: false
          }
        }
      },
      Promise: [Function: Promise],
      modelName: 'Flight',
      _closed: false,
      opts: {
        autoIndex: true,
        autoCreate: true,
        schemaUserProvidedOptions: { timestamps: true },
        capped: false,
        Promise: undefined,
        '$wasForceClosed': undefined
      },
      name: 'flights',
      collectionName: 'flights',
      conn: <ref *3> NativeConnection {
        base: <ref *1> Mongoose {
          connections: [ [Circular *3] ],
          nextConnectionId: 1,
          models: <ref *4> { Flight: [Circular *2], Ticket: [Function] },
          events: EventEmitter {
            _events: [Object: null prototype] {},
            _eventsCount: 0,
            _maxListeners: undefined,
            [Symbol(kCapture)]: false
          },
          __driver: {
            Collection: [Function: NativeCollection],
            Connection: [Function]
          },
          options: {
            pluralization: true,
            autoIndex: true,
            autoCreate: true,
            [Symbol(mongoose:default)]: true
          },
          _pluralize: [Function: pluralize],
          Schema: [Function: Schema] {
            reserved: [Object: null prototype],
            Types: [Object],
            ObjectId: [Function]
          },
          model: [Function (anonymous)],
          plugins: [ [Array], [Array], [Array], [Array], [Array] ],
          default: [Circular *1],
          mongoose: [Circular *1],
          cast: [Function: cast],
          STATES: [Object: null prototype] {
            '0': 'disconnected',
            '1': 'connected',
            '2': 'connecting',
            '3': 'disconnecting',
            '99': 'uninitialized',
            disconnected: 0,
            connected: 1,
            connecting: 2,
            disconnecting: 3,
            uninitialized: 99
          },
          setDriver: [Function: setDriver],
          set: [Function (anonymous)],
          get: [Function (anonymous)],
          createConnection: [Function (anonymous)],
          connect: [AsyncFunction: connect],
          disconnect: [AsyncFunction: disconnect],
          startSession: [Function (anonymous)],
          pluralize: [Function (anonymous)],
          deleteModel: [Function (anonymous)],
          modelNames: [Function (anonymous)],
          plugin: [Function (anonymous)],
          version: '7.5.0',
          Mongoose: [Function: Mongoose],
          SchemaType: [Function: SchemaType] {
            cast: [Function: cast],
            set: [Function: set],
            get: [Function (anonymous)],
            _isRef: [Function (anonymous)],
            checkRequired: [Function (anonymous)],
            CastError: [class CastError extends MongooseError],
            ValidatorError: [class ValidatorError extends MongooseError]
          },
          SchemaTypes: {
            Array: [Function],
            Boolean: [Function],
            BigInt: [Function],
            Buffer: [Function],
            Date: [Function],
            Decimal: [Function],
            Decimal128: [Function],
            DocumentArray: [Function],
            Map: [Function],
            Mixed: [Function],
            Number: [Function],
            ObjectId: [Function],
            String: [Function],
            Subdocument: [Function],
            UUID: [Function],
            Oid: [Function],
            Object: [Function],
            Bool: [Function],
            ObjectID: [Function]
          },
          VirtualType: [Function: VirtualType],
          Types: {
            Array: [Function: MongooseArray],
            Buffer: [Function],
            Embedded: [Function],
            Document: [Function],
            DocumentArray: [Function: MongooseDocumentArray],
            Decimal128: [class Decimal128 extends BSONValue],
            ObjectId: [Function],
            Map: [class MongooseMap extends Map],
            Subdocument: [Function: Subdocument],
            UUID: [Function]
          },
          Query: [Function: Query] { base: [Object], 'use$geoWithin': true },
          Model: [Function: Model] {
            exists: [Function: exists],
            discriminator: [Function (anonymous)],
            _events: undefined,
            _eventsCount: 0,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            createCollection: [AsyncFunction: createCollection],
            syncIndexes: [AsyncFunction: syncIndexes],
            diffIndexes: [AsyncFunction: diffIndexes],
            cleanIndexes: [AsyncFunction: cleanIndexes],
            listIndexes: [AsyncFunction: listIndexes],
            ensureIndexes: [AsyncFunction: ensureIndexes],
            createIndexes: [AsyncFunction: createIndexes],
            translateAliases: [Function: translateAliases],
            deleteOne: [Function: deleteOne],
            deleteMany: [Function: deleteMany],
            find: [Function: find],
            findById: [Function: findById],
            findOne: [Function: findOne],
            estimatedDocumentCount: [Function: estimatedDocumentCount],
            countDocuments: [Function: countDocuments],
            count: [Function: count],
            distinct: [Function: distinct],
            where: [Function: where],
            '$where': [Function: $where],
            findOneAndUpdate: [Function (anonymous)],
            findByIdAndUpdate: [Function (anonymous)],
            findOneAndDelete: [Function (anonymous)],
            findByIdAndDelete: [Function (anonymous)],
            findOneAndReplace: [Function (anonymous)],
            findOneAndRemove: [Function (anonymous)],
            findByIdAndRemove: [Function (anonymous)],
            create: [AsyncFunction: create],
            watch: [Function (anonymous)],
            startSession: [Function (anonymous)],
            insertMany: [AsyncFunction: insertMany],
            '$__insertMany': [Function (anonymous)],
            bulkWrite: [AsyncFunction: bulkWrite],
            bulkSave: [AsyncFunction (anonymous)],
            applyDefaults: [Function: applyDefaults],
            castObject: [Function: castObject],
            buildBulkWriteOperations: [Function: buildBulkWriteOperations],
            hydrate: [Function (anonymous)],
            updateMany: [Function: updateMany],
            updateOne: [Function: updateOne],
            replaceOne: [Function: replaceOne],
            aggregate: [Function: aggregate],
            validate: [AsyncFunction: validate],
            populate: [AsyncFunction: populate],
            compile: [Function: compile],
            __subclass: [Function: subclass],
            inspect: [Function (anonymous)],
            [Symbol(nodejs.util.inspect.custom)]: [Function (anonymous)]
          },
          Document: [Function: Document] {
            _events: undefined,
            _eventsCount: 0,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            ValidationError: [class ValidationError extends MongooseError]
          },
          ObjectId: [Function: ObjectId] {
            schemaName: 'ObjectId',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _checkRequired: [Function (anonymous)],
            _cast: [Function: castObjectId],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          isValidObjectId: [Function (anonymous)],
          isObjectIdOrHexString: [Function (anonymous)],
          syncIndexes: [Function (anonymous)],
          Decimal128: [Function: Decimal128] {
            schemaName: 'Decimal128',
            defaultOptions: {},
            _cast: [Function: castDecimal128],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Mixed: [Function: Mixed] {
            schemaName: 'Mixed',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: []
          },
          Date: [Function: SchemaDate] {
            schemaName: 'Date',
            defaultOptions: {},
            _cast: [Function: castDate],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Number: [Function: SchemaNumber] {
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _cast: [Function: castNumber],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            schemaName: 'Number',
            defaultOptions: {},
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Error: [class MongooseError extends Error] {
            messages: [Object],
            Messages: [Object],
            DocumentNotFoundError: [class DocumentNotFoundError extends MongooseError],
            CastError: [class CastError extends MongooseError],
            ValidationError: [class ValidationError extends MongooseError],
            ValidatorError: [class ValidatorError extends MongooseError],
            VersionError: [class VersionError extends MongooseError],
            ParallelSaveError: [class ParallelSaveError extends MongooseError],
            OverwriteModelError: [class OverwriteModelError extends MongooseError],
            MissingSchemaError: [class MissingSchemaError extends MongooseError],
            MongooseServerSelectionError: [class MongooseServerSelectionError extends MongooseError],
            DivergentArrayError: [class DivergentArrayError extends MongooseError],
            StrictModeError: [class StrictModeError extends MongooseError],
            StrictPopulateError: [class StrictPopulateError extends MongooseError]
          },
          MongooseError: [class MongooseError extends Error] {
            messages: [Object],
            Messages: [Object],
            DocumentNotFoundError: [class DocumentNotFoundError extends MongooseError],
            CastError: [class CastError extends MongooseError],
            ValidationError: [class ValidationError extends MongooseError],
            ValidatorError: [class ValidatorError extends MongooseError],
            VersionError: [class VersionError extends MongooseError],
            ParallelSaveError: [class ParallelSaveError extends MongooseError],
            OverwriteModelError: [class OverwriteModelError extends MongooseError],
            MissingSchemaError: [class MissingSchemaError extends MongooseError],
            MongooseServerSelectionError: [class MongooseServerSelectionError extends MongooseError],
            DivergentArrayError: [class DivergentArrayError extends MongooseError],
            StrictModeError: [class StrictModeError extends MongooseError],
            StrictPopulateError: [class StrictPopulateError extends MongooseError]
          },
          now: [Function: now],
          CastError: [class CastError extends MongooseError],
          SchemaTypeOptions: [class SchemaTypeOptions],
          mongo: {
            BSON: [Getter],
            Binary: [Getter],
            BSONRegExp: [Getter],
            BSONSymbol: [Getter],
            BSONType: [Getter],
            Code: [Getter],
            DBRef: [Getter],
            Decimal128: [Getter],
            Double: [Getter],
            Int32: [Getter],
            Long: [Getter],
            MaxKey: [Getter],
            MinKey: [Getter],
            ObjectId: [Getter],
            Timestamp: [Getter],
            MongoBulkWriteError: [Getter],
            ChangeStreamCursor: [Getter],
            MongoAPIError: [Getter],
            MongoAWSError: [Getter],
            MongoAzureError: [Getter],
            MongoBatchReExecutionError: [Getter],
            MongoChangeStreamError: [Getter],
            MongoCompatibilityError: [Getter],
            MongoCursorExhaustedError: [Getter],
            MongoCursorInUseError: [Getter],
            MongoDecompressionError: [Getter],
            MongoDriverError: [Getter],
            MongoError: [Getter],
            MongoExpiredSessionError: [Getter],
            MongoGridFSChunkError: [Getter],
            MongoGridFSStreamError: [Getter],
            MongoInvalidArgumentError: [Getter],
            MongoKerberosError: [Getter],
            MongoMissingCredentialsError: [Getter],
            MongoMissingDependencyError: [Getter],
            MongoNetworkError: [Getter],
            MongoNetworkTimeoutError: [Getter],
            MongoNotConnectedError: [Getter],
            MongoParseError: [Getter],
            MongoRuntimeError: [Getter],
            MongoServerClosedError: [Getter],
            MongoServerError: [Getter],
            MongoServerSelectionError: [Getter],
            MongoSystemError: [Getter],
            MongoTailableCursorError: [Getter],
            MongoTopologyClosedError: [Getter],
            MongoTransactionError: [Getter],
            MongoUnexpectedServerResponseError: [Getter],
            MongoWriteConcernError: [Getter],
            AbstractCursor: [Getter],
            Admin: [Getter],
            AggregationCursor: [Getter],
            CancellationToken: [Getter],
            ChangeStream: [Getter],
            ClientSession: [Getter],
            Collection: [Getter],
            Db: [Getter],
            FindCursor: [Getter],
            GridFSBucket: [Getter],
            GridFSBucketReadStream: [Getter],
            GridFSBucketWriteStream: [Getter],
            ListCollectionsCursor: [Getter],
            ListIndexesCursor: [Getter],
            MongoClient: [Getter],
            OrderedBulkOperation: [Getter],
            UnorderedBulkOperation: [Getter],
            BatchType: [Getter],
            GSSAPICanonicalizationValue: [Getter],
            AuthMechanism: [Getter],
            Compressor: [Getter],
            CURSOR_FLAGS: [Getter],
            AutoEncryptionLoggerLevel: [Getter],
            MongoErrorLabel: [Getter],
            ExplainVerbosity: [Getter],
            ServerApiVersion: [Getter],
            ReturnDocument: [Getter],
            ProfilingLevel: [Getter],
            ReadConcernLevel: [Getter],
            ReadPreferenceMode: [Getter],
            ServerType: [Getter],
            TopologyType: [Getter],
            ReadConcern: [Getter],
            ReadPreference: [Getter],
            WriteConcern: [Getter],
            CommandFailedEvent: [Getter],
            CommandStartedEvent: [Getter],
            CommandSucceededEvent: [Getter],
            ConnectionCheckedInEvent: [Getter],
            ConnectionCheckedOutEvent: [Getter],
            ConnectionCheckOutFailedEvent: [Getter],
            ConnectionCheckOutStartedEvent: [Getter],
            ConnectionClosedEvent: [Getter],
            ConnectionCreatedEvent: [Getter],
            ConnectionPoolClearedEvent: [Getter],
            ConnectionPoolClosedEvent: [Getter],
            ConnectionPoolCreatedEvent: [Getter],
            ConnectionPoolMonitoringEvent: [Getter],
            ConnectionPoolReadyEvent: [Getter],
            ConnectionReadyEvent: [Getter],
            ServerClosedEvent: [Getter],
            ServerDescriptionChangedEvent: [Getter],
            ServerHeartbeatFailedEvent: [Getter],
            ServerHeartbeatStartedEvent: [Getter],
            ServerHeartbeatSucceededEvent: [Getter],
            ServerOpeningEvent: [Getter],
            TopologyClosedEvent: [Getter],
            TopologyDescriptionChangedEvent: [Getter],
            TopologyOpeningEvent: [Getter],
            SrvPollingEvent: [Getter]
          },
          mquery: [Function: Query] {
            permissions: [Object],
            _isPermitted: [Function (anonymous)],
            canMerge: [Function (anonymous)],
            setGlobalTraceFunction: [Function (anonymous)],
            utils: [Object],
            env: [Object],
            Collection: [class NodeCollection extends Collection],
            BaseCollection: [Function]
          },
          sanitizeFilter: [Function: sanitizeFilter],
          trusted: [Function: trusted],
          skipMiddlewareFunction: [Function: skipWrappedFunction],
          overwriteMiddlewareResult: [Function: overwriteResult]
        },
        collections: {
          flights: [Circular *7],
          tickets: Collection {
            collection: [Collection],
            Promise: [Function: Promise],
            modelName: 'Ticket',
            _closed: false,
            opts: [Object],
            name: 'tickets',
            collectionName: 'tickets',
            conn: [Circular *3],
            queue: [],
            buffer: false,
            emitter: [EventEmitter]
          }
        },
        models: <ref *4> {
          Flight: [Circular *2],
          Ticket: [Function: model] {
            hooks: [Kareem],
            base: [Mongoose],
            modelName: 'Ticket',
            model: [Function: model],
            db: [Circular *3],
            discriminators: undefined,
            events: [EventEmitter],
            '$appliedMethods': true,
            '$appliedHooks': true,
            _middleware: [Kareem],
            '$__insertMany': [Function (anonymous)],
            schema: [Schema],
            collection: [Collection],
            '$__collection': [Collection],
            Query: [Function],
            '$init': [Promise],
            '$caught': true,
            [Symbol(mongoose#Model)]: true
          }
        },
        config: {},
        replica: false,
        options: null,
        otherDbs: [],
        relatedDbs: {},
        states: [Object: null prototype] {
          '0': 'disconnected',
          '1': 'connected',
          '2': 'connecting',
          '3': 'disconnecting',
          '99': 'uninitialized',
          disconnected: 0,
          connected: 1,
          connecting: 2,
          disconnecting: 3,
          uninitialized: 99
        },
        _readyState: 1,
        _closeCalled: undefined,
        _hasOpened: true,
        plugins: [],
        id: 0,
        _queue: [],
        _listening: false,
        _connectionOptions: { driverInfo: { name: 'Mongoose', version: '7.5.0' } },
        _connectionString: 'mongodb+srv://rjwyse27:Rockwell1@cluster0.udxjpgm.mongodb.net/mongoose-flights?retryWrites=true&w=majority',
        client: <ref *5> MongoClient {
          _events: [Object: null prototype] {
            topologyDescriptionChanged: [Function (anonymous)]
          },
          _eventsCount: 1,
          _maxListeners: 0,
          mongoLogger: MongoLogger {
            error: [Function: bound log],
            warn: [Function: bound log],
            info: [Function: bound log],
            debug: [Function: bound log],
            trace: [Function: bound log],
            componentSeverities: [Object],
            maxDocumentLength: 1000,
            logDestination: [Object]
          },
          s: {
            url: 'mongodb+srv://rjwyse27:Rockwell1@cluster0.udxjpgm.mongodb.net/mongoose-flights?retryWrites=true&w=majority',
            bsonOptions: [Object],
            namespace: [MongoDBNamespace],
            hasBeenClosed: false,
            sessionPool: [ServerSessionPool],
            activeSessions: Set(0) {},
            options: [Getter],
            readConcern: [Getter],
            writeConcern: [Getter],
            readPreference: [Getter],
            isMongoClient: [Getter]
          },
          connectionLock: undefined,
          topology: Topology {
            _events: [Object: null prototype],
            _eventsCount: 26,
            _maxListeners: undefined,
            client: [Circular *5],
            selectServerAsync: [Function (anonymous)],
            s: [Object],
            [Symbol(kCapture)]: false,
            [Symbol(waitQueue)]: [List]
          },
          [Symbol(kCapture)]: false,
          [Symbol(options)]: [Object: null prototype] {
            hosts: [Array],
            credentials: [MongoCredentials],
            compressors: [Array],
            connectTimeoutMS: 30000,
            dbName: 'mongoose-flights',
            directConnection: false,
            driverInfo: [Object],
            enableUtf8Validation: true,
            forceServerObjectId: false,
            heartbeatFrequencyMS: 10000,
            keepAlive: true,
            keepAliveInitialDelay: 120000,
            loadBalanced: false,
            localThresholdMS: 15,
            maxConnecting: 2,
            maxIdleTimeMS: 0,
            maxPoolSize: 100,
            minPoolSize: 0,
            minHeartbeatFrequencyMS: 500,
            monitorCommands: false,
            noDelay: true,
            pkFactory: [Object],
            raw: false,
            readPreference: [ReadPreference],
            retryReads: true,
            retryWrites: true,
            serverSelectionTimeoutMS: 30000,
            socketTimeoutMS: 0,
            srvMaxHosts: 0,
            srvServiceName: 'mongodb',
            writeConcern: [WriteConcern],
            waitQueueTimeoutMS: 0,
            zlibCompressionLevel: 0,
            userSpecifiedAuthSource: false,
            userSpecifiedReplicaSet: false,
            srvHost: 'cluster0.udxjpgm.mongodb.net',
            tls: true,
            mongoLoggerOptions: [Object],
            metadata: [Object],
            replicaSet: 'atlas-kc5ppa-shard-0',
            [Symbol(@@mdb.enableMongoLogger)]: false
          }
        },
        '$initialConnection': Promise { [Circular *3] },
        _events: [Object: null prototype] { connected: [Function (anonymous)] },
        _eventsCount: 1,
        db: Db {
          s: {
            options: [Object],
            readPreference: [ReadPreference],
            bsonOptions: [Object],
            pkFactory: [Object],
            readConcern: undefined,
            writeConcern: [WriteConcern],
            namespace: [MongoDBNamespace]
          },
          client: <ref *5> MongoClient {
            _events: [Object: null prototype],
            _eventsCount: 1,
            _maxListeners: 0,
            mongoLogger: [MongoLogger],
            s: [Object],
            connectionLock: undefined,
            topology: [Topology],
            [Symbol(kCapture)]: false,
            [Symbol(options)]: [Object: null prototype]
          }
        },
        host: 'ac-sjskon9-shard-00-01.udxjpgm.mongodb.net',
        port: 27017,
        name: 'mongoose-flights'
      },
      queue: [],
      buffer: false,
      emitter: EventEmitter {
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        [Symbol(kCapture)]: false
      }
    },
    Query: [Function (anonymous)] {
      base: {
        toConstructor: [Function: toConstructor],
        setOptions: [Function (anonymous)],
        collection: [Function: collection],
        collation: [Function (anonymous)],
        '$where': [Function (anonymous)],
        where: [Function (anonymous)],
        equals: [Function: equals],
        eq: [Function: eq],
        or: [Function: or],
        nor: [Function: nor],
        and: [Function: and],
        gt: [Function (anonymous)],
        gte: [Function (anonymous)],
        lt: [Function (anonymous)],
        lte: [Function (anonymous)],
        ne: [Function (anonymous)],
        in: [Function (anonymous)],
        nin: [Function (anonymous)],
        all: [Function (anonymous)],
        regex: [Function (anonymous)],
        size: [Function (anonymous)],
        maxDistance: [Function (anonymous)],
        minDistance: [Function (anonymous)],
        mod: [Function (anonymous)],
        exists: [Function (anonymous)],
        elemMatch: [Function (anonymous)],
        within: [Function: within],
        box: [Function (anonymous)],
        polygon: [Function (anonymous)],
        circle: [Function (anonymous)],
        near: [Function: near],
        intersects: [Function: intersects],
        geometry: [Function: geometry],
        select: [Function: select],
        slice: [Function (anonymous)],
        sort: [Function (anonymous)],
        limit: [Function (anonymous)],
        skip: [Function (anonymous)],
        batchSize: [Function (anonymous)],
        comment: [Function (anonymous)],
        maxTimeMS: [Function (anonymous)],
        maxTime: [Function (anonymous)],
        hint: [Function (anonymous)],
        j: [Function: j],
        slaveOk: [Function (anonymous)],
        setReadPreference: [Function (anonymous)],
        read: [Function (anonymous)],
        r: [Function (anonymous)],
        readConcern: [Function (anonymous)],
        tailable: [Function (anonymous)],
        w: [Function: writeConcern],
        writeConcern: [Function: writeConcern],
        wTimeout: [Function: wtimeout],
        wtimeout: [Function: wtimeout],
        merge: [Function (anonymous)],
        find: [Function (anonymous)],
        _find: [AsyncFunction: _find],
        cursor: [Function (anonymous)],
        findOne: [Function (anonymous)],
        _findOne: [AsyncFunction: _findOne],
        count: [Function (anonymous)],
        _count: [AsyncFunction: _count],
        distinct: [Function (anonymous)],
        _distinct: [AsyncFunction: _distinct],
        updateMany: [Function: updateMany],
        _updateMany: [AsyncFunction (anonymous)],
        updateOne: [Function: updateOne],
        _updateOne: [AsyncFunction (anonymous)],
        replaceOne: [Function: replaceOne],
        _replaceOne: [AsyncFunction (anonymous)],
        deleteOne: [Function (anonymous)],
        _deleteOne: [AsyncFunction (anonymous)],
        deleteMany: [Function (anonymous)],
        _deleteMany: [AsyncFunction (anonymous)],
        findOneAndUpdate: [Function (anonymous)],
        _findOneAndUpdate: [AsyncFunction (anonymous)],
        findOneAndDelete: [Function (anonymous)],
        findOneAndRemove: [Function (anonymous)],
        _findOneAndRemove: [AsyncFunction (anonymous)],
        setTraceFunction: [Function (anonymous)],
        exec: [AsyncFunction: exec],
        then: [AsyncFunction (anonymous)],
        selected: [Function: selected],
        selectedInclusively: [Function: selectedInclusively],
        selectedExclusively: [Function: selectedExclusively],
        _mergeUpdate: [Function (anonymous)],
        _optionsForExec: [Function (anonymous)],
        _fieldsForExec: [Function (anonymous)],
        _updateForExec: [Function (anonymous)],
        _ensurePath: [Function (anonymous)],
        _validate: [Function (anonymous)]
      }
    },
    '$init': Promise { undefined, catch: [Function (anonymous)] },
    '$caught': true,
    [Symbol(mongoose#Model)]: true
  }
}

Node.js v20.5.0
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting child process[39m
[32m[nodemon] starting `node ./bin/www`[39m
[32m[nodemon] restarting child process[39m
[32m[nodemon] starting `node ./bin/www`[39m
Connected to MongoDB mongoose-flights at ac-sjskon9-shard-00-01.udxjpgm.mongodb.net:27017
[0mGET / [36m302 [0m6.515 ms - 60[0m
{ id: 'flights' }
/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/schema/objectid.js:250
    throw new CastError('ObjectId', value, this.path, error, this);
          ^

CastError: Cast to ObjectId failed for value "flights" (type string) at path "_id" for model "Flight"
    at ObjectId.cast (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/schema/objectid.js:250:11)
    at SchemaType.applySetters (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/schematype.js:1220:12)
    at SchemaType.castForQuery (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/schematype.js:1632:15)
    at cast (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/cast.js:356:32)
    at Query.cast (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/query.js:4910:12)
    at Query._castConditions (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/query.js:2232:10)
    at model.Query._findOne (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/query.js:2519:8)
    at model.Query.exec (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/query.js:4429:28)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async show (/Users/robwyse/code/mongoose-flights/controllers/flights.js:39:18) {
  stringValue: '"flights"',
  messageFormat: undefined,
  kind: 'ObjectId',
  value: 'flights',
  path: '_id',
  reason: BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer
      at new ObjectId (/Users/robwyse/code/mongoose-flights/node_modules/bson/lib/bson.cjs:2006:23)
      at castObjectId (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/cast/objectid.js:25:12)
      at ObjectId.cast (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/schema/objectid.js:248:12)
      at SchemaType.applySetters (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/schematype.js:1220:12)
      at SchemaType.castForQuery (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/schematype.js:1632:15)
      at cast (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/cast.js:356:32)
      at Query.cast (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/query.js:4910:12)
      at Query._castConditions (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/query.js:2232:10)
      at model.Query._findOne (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/query.js:2519:8)
      at model.Query.exec (/Users/robwyse/code/mongoose-flights/node_modules/mongoose/lib/query.js:4429:28),
  valueType: 'string',
  model: <ref *2> [Function: model] {
    hooks: Kareem {
      _pres: Map(9) {
        'save' => [
          { fn: [Function: validateBeforeSave], isAsync: false },
          { fn: [Function: saveSubdocsPreSave], isAsync: false },
          { fn: [Function: timestampsPreSave], isAsync: false },
          { fn: [Function: shardingPluginPreSave], isAsync: false },
          { fn: [Function: trackTransactionPreSave], isAsync: false },
          numAsync: undefined
        ],
        'findOneAndReplace' => [
          {
            query: true,
            model: false,
            fn: [Function],
            isAsync: undefined
          },
          numAsync: undefined
        ],
        'findOneAndUpdate' => [
          {
            query: true,
            model: false,
            fn: [Function],
            isAsync: undefined
          },
          numAsync: undefined
        ],
        'replaceOne' => [
          {
            query: true,
            model: false,
            fn: [Function],
            isAsync: undefined
          },
          numAsync: undefined
        ],
        'update' => [
          {
            query: true,
            model: false,
            fn: [Function],
            isAsync: undefined
          },
          numAsync: undefined
        ],
        'updateOne' => [
          {
            query: true,
            model: false,
            fn: [Function],
            isAsync: undefined
          },
          numAsync: undefined
        ],
        'updateMany' => [
          {
            query: true,
            model: false,
            fn: [Function],
            isAsync: undefined
          },
          numAsync: undefined
        ],
        'deleteOne' => [
          {
            document: true,
            query: false,
            fn: [Function: removeSubDocsPreRemove],
            isAsync: undefined
          },
          numAsync: undefined
        ],
        'remove' => [
          { fn: [Function: shardingPluginPreRemove], isAsync: false },
          numAsync: undefined
        ]
      },
      _posts: Map(2) {
        'save' => [
          { fn: [Function: saveSubdocsPostSave] },
          { fn: [Function: shardingPluginPostSave] }
        ],
        'init' => [ { fn: [Function: shardingPluginPostInit] } ]
      }
    },
    base: <ref *1> Mongoose {
      connections: [
        <ref *3> NativeConnection {
          base: [Circular *1],
          collections: { flights: [Collection], tickets: [Collection] },
          models: { Flight: [Circular *2], Ticket: [Function] },
          config: {},
          replica: false,
          options: null,
          otherDbs: [],
          relatedDbs: {},
          states: [Object: null prototype] {
            '0': 'disconnected',
            '1': 'connected',
            '2': 'connecting',
            '3': 'disconnecting',
            '99': 'uninitialized',
            disconnected: 0,
            connected: 1,
            connecting: 2,
            disconnecting: 3,
            uninitialized: 99
          },
          _readyState: 1,
          _closeCalled: undefined,
          _hasOpened: true,
          plugins: [],
          id: 0,
          _queue: [],
          _listening: false,
          _connectionOptions: { driverInfo: [Object] },
          _connectionString: 'mongodb+srv://rjwyse27:Rockwell1@cluster0.udxjpgm.mongodb.net/mongoose-flights?retryWrites=true&w=majority',
          client: MongoClient {
            _events: [Object: null prototype],
            _eventsCount: 1,
            _maxListeners: 0,
            mongoLogger: [MongoLogger],
            s: [Object],
            connectionLock: undefined,
            topology: [Topology],
            [Symbol(kCapture)]: false,
            [Symbol(options)]: [Object: null prototype]
          },
          '$initialConnection': Promise { [Circular *3] },
          _events: [Object: null prototype] {
            connected: [Function (anonymous)]
          },
          _eventsCount: 1,
          db: Db { s: [Object], client: [MongoClient] },
          host: 'ac-sjskon9-shard-00-01.udxjpgm.mongodb.net',
          port: 27017,
          name: 'mongoose-flights'
        }
      ],
      nextConnectionId: 1,
      models: <ref *4> {
        Flight: [Circular *2],
        Ticket: [Function: model] {
          hooks: Kareem { _pres: [Map], _posts: [Map] },
          base: [Circular *1],
          modelName: 'Ticket',
          model: [Function: model],
          db: <ref *3> NativeConnection {
            base: [Circular *1],
            collections: [Object],
            models: [Circular *4],
            config: {},
            replica: false,
            options: null,
            otherDbs: [],
            relatedDbs: {},
            states: [Object: null prototype],
            _readyState: 1,
            _closeCalled: undefined,
            _hasOpened: true,
            plugins: [],
            id: 0,
            _queue: [],
            _listening: false,
            _connectionOptions: [Object],
            _connectionString: 'mongodb+srv://rjwyse27:Rockwell1@cluster0.udxjpgm.mongodb.net/mongoose-flights?retryWrites=true&w=majority',
            client: [MongoClient],
            '$initialConnection': [Promise],
            _events: [Object: null prototype],
            _eventsCount: 1,
            db: [Db],
            host: 'ac-sjskon9-shard-00-01.udxjpgm.mongodb.net',
            port: 27017,
            name: 'mongoose-flights'
          },
          discriminators: undefined,
          events: EventEmitter {
            _events: [Object: null prototype] {},
            _eventsCount: 0,
            _maxListeners: undefined,
            [Symbol(kCapture)]: false
          },
          '$appliedMethods': true,
          '$appliedHooks': true,
          _middleware: Kareem { _pres: [Map], _posts: [Map] },
          '$__insertMany': [Function (anonymous)],
          schema: Schema {
            obj: [Object],
            paths: [Object],
            aliases: {},
            subpaths: {},
            virtuals: [Object],
            singleNestedPaths: {},
            nested: {},
            inherits: {},
            callQueue: [],
            _indexes: [],
            methods: {},
            methodOptions: {},
            statics: {},
            tree: [Object],
            query: {},
            childSchemas: [],
            plugins: [Array],
            '$id': 3,
            mapPaths: [],
            s: [Object],
            _userProvidedOptions: {},
            options: [Object],
            '$globalPluginsApplied': true
          },
          collection: Collection {
            collection: [Collection],
            Promise: [Function: Promise],
            modelName: 'Ticket',
            _closed: false,
            opts: [Object],
            name: 'tickets',
            collectionName: 'tickets',
            conn: [NativeConnection],
            queue: [],
            buffer: false,
            emitter: [EventEmitter]
          },
          '$__collection': Collection {
            collection: [Collection],
            Promise: [Function: Promise],
            modelName: 'Ticket',
            _closed: false,
            opts: [Object],
            name: 'tickets',
            collectionName: 'tickets',
            conn: [NativeConnection],
            queue: [],
            buffer: false,
            emitter: [EventEmitter]
          },
          Query: [Function (anonymous)] { base: [Object] },
          '$init': Promise { undefined, catch: [Function (anonymous)] },
          '$caught': true,
          [Symbol(mongoose#Model)]: true
        }
      },
      events: EventEmitter {
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        [Symbol(kCapture)]: false
      },
      __driver: {
        Collection: [Function: NativeCollection],
        Connection: [Function: NativeConnection] {
          STATES: [Object: null prototype] {
            '0': 'disconnected',
            '1': 'connected',
            '2': 'connecting',
            '3': 'disconnecting',
            '99': 'uninitialized',
            disconnected: 0,
            connected: 1,
            connecting: 2,
            disconnecting: 3,
            uninitialized: 99
          }
        }
      },
      options: {
        pluralization: true,
        autoIndex: true,
        autoCreate: true,
        [Symbol(mongoose:default)]: true
      },
      _pluralize: [Function: pluralize],
      Schema: [Function: Schema] {
        reserved: [Object: null prototype] {
          validate: 1,
          toObject: 1,
          save: 1,
          remove: 1,
          populated: 1,
          isNew: 1,
          isModified: 1,
          init: 1,
          get: 1,
          errors: 1,
          collection: 1,
          removeListener: 1,
          listeners: 1,
          emit: 1,
          prototype: 1
        },
        Types: {
          Array: [Function: SchemaArray] {
            schemaName: 'Array',
            options: [Object],
            defaultOptions: {},
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Boolean: [Function: SchemaBoolean] {
            schemaName: 'Boolean',
            defaultOptions: {},
            _cast: [Function],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)],
            '$conditionalHandlers': [Object]
          },
          BigInt: [Function: SchemaBigInt] {
            schemaName: 'BigInt',
            defaultOptions: {},
            _cast: [Function: castBigInt],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)],
            '$conditionalHandlers': [Object]
          },
          Buffer: [Function: SchemaBuffer] {
            schemaName: 'Buffer',
            defaultOptions: {},
            _checkRequired: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Date: [Function: SchemaDate] {
            schemaName: 'Date',
            defaultOptions: {},
            _cast: [Function: castDate],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Decimal: [Function: Decimal128] {
            schemaName: 'Decimal128',
            defaultOptions: {},
            _cast: [Function: castDecimal128],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Decimal128: [Function: Decimal128] {
            schemaName: 'Decimal128',
            defaultOptions: {},
            _cast: [Function: castDecimal128],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          DocumentArray: [Function: DocumentArrayPath] {
            schemaName: 'DocumentArray',
            options: [Object],
            defaultOptions: {},
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)]
          },
          Map: [class Map extends SchemaType] {
            schemaName: 'Map',
            defaultOptions: {}
          },
          Mixed: [Function: Mixed] {
            schemaName: 'Mixed',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: []
          },
          Number: [Function: SchemaNumber] {
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _cast: [Function: castNumber],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            schemaName: 'Number',
            defaultOptions: {},
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          ObjectId: [Function: ObjectId] {
            schemaName: 'ObjectId',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _checkRequired: [Function (anonymous)],
            _cast: [Function: castObjectId],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          String: [Function: SchemaString] {
            schemaName: 'String',
            defaultOptions: {},
            _cast: [Function: castString],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Subdocument: [Function: SubdocumentPath] {
            defaultOptions: {},
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)]
          },
          UUID: [Function: SchemaUUID] {
            schemaName: 'UUID',
            defaultOptions: {},
            _cast: [Function (anonymous)],
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            cast: [Function: cast],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Oid: [Function: ObjectId] {
            schemaName: 'ObjectId',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _checkRequired: [Function (anonymous)],
            _cast: [Function: castObjectId],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Object: [Function: Mixed] {
            schemaName: 'Mixed',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: []
          },
          Bool: [Function: SchemaBoolean] {
            schemaName: 'Boolean',
            defaultOptions: {},
            _cast: [Function],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)],
            '$conditionalHandlers': [Object]
          },
          ObjectID: [Function: ObjectId] {
            schemaName: 'ObjectId',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _checkRequired: [Function (anonymous)],
            _cast: [Function: castObjectId],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          }
        },
        ObjectId: [Function: ObjectId] {
          schemaName: 'ObjectId',
          defaultOptions: {},
          get: [Function (anonymous)],
          set: [Function: set],
          setters: [],
          _checkRequired: [Function (anonymous)],
          _cast: [Function: castObjectId],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        }
      },
      model: [Function (anonymous)],
      plugins: [
        [ [Function: removeSubdocs], { deduplicate: true } ],
        [ [Function: saveSubdocs], { deduplicate: true } ],
        [
          [Function: shardingPlugin] {
            storeShard: [Function: storeShard]
          },
          { deduplicate: true }
        ],
        [ [Function: trackTransaction], { deduplicate: true } ],
        [ [Function: validateBeforeSave], { deduplicate: true } ]
      ],
      default: [Circular *1],
      mongoose: [Circular *1],
      cast: [Function: cast],
      STATES: [Object: null prototype] {
        '0': 'disconnected',
        '1': 'connected',
        '2': 'connecting',
        '3': 'disconnecting',
        '99': 'uninitialized',
        disconnected: 0,
        connected: 1,
        connecting: 2,
        disconnecting: 3,
        uninitialized: 99
      },
      setDriver: [Function: setDriver],
      set: [Function (anonymous)],
      get: [Function (anonymous)],
      createConnection: [Function (anonymous)],
      connect: [AsyncFunction: connect],
      disconnect: [AsyncFunction: disconnect],
      startSession: [Function (anonymous)],
      pluralize: [Function (anonymous)],
      deleteModel: [Function (anonymous)],
      modelNames: [Function (anonymous)],
      plugin: [Function (anonymous)],
      version: '7.5.0',
      Mongoose: [Function: Mongoose],
      SchemaType: [Function: SchemaType] {
        cast: [Function: cast],
        set: [Function: set],
        get: [Function (anonymous)],
        _isRef: [Function (anonymous)],
        checkRequired: [Function (anonymous)],
        CastError: [class CastError extends MongooseError],
        ValidatorError: [class ValidatorError extends MongooseError]
      },
      SchemaTypes: {
        Array: [Function: SchemaArray] {
          schemaName: 'Array',
          options: { castNonArrays: true },
          defaultOptions: {},
          set: [Function: set],
          setters: [],
          get: [Function (anonymous)],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Boolean: [Function: SchemaBoolean] {
          schemaName: 'Boolean',
          defaultOptions: {},
          _cast: [Function: castBoolean] {
            convertToTrue: [Set],
            convertToFalse: [Set]
          },
          set: [Function: set],
          setters: [],
          get: [Function (anonymous)],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)],
          '$conditionalHandlers': {
            '$type': [Function (anonymous)],
            '$exists': [Function (anonymous)],
            '$nin': [Function: handle$in],
            '$ne': [Function: handleSingle],
            '$in': [Function: handle$in],
            '$eq': [Function: handleSingle],
            '$all': [Function: handleArray]
          }
        },
        BigInt: [Function: SchemaBigInt] {
          schemaName: 'BigInt',
          defaultOptions: {},
          _cast: [Function: castBigInt],
          set: [Function: set],
          setters: [],
          get: [Function (anonymous)],
          cast: [Function: cast],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)],
          '$conditionalHandlers': {
            '$gt': [Function: handleSingle],
            '$gte': [Function: handleSingle],
            '$lt': [Function: handleSingle],
            '$lte': [Function: handleSingle],
            '$type': [Function (anonymous)],
            '$exists': [Function (anonymous)],
            '$nin': [Function: handle$in],
            '$ne': [Function: handleSingle],
            '$in': [Function: handle$in],
            '$eq': [Function: handleSingle],
            '$all': [Function: handleArray]
          }
        },
        Buffer: [Function: SchemaBuffer] {
          schemaName: 'Buffer',
          defaultOptions: {},
          _checkRequired: [Function (anonymous)],
          set: [Function: set],
          setters: [],
          get: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Date: [Function: SchemaDate] {
          schemaName: 'Date',
          defaultOptions: {},
          _cast: [Function: castDate],
          set: [Function: set],
          setters: [],
          get: [Function (anonymous)],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Decimal: [Function: Decimal128] {
          schemaName: 'Decimal128',
          defaultOptions: {},
          _cast: [Function: castDecimal128],
          set: [Function: set],
          setters: [],
          get: [Function (anonymous)],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Decimal128: [Function: Decimal128] {
          schemaName: 'Decimal128',
          defaultOptions: {},
          _cast: [Function: castDecimal128],
          set: [Function: set],
          setters: [],
          get: [Function (anonymous)],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        DocumentArray: [Function: DocumentArrayPath] {
          schemaName: 'DocumentArray',
          options: { castNonArrays: true },
          defaultOptions: {},
          set: [Function: set],
          setters: [],
          get: [Function (anonymous)]
        },
        Map: [class Map extends SchemaType] {
          schemaName: 'Map',
          defaultOptions: {}
        },
        Mixed: [Function: Mixed] {
          schemaName: 'Mixed',
          defaultOptions: {},
          get: [Function (anonymous)],
          set: [Function: set],
          setters: []
        },
        Number: [Function: SchemaNumber] {
          get: [Function (anonymous)],
          set: [Function: set],
          setters: [],
          _cast: [Function: castNumber],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          schemaName: 'Number',
          defaultOptions: {},
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        ObjectId: [Function: ObjectId] {
          schemaName: 'ObjectId',
          defaultOptions: {},
          get: [Function (anonymous)],
          set: [Function: set],
          setters: [],
          _checkRequired: [Function (anonymous)],
          _cast: [Function: castObjectId],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        String: [Function: SchemaString] {
          schemaName: 'String',
          defaultOptions: {},
          _cast: [Function: castString],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          get: [Function (anonymous)],
          set: [Function: set],
          setters: [],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Subdocument: [Function: SubdocumentPath] {
          defaultOptions: {},
          set: [Function: set],
          setters: [],
          get: [Function (anonymous)]
        },
        UUID: [Function: SchemaUUID] {
          schemaName: 'UUID',
          defaultOptions: {},
          _cast: [Function (anonymous)],
          get: [Function (anonymous)],
          set: [Function: set],
          setters: [],
          cast: [Function: cast],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Oid: [Function: ObjectId] {
          schemaName: 'ObjectId',
          defaultOptions: {},
          get: [Function (anonymous)],
          set: [Function: set],
          setters: [],
          _checkRequired: [Function (anonymous)],
          _cast: [Function: castObjectId],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Object: [Function: Mixed] {
          schemaName: 'Mixed',
          defaultOptions: {},
          get: [Function (anonymous)],
          set: [Function: set],
          setters: []
        },
        Bool: [Function: SchemaBoolean] {
          schemaName: 'Boolean',
          defaultOptions: {},
          _cast: [Function: castBoolean] {
            convertToTrue: [Set],
            convertToFalse: [Set]
          },
          set: [Function: set],
          setters: [],
          get: [Function (anonymous)],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)],
          '$conditionalHandlers': {
            '$type': [Function (anonymous)],
            '$exists': [Function (anonymous)],
            '$nin': [Function: handle$in],
            '$ne': [Function: handleSingle],
            '$in': [Function: handle$in],
            '$eq': [Function: handleSingle],
            '$all': [Function: handleArray]
          }
        },
        ObjectID: [Function: ObjectId] {
          schemaName: 'ObjectId',
          defaultOptions: {},
          get: [Function (anonymous)],
          set: [Function: set],
          setters: [],
          _checkRequired: [Function (anonymous)],
          _cast: [Function: castObjectId],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        }
      },
      VirtualType: [Function: VirtualType],
      Types: {
        Array: [Function: MongooseArray],
        Buffer: [Function: MongooseBuffer] {
          pathSymbol: Symbol(mongoose#Buffer#_path),
          mixin: {
            _subtype: undefined,
            _markModified: [Function: _markModified],
            write: [Function: write],
            copy: [Function: copy],
            writeUInt8: [Function (anonymous)],
            writeInt8: [Function (anonymous)],
            fill: [Function (anonymous)],
            utf8Write: [Function (anonymous)],
            asciiWrite: [Function (anonymous)],
            set: [Function (anonymous)],
            writeUInt16LE: [Function (anonymous)],
            writeUInt16BE: [Function (anonymous)],
            writeUInt32LE: [Function (anonymous)],
            writeUInt32BE: [Function (anonymous)],
            writeInt16LE: [Function (anonymous)],
            writeInt16BE: [Function (anonymous)],
            writeInt32LE: [Function (anonymous)],
            writeInt32BE: [Function (anonymous)],
            writeFloatLE: [Function (anonymous)],
            writeFloatBE: [Function (anonymous)],
            writeDoubleLE: [Function (anonymous)],
            writeDoubleBE: [Function (anonymous)],
            toObject: [Function (anonymous)],
            '$toObject': [Function (anonymous)],
            toBSON: [Function (anonymous)],
            equals: [Function (anonymous)],
            subtype: [Function (anonymous)]
          },
          Binary: [class Binary extends BSONValue] {
            BSON_BINARY_SUBTYPE_DEFAULT: 0,
            BUFFER_SIZE: 256,
            SUBTYPE_DEFAULT: 0,
            SUBTYPE_FUNCTION: 1,
            SUBTYPE_BYTE_ARRAY: 2,
            SUBTYPE_UUID_OLD: 3,
            SUBTYPE_UUID: 4,
            SUBTYPE_MD5: 5,
            SUBTYPE_ENCRYPTED: 6,
            SUBTYPE_COLUMN: 7,
            SUBTYPE_USER_DEFINED: 128
          }
        },
        Embedded: [Function: ArraySubdocument] {
          _events: undefined,
          _eventsCount: 0,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames]
        },
        Document: [Function: ArraySubdocument] {
          _events: undefined,
          _eventsCount: 0,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames]
        },
        DocumentArray: [Function: MongooseDocumentArray],
        Decimal128: [class Decimal128 extends BSONValue],
        ObjectId: [class ObjectId extends BSONValue] { index: 9957603 },
        Map: [class MongooseMap extends Map],
        Subdocument: [Function: Subdocument],
        UUID: [class UUID extends Binary] { cacheHexString: false }
      },
      Query: [Function: Query] {
        base: {
          toConstructor: [Function: toConstructor],
          setOptions: [Function (anonymous)],
          collection: [Function: collection],
          collation: [Function (anonymous)],
          '$where': [Function (anonymous)],
          where: [Function (anonymous)],
          equals: [Function: equals],
          eq: [Function: eq],
          or: [Function: or],
          nor: [Function: nor],
          and: [Function: and],
          gt: [Function (anonymous)],
          gte: [Function (anonymous)],
          lt: [Function (anonymous)],
          lte: [Function (anonymous)],
          ne: [Function (anonymous)],
          in: [Function (anonymous)],
          nin: [Function (anonymous)],
          all: [Function (anonymous)],
          regex: [Function (anonymous)],
          size: [Function (anonymous)],
          maxDistance: [Function (anonymous)],
          minDistance: [Function (anonymous)],
          mod: [Function (anonymous)],
          exists: [Function (anonymous)],
          elemMatch: [Function (anonymous)],
          within: [Function: within],
          box: [Function (anonymous)],
          polygon: [Function (anonymous)],
          circle: [Function (anonymous)],
          near: [Function: near],
          intersects: [Function: intersects],
          geometry: [Function: geometry],
          select: [Function: select],
          slice: [Function (anonymous)],
          sort: [Function (anonymous)],
          limit: [Function (anonymous)],
          skip: [Function (anonymous)],
          batchSize: [Function (anonymous)],
          comment: [Function (anonymous)],
          maxTimeMS: [Function (anonymous)],
          maxTime: [Function (anonymous)],
          hint: [Function (anonymous)],
          j: [Function: j],
          slaveOk: [Function (anonymous)],
          setReadPreference: [Function (anonymous)],
          read: [Function (anonymous)],
          r: [Function (anonymous)],
          readConcern: [Function (anonymous)],
          tailable: [Function (anonymous)],
          w: [Function: writeConcern],
          writeConcern: [Function: writeConcern],
          wTimeout: [Function: wtimeout],
          wtimeout: [Function: wtimeout],
          merge: [Function (anonymous)],
          find: [Function (anonymous)],
          _find: [AsyncFunction: _find],
          cursor: [Function (anonymous)],
          findOne: [Function (anonymous)],
          _findOne: [AsyncFunction: _findOne],
          count: [Function (anonymous)],
          _count: [AsyncFunction: _count],
          distinct: [Function (anonymous)],
          _distinct: [AsyncFunction: _distinct],
          updateMany: [Function: updateMany],
          _updateMany: [AsyncFunction (anonymous)],
          updateOne: [Function: updateOne],
          _updateOne: [AsyncFunction (anonymous)],
          replaceOne: [Function: replaceOne],
          _replaceOne: [AsyncFunction (anonymous)],
          deleteOne: [Function (anonymous)],
          _deleteOne: [AsyncFunction (anonymous)],
          deleteMany: [Function (anonymous)],
          _deleteMany: [AsyncFunction (anonymous)],
          findOneAndUpdate: [Function (anonymous)],
          _findOneAndUpdate: [AsyncFunction (anonymous)],
          findOneAndDelete: [Function (anonymous)],
          findOneAndRemove: [Function (anonymous)],
          _findOneAndRemove: [AsyncFunction (anonymous)],
          setTraceFunction: [Function (anonymous)],
          exec: [AsyncFunction: exec],
          then: [AsyncFunction (anonymous)],
          selected: [Function: selected],
          selectedInclusively: [Function: selectedInclusively],
          selectedExclusively: [Function: selectedExclusively],
          _mergeUpdate: [Function (anonymous)],
          _optionsForExec: [Function (anonymous)],
          _fieldsForExec: [Function (anonymous)],
          _updateForExec: [Function (anonymous)],
          _ensurePath: [Function (anonymous)],
          _validate: [Function (anonymous)]
        },
        'use$geoWithin': true
      },
      Model: [Function: Model] {
        exists: [Function: exists],
        discriminator: [Function (anonymous)],
        _events: undefined,
        _eventsCount: 0,
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        off: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        rawListeners: [Function: rawListeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        createCollection: [AsyncFunction: createCollection],
        syncIndexes: [AsyncFunction: syncIndexes],
        diffIndexes: [AsyncFunction: diffIndexes],
        cleanIndexes: [AsyncFunction: cleanIndexes],
        listIndexes: [AsyncFunction: listIndexes],
        ensureIndexes: [AsyncFunction: ensureIndexes],
        createIndexes: [AsyncFunction: createIndexes],
        translateAliases: [Function: translateAliases],
        deleteOne: [Function: deleteOne],
        deleteMany: [Function: deleteMany],
        find: [Function: find],
        findById: [Function: findById],
        findOne: [Function: findOne],
        estimatedDocumentCount: [Function: estimatedDocumentCount],
        countDocuments: [Function: countDocuments],
        count: [Function: count],
        distinct: [Function: distinct],
        where: [Function: where],
        '$where': [Function: $where],
        findOneAndUpdate: [Function (anonymous)],
        findByIdAndUpdate: [Function (anonymous)],
        findOneAndDelete: [Function (anonymous)],
        findByIdAndDelete: [Function (anonymous)],
        findOneAndReplace: [Function (anonymous)],
        findOneAndRemove: [Function (anonymous)],
        findByIdAndRemove: [Function (anonymous)],
        create: [AsyncFunction: create],
        watch: [Function (anonymous)],
        startSession: [Function (anonymous)],
        insertMany: [AsyncFunction: insertMany],
        '$__insertMany': [Function (anonymous)],
        bulkWrite: [AsyncFunction: bulkWrite],
        bulkSave: [AsyncFunction (anonymous)],
        applyDefaults: [Function: applyDefaults],
        castObject: [Function: castObject],
        buildBulkWriteOperations: [Function: buildBulkWriteOperations],
        hydrate: [Function (anonymous)],
        updateMany: [Function: updateMany],
        updateOne: [Function: updateOne],
        replaceOne: [Function: replaceOne],
        aggregate: [Function: aggregate],
        validate: [AsyncFunction: validate],
        populate: [AsyncFunction: populate],
        compile: [Function: compile],
        __subclass: [Function: subclass],
        inspect: [Function (anonymous)],
        [Symbol(nodejs.util.inspect.custom)]: [Function (anonymous)]
      },
      Document: [Function: Document] {
        _events: undefined,
        _eventsCount: 0,
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        off: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        rawListeners: [Function: rawListeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        ValidationError: [class ValidationError extends MongooseError]
      },
      ObjectId: [Function: ObjectId] {
        schemaName: 'ObjectId',
        defaultOptions: {},
        get: [Function (anonymous)],
        set: [Function: set],
        setters: [],
        _checkRequired: [Function (anonymous)],
        _cast: [Function: castObjectId],
        cast: [Function: cast],
        _defaultCaster: [Function (anonymous)],
        checkRequired: [Function (anonymous)]
      },
      isValidObjectId: [Function (anonymous)],
      isObjectIdOrHexString: [Function (anonymous)],
      syncIndexes: [Function (anonymous)],
      Decimal128: [Function: Decimal128] {
        schemaName: 'Decimal128',
        defaultOptions: {},
        _cast: [Function: castDecimal128],
        set: [Function: set],
        setters: [],
        get: [Function (anonymous)],
        cast: [Function: cast],
        _defaultCaster: [Function (anonymous)],
        _checkRequired: [Function (anonymous)],
        checkRequired: [Function (anonymous)]
      },
      Mixed: [Function: Mixed] {
        schemaName: 'Mixed',
        defaultOptions: {},
        get: [Function (anonymous)],
        set: [Function: set],
        setters: []
      },
      Date: [Function: SchemaDate] {
        schemaName: 'Date',
        defaultOptions: {},
        _cast: [Function: castDate],
        set: [Function: set],
        setters: [],
        get: [Function (anonymous)],
        cast: [Function: cast],
        _defaultCaster: [Function (anonymous)],
        _checkRequired: [Function (anonymous)],
        checkRequired: [Function (anonymous)]
      },
      Number: [Function: SchemaNumber] {
        get: [Function (anonymous)],
        set: [Function: set],
        setters: [],
        _cast: [Function: castNumber],
        cast: [Function: cast],
        _defaultCaster: [Function (anonymous)],
        schemaName: 'Number',
        defaultOptions: {},
        _checkRequired: [Function (anonymous)],
        checkRequired: [Function (anonymous)]
      },
      Error: [class MongooseError extends Error] {
        messages: {
          DocumentNotFoundError: null,
          general: {
            default: 'Validator failed for path `{PATH}` with value `{VALUE}`',
            required: 'Path `{PATH}` is required.'
          },
          Number: {
            min: 'Path `{PATH}` ({VALUE}) is less than minimum allowed value ({MIN}).',
            max: 'Path `{PATH}` ({VALUE}) is more than maximum allowed value ({MAX}).',
            enum: '`{VALUE}` is not a valid enum value for path `{PATH}`.'
          },
          Date: {
            min: 'Path `{PATH}` ({VALUE}) is before minimum allowed value ({MIN}).',
            max: 'Path `{PATH}` ({VALUE}) is after maximum allowed value ({MAX}).'
          },
          String: {
            enum: '`{VALUE}` is not a valid enum value for path `{PATH}`.',
            match: 'Path `{PATH}` is invalid ({VALUE}).',
            minlength: 'Path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).',
            maxlength: 'Path `{PATH}` (`{VALUE}`) is longer than the maximum allowed length ({MAXLENGTH}).'
          }
        },
        Messages: {
          DocumentNotFoundError: null,
          general: {
            default: 'Validator failed for path `{PATH}` with value `{VALUE}`',
            required: 'Path `{PATH}` is required.'
          },
          Number: {
            min: 'Path `{PATH}` ({VALUE}) is less than minimum allowed value ({MIN}).',
            max: 'Path `{PATH}` ({VALUE}) is more than maximum allowed value ({MAX}).',
            enum: '`{VALUE}` is not a valid enum value for path `{PATH}`.'
          },
          Date: {
            min: 'Path `{PATH}` ({VALUE}) is before minimum allowed value ({MIN}).',
            max: 'Path `{PATH}` ({VALUE}) is after maximum allowed value ({MAX}).'
          },
          String: {
            enum: '`{VALUE}` is not a valid enum value for path `{PATH}`.',
            match: 'Path `{PATH}` is invalid ({VALUE}).',
            minlength: 'Path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).',
            maxlength: 'Path `{PATH}` (`{VALUE}`) is longer than the maximum allowed length ({MAXLENGTH}).'
          }
        },
        DocumentNotFoundError: [class DocumentNotFoundError extends MongooseError],
        CastError: [class CastError extends MongooseError],
        ValidationError: [class ValidationError extends MongooseError],
        ValidatorError: [class ValidatorError extends MongooseError],
        VersionError: [class VersionError extends MongooseError],
        ParallelSaveError: [class ParallelSaveError extends MongooseError],
        OverwriteModelError: [class OverwriteModelError extends MongooseError],
        MissingSchemaError: [class MissingSchemaError extends MongooseError],
        MongooseServerSelectionError: [class MongooseServerSelectionError extends MongooseError],
        DivergentArrayError: [class DivergentArrayError extends MongooseError],
        StrictModeError: [class StrictModeError extends MongooseError],
        StrictPopulateError: [class StrictPopulateError extends MongooseError]
      },
      MongooseError: [class MongooseError extends Error] {
        messages: {
          DocumentNotFoundError: null,
          general: {
            default: 'Validator failed for path `{PATH}` with value `{VALUE}`',
            required: 'Path `{PATH}` is required.'
          },
          Number: {
            min: 'Path `{PATH}` ({VALUE}) is less than minimum allowed value ({MIN}).',
            max: 'Path `{PATH}` ({VALUE}) is more than maximum allowed value ({MAX}).',
            enum: '`{VALUE}` is not a valid enum value for path `{PATH}`.'
          },
          Date: {
            min: 'Path `{PATH}` ({VALUE}) is before minimum allowed value ({MIN}).',
            max: 'Path `{PATH}` ({VALUE}) is after maximum allowed value ({MAX}).'
          },
          String: {
            enum: '`{VALUE}` is not a valid enum value for path `{PATH}`.',
            match: 'Path `{PATH}` is invalid ({VALUE}).',
            minlength: 'Path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).',
            maxlength: 'Path `{PATH}` (`{VALUE}`) is longer than the maximum allowed length ({MAXLENGTH}).'
          }
        },
        Messages: {
          DocumentNotFoundError: null,
          general: {
            default: 'Validator failed for path `{PATH}` with value `{VALUE}`',
            required: 'Path `{PATH}` is required.'
          },
          Number: {
            min: 'Path `{PATH}` ({VALUE}) is less than minimum allowed value ({MIN}).',
            max: 'Path `{PATH}` ({VALUE}) is more than maximum allowed value ({MAX}).',
            enum: '`{VALUE}` is not a valid enum value for path `{PATH}`.'
          },
          Date: {
            min: 'Path `{PATH}` ({VALUE}) is before minimum allowed value ({MIN}).',
            max: 'Path `{PATH}` ({VALUE}) is after maximum allowed value ({MAX}).'
          },
          String: {
            enum: '`{VALUE}` is not a valid enum value for path `{PATH}`.',
            match: 'Path `{PATH}` is invalid ({VALUE}).',
            minlength: 'Path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).',
            maxlength: 'Path `{PATH}` (`{VALUE}`) is longer than the maximum allowed length ({MAXLENGTH}).'
          }
        },
        DocumentNotFoundError: [class DocumentNotFoundError extends MongooseError],
        CastError: [class CastError extends MongooseError],
        ValidationError: [class ValidationError extends MongooseError],
        ValidatorError: [class ValidatorError extends MongooseError],
        VersionError: [class VersionError extends MongooseError],
        ParallelSaveError: [class ParallelSaveError extends MongooseError],
        OverwriteModelError: [class OverwriteModelError extends MongooseError],
        MissingSchemaError: [class MissingSchemaError extends MongooseError],
        MongooseServerSelectionError: [class MongooseServerSelectionError extends MongooseError],
        DivergentArrayError: [class DivergentArrayError extends MongooseError],
        StrictModeError: [class StrictModeError extends MongooseError],
        StrictPopulateError: [class StrictPopulateError extends MongooseError]
      },
      now: [Function: now],
      CastError: [class CastError extends MongooseError],
      SchemaTypeOptions: [class SchemaTypeOptions],
      mongo: {
        BSON: [Getter],
        Binary: [Getter],
        BSONRegExp: [Getter],
        BSONSymbol: [Getter],
        BSONType: [Getter],
        Code: [Getter],
        DBRef: [Getter],
        Decimal128: [Getter],
        Double: [Getter],
        Int32: [Getter],
        Long: [Getter],
        MaxKey: [Getter],
        MinKey: [Getter],
        ObjectId: [Getter],
        Timestamp: [Getter],
        MongoBulkWriteError: [Getter],
        ChangeStreamCursor: [Getter],
        MongoAPIError: [Getter],
        MongoAWSError: [Getter],
        MongoAzureError: [Getter],
        MongoBatchReExecutionError: [Getter],
        MongoChangeStreamError: [Getter],
        MongoCompatibilityError: [Getter],
        MongoCursorExhaustedError: [Getter],
        MongoCursorInUseError: [Getter],
        MongoDecompressionError: [Getter],
        MongoDriverError: [Getter],
        MongoError: [Getter],
        MongoExpiredSessionError: [Getter],
        MongoGridFSChunkError: [Getter],
        MongoGridFSStreamError: [Getter],
        MongoInvalidArgumentError: [Getter],
        MongoKerberosError: [Getter],
        MongoMissingCredentialsError: [Getter],
        MongoMissingDependencyError: [Getter],
        MongoNetworkError: [Getter],
        MongoNetworkTimeoutError: [Getter],
        MongoNotConnectedError: [Getter],
        MongoParseError: [Getter],
        MongoRuntimeError: [Getter],
        MongoServerClosedError: [Getter],
        MongoServerError: [Getter],
        MongoServerSelectionError: [Getter],
        MongoSystemError: [Getter],
        MongoTailableCursorError: [Getter],
        MongoTopologyClosedError: [Getter],
        MongoTransactionError: [Getter],
        MongoUnexpectedServerResponseError: [Getter],
        MongoWriteConcernError: [Getter],
        AbstractCursor: [Getter],
        Admin: [Getter],
        AggregationCursor: [Getter],
        CancellationToken: [Getter],
        ChangeStream: [Getter],
        ClientSession: [Getter],
        Collection: [Getter],
        Db: [Getter],
        FindCursor: [Getter],
        GridFSBucket: [Getter],
        GridFSBucketReadStream: [Getter],
        GridFSBucketWriteStream: [Getter],
        ListCollectionsCursor: [Getter],
        ListIndexesCursor: [Getter],
        MongoClient: [Getter],
        OrderedBulkOperation: [Getter],
        UnorderedBulkOperation: [Getter],
        BatchType: [Getter],
        GSSAPICanonicalizationValue: [Getter],
        AuthMechanism: [Getter],
        Compressor: [Getter],
        CURSOR_FLAGS: [Getter],
        AutoEncryptionLoggerLevel: [Getter],
        MongoErrorLabel: [Getter],
        ExplainVerbosity: [Getter],
        ServerApiVersion: [Getter],
        ReturnDocument: [Getter],
        ProfilingLevel: [Getter],
        ReadConcernLevel: [Getter],
        ReadPreferenceMode: [Getter],
        ServerType: [Getter],
        TopologyType: [Getter],
        ReadConcern: [Getter],
        ReadPreference: [Getter],
        WriteConcern: [Getter],
        CommandFailedEvent: [Getter],
        CommandStartedEvent: [Getter],
        CommandSucceededEvent: [Getter],
        ConnectionCheckedInEvent: [Getter],
        ConnectionCheckedOutEvent: [Getter],
        ConnectionCheckOutFailedEvent: [Getter],
        ConnectionCheckOutStartedEvent: [Getter],
        ConnectionClosedEvent: [Getter],
        ConnectionCreatedEvent: [Getter],
        ConnectionPoolClearedEvent: [Getter],
        ConnectionPoolClosedEvent: [Getter],
        ConnectionPoolCreatedEvent: [Getter],
        ConnectionPoolMonitoringEvent: [Getter],
        ConnectionPoolReadyEvent: [Getter],
        ConnectionReadyEvent: [Getter],
        ServerClosedEvent: [Getter],
        ServerDescriptionChangedEvent: [Getter],
        ServerHeartbeatFailedEvent: [Getter],
        ServerHeartbeatStartedEvent: [Getter],
        ServerHeartbeatSucceededEvent: [Getter],
        ServerOpeningEvent: [Getter],
        TopologyClosedEvent: [Getter],
        TopologyDescriptionChangedEvent: [Getter],
        TopologyOpeningEvent: [Getter],
        SrvPollingEvent: [Getter]
      },
      mquery: [Function: Query] {
        permissions: {
          distinct: [Function (anonymous)] {
            tailable: true,
            hint: true,
            batchSize: true,
            skip: true,
            limit: true,
            sort: true,
            slice: true,
            select: true
          },
          findOneAndRemove: [Function (anonymous)] {
            tailable: true,
            batchSize: true,
            skip: true,
            limit: true
          },
          findOneAndUpdate: [Function (anonymous)] {
            tailable: true,
            batchSize: true,
            skip: true,
            limit: true
          },
          count: [Function (anonymous)] {
            tailable: true,
            batchSize: true,
            slice: true
          }
        },
        _isPermitted: [Function (anonymous)],
        canMerge: [Function (anonymous)],
        setGlobalTraceFunction: [Function (anonymous)],
        utils: {
          clone: [Function: clone],
          cloneObject: [Function: cloneObject],
          cloneArray: [Function: cloneArray],
          merge: [Function: merge],
          mergeClone: [Function: mergeClone],
          readPref: [Function: readPref],
          readConcern: [Function: readConcern],
          toString: [Function (anonymous)],
          isObject: [Function (anonymous)],
          keys: [Function: keys],
          create: [Function: create],
          inherits: [Function (anonymous)],
          isArgumentsObject: [Function (anonymous)]
        },
        env: {
          isNode: [
            '/usr/local/bin/node',
            '/Users/robwyse/code/mongoose-flights/bin/www'
          ],
          isMongo: false,
          isBrowser: false,
          type: 'node'
        },
        Collection: [class NodeCollection extends Collection],
        BaseCollection: [Function: Collection] {
          methods: [
            'find',             'findOne',
            'updateMany',       'updateOne',
            'replaceOne',       'count',
            'distinct',         'findOneAndDelete',
            'findOneAndUpdate', 'aggregate',
            'findCursor',       'deleteOne',
            'deleteMany'
          ]
        }
      },
      sanitizeFilter: [Function: sanitizeFilter],
      trusted: [Function: trusted],
      skipMiddlewareFunction: [Function: skipWrappedFunction],
      overwriteMiddlewareResult: [Function: overwriteResult]
    },
    modelName: 'Flight',
    model: [Function: model],
    db: <ref *3> NativeConnection {
      base: <ref *1> Mongoose {
        connections: [ [Circular *3] ],
        nextConnectionId: 1,
        models: <ref *4> {
          Flight: [Circular *2],
          Ticket: [Function: model] {
            hooks: [Kareem],
            base: [Circular *1],
            modelName: 'Ticket',
            model: [Function: model],
            db: [Circular *3],
            discriminators: undefined,
            events: [EventEmitter],
            '$appliedMethods': true,
            '$appliedHooks': true,
            _middleware: [Kareem],
            '$__insertMany': [Function (anonymous)],
            schema: [Schema],
            collection: [Collection],
            '$__collection': [Collection],
            Query: [Function],
            '$init': [Promise],
            '$caught': true,
            [Symbol(mongoose#Model)]: true
          }
        },
        events: EventEmitter {
          _events: [Object: null prototype] {},
          _eventsCount: 0,
          _maxListeners: undefined,
          [Symbol(kCapture)]: false
        },
        __driver: {
          Collection: [Function: NativeCollection],
          Connection: [Function: NativeConnection] {
            STATES: [Object: null prototype]
          }
        },
        options: {
          pluralization: true,
          autoIndex: true,
          autoCreate: true,
          [Symbol(mongoose:default)]: true
        },
        _pluralize: [Function: pluralize],
        Schema: [Function: Schema] {
          reserved: [Object: null prototype] {
            validate: 1,
            toObject: 1,
            save: 1,
            remove: 1,
            populated: 1,
            isNew: 1,
            isModified: 1,
            init: 1,
            get: 1,
            errors: 1,
            collection: 1,
            removeListener: 1,
            listeners: 1,
            emit: 1,
            prototype: 1
          },
          Types: {
            Array: [Function],
            Boolean: [Function],
            BigInt: [Function],
            Buffer: [Function],
            Date: [Function],
            Decimal: [Function],
            Decimal128: [Function],
            DocumentArray: [Function],
            Map: [Function],
            Mixed: [Function],
            Number: [Function],
            ObjectId: [Function],
            String: [Function],
            Subdocument: [Function],
            UUID: [Function],
            Oid: [Function],
            Object: [Function],
            Bool: [Function],
            ObjectID: [Function]
          },
          ObjectId: [Function: ObjectId] {
            schemaName: 'ObjectId',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _checkRequired: [Function (anonymous)],
            _cast: [Function: castObjectId],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          }
        },
        model: [Function (anonymous)],
        plugins: [
          [ [Function: removeSubdocs], [Object] ],
          [ [Function: saveSubdocs], [Object] ],
          [ [Function], [Object] ],
          [ [Function: trackTransaction], [Object] ],
          [ [Function: validateBeforeSave], [Object] ]
        ],
        default: [Circular *1],
        mongoose: [Circular *1],
        cast: [Function: cast],
        STATES: [Object: null prototype] {
          '0': 'disconnected',
          '1': 'connected',
          '2': 'connecting',
          '3': 'disconnecting',
          '99': 'uninitialized',
          disconnected: 0,
          connected: 1,
          connecting: 2,
          disconnecting: 3,
          uninitialized: 99
        },
        setDriver: [Function: setDriver],
        set: [Function (anonymous)],
        get: [Function (anonymous)],
        createConnection: [Function (anonymous)],
        connect: [AsyncFunction: connect],
        disconnect: [AsyncFunction: disconnect],
        startSession: [Function (anonymous)],
        pluralize: [Function (anonymous)],
        deleteModel: [Function (anonymous)],
        modelNames: [Function (anonymous)],
        plugin: [Function (anonymous)],
        version: '7.5.0',
        Mongoose: [Function: Mongoose],
        SchemaType: [Function: SchemaType] {
          cast: [Function: cast],
          set: [Function: set],
          get: [Function (anonymous)],
          _isRef: [Function (anonymous)],
          checkRequired: [Function (anonymous)],
          CastError: [class CastError extends MongooseError],
          ValidatorError: [class ValidatorError extends MongooseError]
        },
        SchemaTypes: {
          Array: [Function: SchemaArray] {
            schemaName: 'Array',
            options: [Object],
            defaultOptions: {},
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Boolean: [Function: SchemaBoolean] {
            schemaName: 'Boolean',
            defaultOptions: {},
            _cast: [Function],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)],
            '$conditionalHandlers': [Object]
          },
          BigInt: [Function: SchemaBigInt] {
            schemaName: 'BigInt',
            defaultOptions: {},
            _cast: [Function: castBigInt],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)],
            '$conditionalHandlers': [Object]
          },
          Buffer: [Function: SchemaBuffer] {
            schemaName: 'Buffer',
            defaultOptions: {},
            _checkRequired: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Date: [Function: SchemaDate] {
            schemaName: 'Date',
            defaultOptions: {},
            _cast: [Function: castDate],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Decimal: [Function: Decimal128] {
            schemaName: 'Decimal128',
            defaultOptions: {},
            _cast: [Function: castDecimal128],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Decimal128: [Function: Decimal128] {
            schemaName: 'Decimal128',
            defaultOptions: {},
            _cast: [Function: castDecimal128],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          DocumentArray: [Function: DocumentArrayPath] {
            schemaName: 'DocumentArray',
            options: [Object],
            defaultOptions: {},
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)]
          },
          Map: [class Map extends SchemaType] {
            schemaName: 'Map',
            defaultOptions: {}
          },
          Mixed: [Function: Mixed] {
            schemaName: 'Mixed',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: []
          },
          Number: [Function: SchemaNumber] {
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _cast: [Function: castNumber],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            schemaName: 'Number',
            defaultOptions: {},
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          ObjectId: [Function: ObjectId] {
            schemaName: 'ObjectId',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _checkRequired: [Function (anonymous)],
            _cast: [Function: castObjectId],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          String: [Function: SchemaString] {
            schemaName: 'String',
            defaultOptions: {},
            _cast: [Function: castString],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Subdocument: [Function: SubdocumentPath] {
            defaultOptions: {},
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)]
          },
          UUID: [Function: SchemaUUID] {
            schemaName: 'UUID',
            defaultOptions: {},
            _cast: [Function (anonymous)],
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            cast: [Function: cast],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Oid: [Function: ObjectId] {
            schemaName: 'ObjectId',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _checkRequired: [Function (anonymous)],
            _cast: [Function: castObjectId],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Object: [Function: Mixed] {
            schemaName: 'Mixed',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: []
          },
          Bool: [Function: SchemaBoolean] {
            schemaName: 'Boolean',
            defaultOptions: {},
            _cast: [Function],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)],
            '$conditionalHandlers': [Object]
          },
          ObjectID: [Function: ObjectId] {
            schemaName: 'ObjectId',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _checkRequired: [Function (anonymous)],
            _cast: [Function: castObjectId],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          }
        },
        VirtualType: [Function: VirtualType],
        Types: {
          Array: [Function: MongooseArray],
          Buffer: [Function: MongooseBuffer] {
            pathSymbol: Symbol(mongoose#Buffer#_path),
            mixin: [Object],
            Binary: [Function]
          },
          Embedded: [Function: ArraySubdocument] {
            _events: undefined,
            _eventsCount: 0,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames]
          },
          Document: [Function: ArraySubdocument] {
            _events: undefined,
            _eventsCount: 0,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames]
          },
          DocumentArray: [Function: MongooseDocumentArray],
          Decimal128: [class Decimal128 extends BSONValue],
          ObjectId: [class ObjectId extends BSONValue] { index: 9957603 },
          Map: [class MongooseMap extends Map],
          Subdocument: [Function: Subdocument],
          UUID: [class UUID extends Binary] { cacheHexString: false }
        },
        Query: [Function: Query] {
          base: {
            toConstructor: [Function: toConstructor],
            setOptions: [Function (anonymous)],
            collection: [Function: collection],
            collation: [Function (anonymous)],
            '$where': [Function (anonymous)],
            where: [Function (anonymous)],
            equals: [Function: equals],
            eq: [Function: eq],
            or: [Function: or],
            nor: [Function: nor],
            and: [Function: and],
            gt: [Function (anonymous)],
            gte: [Function (anonymous)],
            lt: [Function (anonymous)],
            lte: [Function (anonymous)],
            ne: [Function (anonymous)],
            in: [Function (anonymous)],
            nin: [Function (anonymous)],
            all: [Function (anonymous)],
            regex: [Function (anonymous)],
            size: [Function (anonymous)],
            maxDistance: [Function (anonymous)],
            minDistance: [Function (anonymous)],
            mod: [Function (anonymous)],
            exists: [Function (anonymous)],
            elemMatch: [Function (anonymous)],
            within: [Function: within],
            box: [Function (anonymous)],
            polygon: [Function (anonymous)],
            circle: [Function (anonymous)],
            near: [Function: near],
            intersects: [Function: intersects],
            geometry: [Function: geometry],
            select: [Function: select],
            slice: [Function (anonymous)],
            sort: [Function (anonymous)],
            limit: [Function (anonymous)],
            skip: [Function (anonymous)],
            batchSize: [Function (anonymous)],
            comment: [Function (anonymous)],
            maxTimeMS: [Function (anonymous)],
            maxTime: [Function (anonymous)],
            hint: [Function (anonymous)],
            j: [Function: j],
            slaveOk: [Function (anonymous)],
            setReadPreference: [Function (anonymous)],
            read: [Function (anonymous)],
            r: [Function (anonymous)],
            readConcern: [Function (anonymous)],
            tailable: [Function (anonymous)],
            w: [Function: writeConcern],
            writeConcern: [Function: writeConcern],
            wTimeout: [Function: wtimeout],
            wtimeout: [Function: wtimeout],
            merge: [Function (anonymous)],
            find: [Function (anonymous)],
            _find: [AsyncFunction: _find],
            cursor: [Function (anonymous)],
            findOne: [Function (anonymous)],
            _findOne: [AsyncFunction: _findOne],
            count: [Function (anonymous)],
            _count: [AsyncFunction: _count],
            distinct: [Function (anonymous)],
            _distinct: [AsyncFunction: _distinct],
            updateMany: [Function: updateMany],
            _updateMany: [AsyncFunction (anonymous)],
            updateOne: [Function: updateOne],
            _updateOne: [AsyncFunction (anonymous)],
            replaceOne: [Function: replaceOne],
            _replaceOne: [AsyncFunction (anonymous)],
            deleteOne: [Function (anonymous)],
            _deleteOne: [AsyncFunction (anonymous)],
            deleteMany: [Function (anonymous)],
            _deleteMany: [AsyncFunction (anonymous)],
            findOneAndUpdate: [Function (anonymous)],
            _findOneAndUpdate: [AsyncFunction (anonymous)],
            findOneAndDelete: [Function (anonymous)],
            findOneAndRemove: [Function (anonymous)],
            _findOneAndRemove: [AsyncFunction (anonymous)],
            setTraceFunction: [Function (anonymous)],
            exec: [AsyncFunction: exec],
            then: [AsyncFunction (anonymous)],
            selected: [Function: selected],
            selectedInclusively: [Function: selectedInclusively],
            selectedExclusively: [Function: selectedExclusively],
            _mergeUpdate: [Function (anonymous)],
            _optionsForExec: [Function (anonymous)],
            _fieldsForExec: [Function (anonymous)],
            _updateForExec: [Function (anonymous)],
            _ensurePath: [Function (anonymous)],
            _validate: [Function (anonymous)]
          },
          'use$geoWithin': true
        },
        Model: [Function: Model] {
          exists: [Function: exists],
          discriminator: [Function (anonymous)],
          _events: undefined,
          _eventsCount: 0,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames],
          init: [Function: init],
          createCollection: [AsyncFunction: createCollection],
          syncIndexes: [AsyncFunction: syncIndexes],
          diffIndexes: [AsyncFunction: diffIndexes],
          cleanIndexes: [AsyncFunction: cleanIndexes],
          listIndexes: [AsyncFunction: listIndexes],
          ensureIndexes: [AsyncFunction: ensureIndexes],
          createIndexes: [AsyncFunction: createIndexes],
          translateAliases: [Function: translateAliases],
          deleteOne: [Function: deleteOne],
          deleteMany: [Function: deleteMany],
          find: [Function: find],
          findById: [Function: findById],
          findOne: [Function: findOne],
          estimatedDocumentCount: [Function: estimatedDocumentCount],
          countDocuments: [Function: countDocuments],
          count: [Function: count],
          distinct: [Function: distinct],
          where: [Function: where],
          '$where': [Function: $where],
          findOneAndUpdate: [Function (anonymous)],
          findByIdAndUpdate: [Function (anonymous)],
          findOneAndDelete: [Function (anonymous)],
          findByIdAndDelete: [Function (anonymous)],
          findOneAndReplace: [Function (anonymous)],
          findOneAndRemove: [Function (anonymous)],
          findByIdAndRemove: [Function (anonymous)],
          create: [AsyncFunction: create],
          watch: [Function (anonymous)],
          startSession: [Function (anonymous)],
          insertMany: [AsyncFunction: insertMany],
          '$__insertMany': [Function (anonymous)],
          bulkWrite: [AsyncFunction: bulkWrite],
          bulkSave: [AsyncFunction (anonymous)],
          applyDefaults: [Function: applyDefaults],
          castObject: [Function: castObject],
          buildBulkWriteOperations: [Function: buildBulkWriteOperations],
          hydrate: [Function (anonymous)],
          updateMany: [Function: updateMany],
          updateOne: [Function: updateOne],
          replaceOne: [Function: replaceOne],
          aggregate: [Function: aggregate],
          validate: [AsyncFunction: validate],
          populate: [AsyncFunction: populate],
          compile: [Function: compile],
          __subclass: [Function: subclass],
          inspect: [Function (anonymous)],
          [Symbol(nodejs.util.inspect.custom)]: [Function (anonymous)]
        },
        Document: [Function: Document] {
          _events: undefined,
          _eventsCount: 0,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames],
          ValidationError: [class ValidationError extends MongooseError]
        },
        ObjectId: [Function: ObjectId] {
          schemaName: 'ObjectId',
          defaultOptions: {},
          get: [Function (anonymous)],
          set: [Function: set],
          setters: [],
          _checkRequired: [Function (anonymous)],
          _cast: [Function: castObjectId],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        isValidObjectId: [Function (anonymous)],
        isObjectIdOrHexString: [Function (anonymous)],
        syncIndexes: [Function (anonymous)],
        Decimal128: [Function: Decimal128] {
          schemaName: 'Decimal128',
          defaultOptions: {},
          _cast: [Function: castDecimal128],
          set: [Function: set],
          setters: [],
          get: [Function (anonymous)],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Mixed: [Function: Mixed] {
          schemaName: 'Mixed',
          defaultOptions: {},
          get: [Function (anonymous)],
          set: [Function: set],
          setters: []
        },
        Date: [Function: SchemaDate] {
          schemaName: 'Date',
          defaultOptions: {},
          _cast: [Function: castDate],
          set: [Function: set],
          setters: [],
          get: [Function (anonymous)],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Number: [Function: SchemaNumber] {
          get: [Function (anonymous)],
          set: [Function: set],
          setters: [],
          _cast: [Function: castNumber],
          cast: [Function: cast],
          _defaultCaster: [Function (anonymous)],
          schemaName: 'Number',
          defaultOptions: {},
          _checkRequired: [Function (anonymous)],
          checkRequired: [Function (anonymous)]
        },
        Error: [class MongooseError extends Error] {
          messages: {
            DocumentNotFoundError: null,
            general: [Object],
            Number: [Object],
            Date: [Object],
            String: [Object]
          },
          Messages: {
            DocumentNotFoundError: null,
            general: [Object],
            Number: [Object],
            Date: [Object],
            String: [Object]
          },
          DocumentNotFoundError: [class DocumentNotFoundError extends MongooseError],
          CastError: [class CastError extends MongooseError],
          ValidationError: [class ValidationError extends MongooseError],
          ValidatorError: [class ValidatorError extends MongooseError],
          VersionError: [class VersionError extends MongooseError],
          ParallelSaveError: [class ParallelSaveError extends MongooseError],
          OverwriteModelError: [class OverwriteModelError extends MongooseError],
          MissingSchemaError: [class MissingSchemaError extends MongooseError],
          MongooseServerSelectionError: [class MongooseServerSelectionError extends MongooseError],
          DivergentArrayError: [class DivergentArrayError extends MongooseError],
          StrictModeError: [class StrictModeError extends MongooseError],
          StrictPopulateError: [class StrictPopulateError extends MongooseError]
        },
        MongooseError: [class MongooseError extends Error] {
          messages: {
            DocumentNotFoundError: null,
            general: [Object],
            Number: [Object],
            Date: [Object],
            String: [Object]
          },
          Messages: {
            DocumentNotFoundError: null,
            general: [Object],
            Number: [Object],
            Date: [Object],
            String: [Object]
          },
          DocumentNotFoundError: [class DocumentNotFoundError extends MongooseError],
          CastError: [class CastError extends MongooseError],
          ValidationError: [class ValidationError extends MongooseError],
          ValidatorError: [class ValidatorError extends MongooseError],
          VersionError: [class VersionError extends MongooseError],
          ParallelSaveError: [class ParallelSaveError extends MongooseError],
          OverwriteModelError: [class OverwriteModelError extends MongooseError],
          MissingSchemaError: [class MissingSchemaError extends MongooseError],
          MongooseServerSelectionError: [class MongooseServerSelectionError extends MongooseError],
          DivergentArrayError: [class DivergentArrayError extends MongooseError],
          StrictModeError: [class StrictModeError extends MongooseError],
          StrictPopulateError: [class StrictPopulateError extends MongooseError]
        },
        now: [Function: now],
        CastError: [class CastError extends MongooseError],
        SchemaTypeOptions: [class SchemaTypeOptions],
        mongo: {
          BSON: [Getter],
          Binary: [Getter],
          BSONRegExp: [Getter],
          BSONSymbol: [Getter],
          BSONType: [Getter],
          Code: [Getter],
          DBRef: [Getter],
          Decimal128: [Getter],
          Double: [Getter],
          Int32: [Getter],
          Long: [Getter],
          MaxKey: [Getter],
          MinKey: [Getter],
          ObjectId: [Getter],
          Timestamp: [Getter],
          MongoBulkWriteError: [Getter],
          ChangeStreamCursor: [Getter],
          MongoAPIError: [Getter],
          MongoAWSError: [Getter],
          MongoAzureError: [Getter],
          MongoBatchReExecutionError: [Getter],
          MongoChangeStreamError: [Getter],
          MongoCompatibilityError: [Getter],
          MongoCursorExhaustedError: [Getter],
          MongoCursorInUseError: [Getter],
          MongoDecompressionError: [Getter],
          MongoDriverError: [Getter],
          MongoError: [Getter],
          MongoExpiredSessionError: [Getter],
          MongoGridFSChunkError: [Getter],
          MongoGridFSStreamError: [Getter],
          MongoInvalidArgumentError: [Getter],
          MongoKerberosError: [Getter],
          MongoMissingCredentialsError: [Getter],
          MongoMissingDependencyError: [Getter],
          MongoNetworkError: [Getter],
          MongoNetworkTimeoutError: [Getter],
          MongoNotConnectedError: [Getter],
          MongoParseError: [Getter],
          MongoRuntimeError: [Getter],
          MongoServerClosedError: [Getter],
          MongoServerError: [Getter],
          MongoServerSelectionError: [Getter],
          MongoSystemError: [Getter],
          MongoTailableCursorError: [Getter],
          MongoTopologyClosedError: [Getter],
          MongoTransactionError: [Getter],
          MongoUnexpectedServerResponseError: [Getter],
          MongoWriteConcernError: [Getter],
          AbstractCursor: [Getter],
          Admin: [Getter],
          AggregationCursor: [Getter],
          CancellationToken: [Getter],
          ChangeStream: [Getter],
          ClientSession: [Getter],
          Collection: [Getter],
          Db: [Getter],
          FindCursor: [Getter],
          GridFSBucket: [Getter],
          GridFSBucketReadStream: [Getter],
          GridFSBucketWriteStream: [Getter],
          ListCollectionsCursor: [Getter],
          ListIndexesCursor: [Getter],
          MongoClient: [Getter],
          OrderedBulkOperation: [Getter],
          UnorderedBulkOperation: [Getter],
          BatchType: [Getter],
          GSSAPICanonicalizationValue: [Getter],
          AuthMechanism: [Getter],
          Compressor: [Getter],
          CURSOR_FLAGS: [Getter],
          AutoEncryptionLoggerLevel: [Getter],
          MongoErrorLabel: [Getter],
          ExplainVerbosity: [Getter],
          ServerApiVersion: [Getter],
          ReturnDocument: [Getter],
          ProfilingLevel: [Getter],
          ReadConcernLevel: [Getter],
          ReadPreferenceMode: [Getter],
          ServerType: [Getter],
          TopologyType: [Getter],
          ReadConcern: [Getter],
          ReadPreference: [Getter],
          WriteConcern: [Getter],
          CommandFailedEvent: [Getter],
          CommandStartedEvent: [Getter],
          CommandSucceededEvent: [Getter],
          ConnectionCheckedInEvent: [Getter],
          ConnectionCheckedOutEvent: [Getter],
          ConnectionCheckOutFailedEvent: [Getter],
          ConnectionCheckOutStartedEvent: [Getter],
          ConnectionClosedEvent: [Getter],
          ConnectionCreatedEvent: [Getter],
          ConnectionPoolClearedEvent: [Getter],
          ConnectionPoolClosedEvent: [Getter],
          ConnectionPoolCreatedEvent: [Getter],
          ConnectionPoolMonitoringEvent: [Getter],
          ConnectionPoolReadyEvent: [Getter],
          ConnectionReadyEvent: [Getter],
          ServerClosedEvent: [Getter],
          ServerDescriptionChangedEvent: [Getter],
          ServerHeartbeatFailedEvent: [Getter],
          ServerHeartbeatStartedEvent: [Getter],
          ServerHeartbeatSucceededEvent: [Getter],
          ServerOpeningEvent: [Getter],
          TopologyClosedEvent: [Getter],
          TopologyDescriptionChangedEvent: [Getter],
          TopologyOpeningEvent: [Getter],
          SrvPollingEvent: [Getter]
        },
        mquery: [Function: Query] {
          permissions: {
            distinct: [Function],
            findOneAndRemove: [Function],
            findOneAndUpdate: [Function],
            count: [Function]
          },
          _isPermitted: [Function (anonymous)],
          canMerge: [Function (anonymous)],
          setGlobalTraceFunction: [Function (anonymous)],
          utils: {
            clone: [Function: clone],
            cloneObject: [Function: cloneObject],
            cloneArray: [Function: cloneArray],
            merge: [Function: merge],
            mergeClone: [Function: mergeClone],
            readPref: [Function: readPref],
            readConcern: [Function: readConcern],
            toString: [Function (anonymous)],
            isObject: [Function (anonymous)],
            keys: [Function: keys],
            create: [Function: create],
            inherits: [Function (anonymous)],
            isArgumentsObject: [Function (anonymous)]
          },
          env: {
            isNode: [Array],
            isMongo: false,
            isBrowser: false,
            type: 'node'
          },
          Collection: [class NodeCollection extends Collection],
          BaseCollection: [Function: Collection] { methods: [Array] }
        },
        sanitizeFilter: [Function: sanitizeFilter],
        trusted: [Function: trusted],
        skipMiddlewareFunction: [Function: skipWrappedFunction],
        overwriteMiddlewareResult: [Function: overwriteResult]
      },
      collections: {
        flights: Collection {
          collection: Collection { s: [Object], client: [MongoClient] },
          Promise: [Function: Promise],
          modelName: 'Flight',
          _closed: false,
          opts: {
            autoIndex: true,
            autoCreate: true,
            schemaUserProvidedOptions: [Object],
            capped: false,
            Promise: undefined,
            '$wasForceClosed': undefined
          },
          name: 'flights',
          collectionName: 'flights',
          conn: [Circular *3],
          queue: [],
          buffer: false,
          emitter: EventEmitter {
            _events: [Object: null prototype] {},
            _eventsCount: 0,
            _maxListeners: undefined,
            [Symbol(kCapture)]: false
          }
        },
        tickets: Collection {
          collection: Collection { s: [Object], client: [MongoClient] },
          Promise: [Function: Promise],
          modelName: 'Ticket',
          _closed: false,
          opts: {
            autoIndex: true,
            autoCreate: true,
            schemaUserProvidedOptions: {},
            capped: false,
            Promise: undefined,
            '$wasForceClosed': undefined
          },
          name: 'tickets',
          collectionName: 'tickets',
          conn: [Circular *3],
          queue: [],
          buffer: false,
          emitter: EventEmitter {
            _events: [Object: null prototype] {},
            _eventsCount: 0,
            _maxListeners: undefined,
            [Symbol(kCapture)]: false
          }
        }
      },
      models: <ref *4> {
        Flight: [Circular *2],
        Ticket: [Function: model] {
          hooks: Kareem { _pres: [Map], _posts: [Map] },
          base: <ref *1> Mongoose {
            connections: [Array],
            nextConnectionId: 1,
            models: [Circular *4],
            events: [EventEmitter],
            __driver: [Object],
            options: [Object],
            _pluralize: [Function: pluralize],
            Schema: [Function],
            model: [Function (anonymous)],
            plugins: [Array],
            default: [Circular *1],
            mongoose: [Circular *1],
            cast: [Function: cast],
            STATES: [Object: null prototype],
            setDriver: [Function: setDriver],
            set: [Function (anonymous)],
            get: [Function (anonymous)],
            createConnection: [Function (anonymous)],
            connect: [AsyncFunction: connect],
            disconnect: [AsyncFunction: disconnect],
            startSession: [Function (anonymous)],
            pluralize: [Function (anonymous)],
            deleteModel: [Function (anonymous)],
            modelNames: [Function (anonymous)],
            plugin: [Function (anonymous)],
            version: '7.5.0',
            Mongoose: [Function: Mongoose],
            SchemaType: [Function],
            SchemaTypes: [Object],
            VirtualType: [Function: VirtualType],
            Types: [Object],
            Query: [Function],
            Model: [Function],
            Document: [Function],
            ObjectId: [Function],
            isValidObjectId: [Function (anonymous)],
            isObjectIdOrHexString: [Function (anonymous)],
            syncIndexes: [Function (anonymous)],
            Decimal128: [Function],
            Mixed: [Function],
            Date: [Function],
            Number: [Function],
            Error: [Function],
            MongooseError: [Function],
            now: [Function: now],
            CastError: [class CastError extends MongooseError],
            SchemaTypeOptions: [class SchemaTypeOptions],
            mongo: [Object],
            mquery: [Function],
            sanitizeFilter: [Function: sanitizeFilter],
            trusted: [Function: trusted],
            skipMiddlewareFunction: [Function: skipWrappedFunction],
            overwriteMiddlewareResult: [Function: overwriteResult]
          },
          modelName: 'Ticket',
          model: [Function: model],
          db: [Circular *3],
          discriminators: undefined,
          events: EventEmitter {
            _events: [Object: null prototype] {},
            _eventsCount: 0,
            _maxListeners: undefined,
            [Symbol(kCapture)]: false
          },
          '$appliedMethods': true,
          '$appliedHooks': true,
          _middleware: Kareem { _pres: [Map], _posts: [Map] },
          '$__insertMany': [Function (anonymous)],
          schema: Schema {
            obj: [Object],
            paths: [Object],
            aliases: {},
            subpaths: {},
            virtuals: [Object],
            singleNestedPaths: {},
            nested: {},
            inherits: {},
            callQueue: [],
            _indexes: [],
            methods: {},
            methodOptions: {},
            statics: {},
            tree: [Object],
            query: {},
            childSchemas: [],
            plugins: [Array],
            '$id': 3,
            mapPaths: [],
            s: [Object],
            _userProvidedOptions: {},
            options: [Object],
            '$globalPluginsApplied': true
          },
          collection: Collection {
            collection: [Collection],
            Promise: [Function: Promise],
            modelName: 'Ticket',
            _closed: false,
            opts: [Object],
            name: 'tickets',
            collectionName: 'tickets',
            conn: [Circular *3],
            queue: [],
            buffer: false,
            emitter: [EventEmitter]
          },
          '$__collection': Collection {
            collection: [Collection],
            Promise: [Function: Promise],
            modelName: 'Ticket',
            _closed: false,
            opts: [Object],
            name: 'tickets',
            collectionName: 'tickets',
            conn: [Circular *3],
            queue: [],
            buffer: false,
            emitter: [EventEmitter]
          },
          Query: [Function (anonymous)] { base: [Object] },
          '$init': Promise { undefined, catch: [Function (anonymous)] },
          '$caught': true,
          [Symbol(mongoose#Model)]: true
        }
      },
      config: {},
      replica: false,
      options: null,
      otherDbs: [],
      relatedDbs: {},
      states: [Object: null prototype] {
        '0': 'disconnected',
        '1': 'connected',
        '2': 'connecting',
        '3': 'disconnecting',
        '99': 'uninitialized',
        disconnected: 0,
        connected: 1,
        connecting: 2,
        disconnecting: 3,
        uninitialized: 99
      },
      _readyState: 1,
      _closeCalled: undefined,
      _hasOpened: true,
      plugins: [],
      id: 0,
      _queue: [],
      _listening: false,
      _connectionOptions: { driverInfo: { name: 'Mongoose', version: '7.5.0' } },
      _connectionString: 'mongodb+srv://rjwyse27:Rockwell1@cluster0.udxjpgm.mongodb.net/mongoose-flights?retryWrites=true&w=majority',
      client: <ref *5> MongoClient {
        _events: [Object: null prototype] {
          topologyDescriptionChanged: [Function (anonymous)]
        },
        _eventsCount: 1,
        _maxListeners: 0,
        mongoLogger: MongoLogger {
          error: [Function: bound log],
          warn: [Function: bound log],
          info: [Function: bound log],
          debug: [Function: bound log],
          trace: [Function: bound log],
          componentSeverities: {
            command: 'off',
            topology: 'off',
            serverSelection: 'off',
            connection: 'off',
            default: 'off'
          },
          maxDocumentLength: 1000,
          logDestination: { write: [Function: write] }
        },
        s: {
          url: 'mongodb+srv://rjwyse27:Rockwell1@cluster0.udxjpgm.mongodb.net/mongoose-flights?retryWrites=true&w=majority',
          bsonOptions: {
            raw: false,
            useBigInt64: false,
            promoteLongs: true,
            promoteValues: true,
            promoteBuffers: false,
            ignoreUndefined: false,
            bsonRegExp: false,
            serializeFunctions: false,
            fieldsAsRaw: {},
            enableUtf8Validation: true
          },
          namespace: MongoDBNamespace { db: 'admin', collection: undefined },
          hasBeenClosed: false,
          sessionPool: ServerSessionPool { client: [Circular *5], sessions: [List] },
          activeSessions: Set(0) {},
          options: [Getter],
          readConcern: [Getter],
          writeConcern: [Getter],
          readPreference: [Getter],
          isMongoClient: [Getter]
        },
        connectionLock: undefined,
        topology: Topology {
          _events: [Object: null prototype] {
            topologyDescriptionChanged: [Array],
            connectionPoolCreated: [Function (anonymous)],
            connectionPoolReady: [Function (anonymous)],
            connectionPoolCleared: [Function (anonymous)],
            connectionPoolClosed: [Function (anonymous)],
            connectionCreated: [Function (anonymous)],
            connectionReady: [Function (anonymous)],
            connectionClosed: [Function (anonymous)],
            connectionCheckOutStarted: [Function (anonymous)],
            connectionCheckOutFailed: [Function (anonymous)],
            connectionCheckedOut: [Function (anonymous)],
            connectionCheckedIn: [Function (anonymous)],
            commandStarted: [Function (anonymous)],
            commandSucceeded: [Function (anonymous)],
            commandFailed: [Function (anonymous)],
            serverOpening: [Function (anonymous)],
            serverClosed: [Function (anonymous)],
            serverDescriptionChanged: [Function (anonymous)],
            topologyOpening: [Function (anonymous)],
            topologyClosed: [Function (anonymous)],
            error: [Function (anonymous)],
            timeout: [Function (anonymous)],
            close: [Function (anonymous)],
            serverHeartbeatStarted: [Function (anonymous)],
            serverHeartbeatSucceeded: [Function (anonymous)],
            serverHeartbeatFailed: [Function (anonymous)]
          },
          _eventsCount: 26,
          _maxListeners: undefined,
          client: [Circular *5],
          selectServerAsync: [Function (anonymous)],
          s: {
            id: 0,
            options: [Object: null prototype],
            seedlist: [Array],
            state: 'connected',
            description: [TopologyDescription],
            serverSelectionTimeoutMS: 30000,
            heartbeatFrequencyMS: 10000,
            minHeartbeatFrequencyMS: 500,
            servers: [Map],
            credentials: [MongoCredentials],
            clusterTime: [Object],
            connectionTimers: Set(0) {},
            detectShardedTopology: [Function: detectShardedTopology],
            detectSrvRecords: [Function: detectSrvRecords],
            srvPoller: [SrvPoller]
          },
          [Symbol(kCapture)]: false,
          [Symbol(waitQueue)]: List { count: 0, head: [Object] }
        },
        [Symbol(kCapture)]: false,
        [Symbol(options)]: [Object: null prototype] {
          hosts: [ [HostAddress], [HostAddress], [HostAddress] ],
          credentials: MongoCredentials {
            username: 'rjwyse27',
            password: 'Rockwell1',
            source: 'admin',
            mechanism: 'DEFAULT',
            mechanismProperties: {}
          },
          compressors: [ 'none' ],
          connectTimeoutMS: 30000,
          dbName: 'mongoose-flights',
          directConnection: false,
          driverInfo: { name: 'Mongoose', version: '7.5.0' },
          enableUtf8Validation: true,
          forceServerObjectId: false,
          heartbeatFrequencyMS: 10000,
          keepAlive: true,
          keepAliveInitialDelay: 120000,
          loadBalanced: false,
          localThresholdMS: 15,
          maxConnecting: 2,
          maxIdleTimeMS: 0,
          maxPoolSize: 100,
          minPoolSize: 0,
          minHeartbeatFrequencyMS: 500,
          monitorCommands: false,
          noDelay: true,
          pkFactory: { createPk: [Function: createPk] },
          raw: false,
          readPreference: ReadPreference {
            mode: 'primary',
            tags: undefined,
            hedge: undefined,
            maxStalenessSeconds: undefined,
            minWireVersion: undefined
          },
          retryReads: true,
          retryWrites: true,
          serverSelectionTimeoutMS: 30000,
          socketTimeoutMS: 0,
          srvMaxHosts: 0,
          srvServiceName: 'mongodb',
          writeConcern: WriteConcern { w: 'majority' },
          waitQueueTimeoutMS: 0,
          zlibCompressionLevel: 0,
          userSpecifiedAuthSource: false,
          userSpecifiedReplicaSet: false,
          srvHost: 'cluster0.udxjpgm.mongodb.net',
          tls: true,
          mongoLoggerOptions: {
            componentSeverities: [Object],
            maxDocumentLength: 1000,
            logDestination: [Object]
          },
          metadata: {
            driver: [Object],
            platform: 'Node.js v20.5.0, LE',
            os: [Object]
          },
          replicaSet: 'atlas-kc5ppa-shard-0',
          [Symbol(@@mdb.enableMongoLogger)]: false
        }
      },
      '$initialConnection': Promise { [Circular *3] },
      _events: [Object: null prototype] { connected: [Function (anonymous)] },
      _eventsCount: 1,
      db: Db {
        s: {
          options: {
            enableUtf8Validation: true,
            forceServerObjectId: false,
            pkFactory: [Object],
            raw: false,
            readPreference: [ReadPreference],
            retryWrites: true,
            writeConcern: [WriteConcern]
          },
          readPreference: ReadPreference {
            mode: 'primary',
            tags: undefined,
            hedge: undefined,
            maxStalenessSeconds: undefined,
            minWireVersion: undefined
          },
          bsonOptions: {
            raw: false,
            useBigInt64: false,
            promoteLongs: true,
            promoteValues: true,
            promoteBuffers: false,
            ignoreUndefined: false,
            bsonRegExp: false,
            serializeFunctions: false,
            fieldsAsRaw: {},
            enableUtf8Validation: true
          },
          pkFactory: { createPk: [Function: createPk] },
          readConcern: undefined,
          writeConcern: WriteConcern { w: 'majority' },
          namespace: MongoDBNamespace {
            db: 'mongoose-flights',
            collection: undefined
          }
        },
        client: <ref *5> MongoClient {
          _events: [Object: null prototype] {
            topologyDescriptionChanged: [Function (anonymous)]
          },
          _eventsCount: 1,
          _maxListeners: 0,
          mongoLogger: MongoLogger {
            error: [Function: bound log],
            warn: [Function: bound log],
            info: [Function: bound log],
            debug: [Function: bound log],
            trace: [Function: bound log],
            componentSeverities: [Object],
            maxDocumentLength: 1000,
            logDestination: [Object]
          },
          s: {
            url: 'mongodb+srv://rjwyse27:Rockwell1@cluster0.udxjpgm.mongodb.net/mongoose-flights?retryWrites=true&w=majority',
            bsonOptions: [Object],
            namespace: [MongoDBNamespace],
            hasBeenClosed: false,
            sessionPool: [ServerSessionPool],
            activeSessions: Set(0) {},
            options: [Getter],
            readConcern: [Getter],
            writeConcern: [Getter],
            readPreference: [Getter],
            isMongoClient: [Getter]
          },
          connectionLock: undefined,
          topology: Topology {
            _events: [Object: null prototype],
            _eventsCount: 26,
            _maxListeners: undefined,
            client: [Circular *5],
            selectServerAsync: [Function (anonymous)],
            s: [Object],
            [Symbol(kCapture)]: false,
            [Symbol(waitQueue)]: [List]
          },
          [Symbol(kCapture)]: false,
          [Symbol(options)]: [Object: null prototype] {
            hosts: [Array],
            credentials: [MongoCredentials],
            compressors: [Array],
            connectTimeoutMS: 30000,
            dbName: 'mongoose-flights',
            directConnection: false,
            driverInfo: [Object],
            enableUtf8Validation: true,
            forceServerObjectId: false,
            heartbeatFrequencyMS: 10000,
            keepAlive: true,
            keepAliveInitialDelay: 120000,
            loadBalanced: false,
            localThresholdMS: 15,
            maxConnecting: 2,
            maxIdleTimeMS: 0,
            maxPoolSize: 100,
            minPoolSize: 0,
            minHeartbeatFrequencyMS: 500,
            monitorCommands: false,
            noDelay: true,
            pkFactory: [Object],
            raw: false,
            readPreference: [ReadPreference],
            retryReads: true,
            retryWrites: true,
            serverSelectionTimeoutMS: 30000,
            socketTimeoutMS: 0,
            srvMaxHosts: 0,
            srvServiceName: 'mongodb',
            writeConcern: [WriteConcern],
            waitQueueTimeoutMS: 0,
            zlibCompressionLevel: 0,
            userSpecifiedAuthSource: false,
            userSpecifiedReplicaSet: false,
            srvHost: 'cluster0.udxjpgm.mongodb.net',
            tls: true,
            mongoLoggerOptions: [Object],
            metadata: [Object],
            replicaSet: 'atlas-kc5ppa-shard-0',
            [Symbol(@@mdb.enableMongoLogger)]: false
          }
        }
      },
      host: 'ac-sjskon9-shard-00-01.udxjpgm.mongodb.net',
      port: 27017,
      name: 'mongoose-flights'
    },
    discriminators: undefined,
    events: EventEmitter {
      _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: undefined,
      [Symbol(kCapture)]: false
    },
    '$appliedMethods': true,
    '$appliedHooks': true,
    _middleware: Kareem {
      _pres: Map(8) {
        'save' => [
          {
            fn: [Function: validateBeforeSave],
            isAsync: false,
            name: 'save'
          },
          {
            fn: [Function: saveSubdocsPreSave],
            isAsync: false,
            name: 'save'
          },
          {
            fn: [Function: timestampsPreSave],
            isAsync: false,
            name: 'save'
          },
          {
            fn: [Function: shardingPluginPreSave],
            isAsync: false,
            name: 'save'
          },
          {
            fn: [Function: trackTransactionPreSave],
            isAsync: false,
            name: 'save'
          },
          numAsync: 0
        ],
        'findOneAndReplace' => [
          {
            query: true,
            model: false,
            fn: [Function],
            isAsync: undefined,
            name: 'findOneAndReplace'
          },
          numAsync: 0
        ],
        'findOneAndUpdate' => [
          {
            query: true,
            model: false,
            fn: [Function],
            isAsync: undefined,
            name: 'findOneAndUpdate'
          },
          numAsync: 0
        ],
        'replaceOne' => [
          {
            query: true,
            model: false,
            fn: [Function],
            isAsync: undefined,
            name: 'replaceOne'
          },
          numAsync: 0
        ],
        'update' => [
          {
            query: true,
            model: false,
            fn: [Function],
            isAsync: undefined,
            name: 'update'
          },
          numAsync: 0
        ],
        'updateMany' => [
          {
            query: true,
            model: false,
            fn: [Function],
            isAsync: undefined,
            name: 'updateMany'
          },
          numAsync: 0
        ],
        'deleteOne' => [
          {
            document: true,
            query: false,
            fn: [Function: removeSubDocsPreRemove],
            isAsync: undefined,
            name: 'deleteOne'
          },
          numAsync: 0
        ],
        'remove' => [
          {
            fn: [Function: shardingPluginPreRemove],
            isAsync: false,
            name: 'remove'
          },
          numAsync: 0
        ]
      },
      _posts: Map(2) {
        'save' => [
          { fn: [Function: saveSubdocsPostSave], name: 'save' },
          { fn: [Function: shardingPluginPostSave], name: 'save' }
        ],
        'init' => [ { fn: [Function: shardingPluginPostInit], name: 'init' } ]
      }
    },
    '$__insertMany': [Function (anonymous)],
    schema: Schema {
      obj: {
        airline: {
          type: [Function: String],
          enum: [ 'American', 'Southwest', 'United' ]
        },
        airport: {
          type: [Function: String],
          default: 'DEN',
          enum: [ 'AUS', 'DFW', 'DEN', 'LAX', 'SAN' ]
        },
        flightNo: { type: [Function: Number], min: 10, max: 9999 },
        departs: { type: [Function: Date] },
        destinations: [
          Schema {
            obj: [Object],
            paths: [Object],
            aliases: {},
            subpaths: {},
            virtuals: [Object],
            singleNestedPaths: {},
            nested: {},
            inherits: {},
            callQueue: [],
            _indexes: [],
            methods: {},
            methodOptions: {},
            statics: {},
            tree: [Object],
            query: {},
            childSchemas: [],
            plugins: [Array],
            '$id': 1,
            mapPaths: [],
            s: [Object],
            _userProvidedOptions: {},
            options: [Object],
            '$globalPluginsApplied': true
          }
        ],
        tickets: [ { type: [Function], ref: 'Ticket' } ]
      },
      paths: {
        airline: SchemaString {
          enumValues: [ 'American', 'Southwest', 'United' ],
          regExp: null,
          path: 'airline',
          instance: 'String',
          validators: [ [Object] ],
          getters: [],
          setters: [],
          _presplitPath: [ 'airline' ],
          options: SchemaStringOptions {
            type: [Function: String],
            enum: [Array]
          },
          _index: null,
          enumValidator: [Function (anonymous)],
          [Symbol(mongoose#schemaType)]: true
        },
        airport: SchemaString {
          enumValues: [ 'AUS', 'DFW', 'DEN', 'LAX', 'SAN' ],
          regExp: null,
          path: 'airport',
          instance: 'String',
          validators: [ [Object] ],
          getters: [],
          setters: [],
          _presplitPath: [ 'airport' ],
          options: SchemaStringOptions {
            type: [Function: String],
            default: 'DEN',
            enum: [Array]
          },
          _index: null,
          defaultValue: 'DEN',
          enumValidator: [Function (anonymous)],
          [Symbol(mongoose#schemaType)]: true
        },
        flightNo: SchemaNumber {
          path: 'flightNo',
          instance: 'Number',
          validators: [ [Object], [Object] ],
          getters: [],
          setters: [],
          _presplitPath: [ 'flightNo' ],
          options: SchemaNumberOptions {
            type: [Function: Number],
            min: 10,
            max: 9999
          },
          _index: null,
          minValidator: [Function (anonymous)],
          maxValidator: [Function (anonymous)],
          [Symbol(mongoose#schemaType)]: true
        },
        departs: SchemaDate {
          path: 'departs',
          instance: 'Date',
          validators: [],
          getters: [],
          setters: [],
          _presplitPath: [ 'departs' ],
          options: SchemaDateOptions { type: [Function: Date] },
          _index: null,
          [Symbol(mongoose#schemaType)]: true
        },
        destinations: <ref *6> DocumentArrayPath {
          schemaOptions: {},
          casterConstructor: [Function: EmbeddedDocument] {
            schema: [Schema],
            '$isArraySubdocument': true,
            events: [EventEmitter],
            base: [Mongoose],
            _events: undefined,
            _eventsCount: 0,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            options: [Object],
            path: 'destinations',
            '$appliedMethods': true,
            '$appliedHooks': true,
            _middleware: [Kareem]
          },
          caster: [Function: EmbeddedDocument] {
            schema: [Schema],
            '$isArraySubdocument': true,
            events: [EventEmitter],
            base: [Mongoose],
            _events: undefined,
            _eventsCount: 0,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            options: [Object],
            path: 'destinations',
            '$appliedMethods': true,
            '$appliedHooks': true,
            _middleware: [Kareem]
          },
          '$embeddedSchemaType': DocumentArrayElement {
            '$parentSchemaType': [Circular *6],
            path: 'destinations.$',
            instance: 'DocumentArrayElement',
            validators: [],
            getters: [],
            setters: [],
            _presplitPath: [Array],
            options: [SchemaTypeOptions],
            _index: null,
            isRequired: false,
            '$isMongooseDocumentArrayElement': true,
            caster: [Function],
            schema: [Schema],
            [Symbol(mongoose#schemaType)]: true
          },
          '$isMongooseArray': true,
          path: 'destinations',
          instance: 'Array',
          validators: [],
          getters: [],
          setters: [],
          _presplitPath: [ 'destinations' ],
          options: SchemaDocumentArrayOptions { type: [Array] },
          _index: null,
          defaultValue: [Function (anonymous)],
          schema: Schema {
            obj: [Object],
            paths: [Object],
            aliases: {},
            subpaths: {},
            virtuals: [Object],
            singleNestedPaths: {},
            nested: {},
            inherits: {},
            callQueue: [],
            _indexes: [],
            methods: {},
            methodOptions: {},
            statics: {},
            tree: [Object],
            query: {},
            childSchemas: [],
            plugins: [Array],
            '$id': 1,
            mapPaths: [],
            s: [Object],
            _userProvidedOptions: {},
            options: [Object],
            '$globalPluginsApplied': true
          },
          '$isMongooseDocumentArray': true,
          Constructor: [Function: EmbeddedDocument] {
            schema: [Schema],
            '$isArraySubdocument': true,
            events: [EventEmitter],
            base: [Mongoose],
            _events: undefined,
            _eventsCount: 0,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            options: [Object],
            path: 'destinations',
            '$appliedMethods': true,
            '$appliedHooks': true,
            _middleware: [Kareem]
          },
          [Symbol(mongoose#schemaType)]: true
        },
        tickets: SchemaArray {
          schemaOptions: {
            timestamps: true,
            typeKey: 'type',
            id: true,
            _id: true,
            validateModifiedOnly: false,
            validateBeforeSave: true,
            read: null,
            shardKey: null,
            discriminatorKey: '__t',
            autoIndex: null,
            minimize: true,
            optimisticConcurrency: false,
            versionKey: '__v',
            capped: false,
            bufferCommands: true,
            strictQuery: false,
            strict: true,
            pluralization: true
          },
          casterConstructor: [Function: ObjectId] {
            schemaName: 'ObjectId',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _checkRequired: [Function (anonymous)],
            _cast: [Function: castObjectId],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          caster: ObjectId {
            path: 'tickets',
            instance: 'ObjectId',
            validators: [],
            getters: [],
            setters: [],
            _presplitPath: [Array],
            options: [SchemaObjectIdOptions],
            _index: null,
            _arrayPath: 'tickets.$',
            _arrayParentPath: 'tickets',
            [Symbol(mongoose#schemaType)]: true
          },
          '$embeddedSchemaType': ObjectId {
            path: 'tickets',
            instance: 'ObjectId',
            validators: [],
            getters: [],
            setters: [],
            _presplitPath: [Array],
            options: [SchemaObjectIdOptions],
            _index: null,
            _arrayPath: 'tickets.$',
            _arrayParentPath: 'tickets',
            [Symbol(mongoose#schemaType)]: true
          },
          '$isMongooseArray': true,
          path: 'tickets',
          instance: 'Array',
          validators: [],
          getters: [],
          setters: [],
          _presplitPath: [ 'tickets' ],
          options: SchemaArrayOptions { type: [Array] },
          _index: null,
          defaultValue: [Function: defaultFn] { '$runBeforeSetters': true },
          [Symbol(mongoose#schemaType)]: true
        },
        _id: ObjectId {
          path: '_id',
          instance: 'ObjectId',
          validators: [],
          getters: [],
          setters: [ [Function: resetId] ],
          _presplitPath: [ '_id' ],
          options: SchemaObjectIdOptions { auto: true, type: 'ObjectId' },
          _index: null,
          defaultValue: [Function: defaultId] { '$runBeforeSetters': true },
          [Symbol(mongoose#schemaType)]: true
        },
        createdAt: SchemaDate {
          path: 'createdAt',
          instance: 'Date',
          validators: [],
          getters: [],
          setters: [ [Function: immutableSetter], [Function: immutableSetter] ],
          _presplitPath: [ 'createdAt' ],
          options: SchemaDateOptions { type: [Function: Date], immutable: true },
          _index: null,
          '$immutable': true,
          '$immutableSetter': [Function: immutableSetter],
          [Symbol(mongoose#schemaType)]: true
        },
        updatedAt: SchemaDate {
          path: 'updatedAt',
          instance: 'Date',
          validators: [],
          getters: [],
          setters: [],
          _presplitPath: [ 'updatedAt' ],
          options: SchemaDateOptions { type: [Function: Date] },
          _index: null,
          [Symbol(mongoose#schemaType)]: true
        },
        __v: SchemaNumber {
          path: '__v',
          instance: 'Number',
          validators: [],
          getters: [],
          setters: [],
          _presplitPath: [ '__v' ],
          options: SchemaNumberOptions { type: [Function: Number] },
          _index: null,
          [Symbol(mongoose#schemaType)]: true
        }
      },
      aliases: {},
      subpaths: {
        'destinations.airport': SchemaString {
          enumValues: [ 'AUS', 'DFW', 'DEN', 'LAX', 'SAN' ],
          regExp: null,
          path: 'airport',
          instance: 'String',
          validators: [ [Object], [Object] ],
          getters: [],
          setters: [],
          _presplitPath: [ 'airport' ],
          options: SchemaStringOptions {
            type: [Function: String],
            enum: [Array],
            required: true
          },
          _index: null,
          enumValidator: [Function (anonymous)],
          isRequired: true,
          requiredValidator: [Function (anonymous)],
          originalRequiredValue: true,
          '$parentSchemaDocArray': <ref *6> DocumentArrayPath {
            schemaOptions: {},
            casterConstructor: [Function],
            caster: [Function],
            '$embeddedSchemaType': [DocumentArrayElement],
            '$isMongooseArray': true,
            path: 'destinations',
            instance: 'Array',
            validators: [],
            getters: [],
            setters: [],
            _presplitPath: [Array],
            options: [SchemaDocumentArrayOptions],
            _index: null,
            defaultValue: [Function (anonymous)],
            schema: [Schema],
            '$isMongooseDocumentArray': true,
            Constructor: [Function],
            [Symbol(mongoose#schemaType)]: true
          },
          [Symbol(mongoose#schemaType)]: true
        },
        'destinations.arrival': SchemaDate {
          path: 'arrival',
          instance: 'Date',
          validators: [],
          getters: [],
          setters: [],
          _presplitPath: [ 'arrival' ],
          options: SchemaDateOptions { type: [Function: Date] },
          _index: null,
          '$parentSchemaDocArray': <ref *6> DocumentArrayPath {
            schemaOptions: {},
            casterConstructor: [Function],
            caster: [Function],
            '$embeddedSchemaType': [DocumentArrayElement],
            '$isMongooseArray': true,
            path: 'destinations',
            instance: 'Array',
            validators: [],
            getters: [],
            setters: [],
            _presplitPath: [Array],
            options: [SchemaDocumentArrayOptions],
            _index: null,
            defaultValue: [Function (anonymous)],
            schema: [Schema],
            '$isMongooseDocumentArray': true,
            Constructor: [Function],
            [Symbol(mongoose#schemaType)]: true
          },
          [Symbol(mongoose#schemaType)]: true
        },
        'destinations._id': ObjectId {
          path: '_id',
          instance: 'ObjectId',
          validators: [],
          getters: [],
          setters: [ [Function: resetId] ],
          _presplitPath: [ '_id' ],
          options: SchemaObjectIdOptions { auto: true, type: 'ObjectId' },
          _index: null,
          defaultValue: [Function: defaultId] { '$runBeforeSetters': true },
          '$parentSchemaDocArray': <ref *6> DocumentArrayPath {
            schemaOptions: {},
            casterConstructor: [Function],
            caster: [Function],
            '$embeddedSchemaType': [DocumentArrayElement],
            '$isMongooseArray': true,
            path: 'destinations',
            instance: 'Array',
            validators: [],
            getters: [],
            setters: [],
            _presplitPath: [Array],
            options: [SchemaDocumentArrayOptions],
            _index: null,
            defaultValue: [Function (anonymous)],
            schema: [Schema],
            '$isMongooseDocumentArray': true,
            Constructor: [Function],
            [Symbol(mongoose#schemaType)]: true
          },
          [Symbol(mongoose#schemaType)]: true
        },
        'tickets.$': ObjectId {
          path: 'tickets.$',
          instance: 'ObjectId',
          validators: [],
          getters: [],
          setters: [],
          _presplitPath: [ 'tickets' ],
          options: SchemaObjectIdOptions { ref: 'Ticket' },
          _index: null,
          [Symbol(mongoose#schemaType)]: true
        }
      },
      virtuals: {
        id: VirtualType {
          path: 'id',
          getters: [ [Function: idGetter] ],
          setters: [ [Function: idSetter] ],
          options: {}
        }
      },
      singleNestedPaths: {},
      nested: {},
      inherits: {},
      callQueue: [],
      _indexes: [],
      methods: { initializeTimestamps: [Function (anonymous)] },
      methodOptions: {},
      statics: {},
      tree: {
        airline: {
          type: [Function: String],
          enum: [ 'American', 'Southwest', 'United' ]
        },
        airport: {
          type: [Function: String],
          default: 'DEN',
          enum: [ 'AUS', 'DFW', 'DEN', 'LAX', 'SAN' ]
        },
        flightNo: { type: [Function: Number], min: 10, max: 9999 },
        departs: { type: [Function: Date] },
        destinations: [
          Schema {
            obj: [Object],
            paths: [Object],
            aliases: {},
            subpaths: {},
            virtuals: [Object],
            singleNestedPaths: {},
            nested: {},
            inherits: {},
            callQueue: [],
            _indexes: [],
            methods: {},
            methodOptions: {},
            statics: {},
            tree: [Object],
            query: {},
            childSchemas: [],
            plugins: [Array],
            '$id': 1,
            mapPaths: [],
            s: [Object],
            _userProvidedOptions: {},
            options: [Object],
            '$globalPluginsApplied': true
          }
        ],
        tickets: [ { type: [Function], ref: 'Ticket' } ],
        _id: { auto: true, type: 'ObjectId' },
        createdAt: { type: [Function: Date], immutable: true },
        updatedAt: [Function: Date],
        __v: [Function: Number],
        id: VirtualType {
          path: 'id',
          getters: [ [Function: idGetter] ],
          setters: [ [Function: idSetter] ],
          options: {}
        }
      },
      query: {},
      childSchemas: [
        {
          schema: Schema {
            obj: [Object],
            paths: [Object],
            aliases: {},
            subpaths: {},
            virtuals: [Object],
            singleNestedPaths: {},
            nested: {},
            inherits: {},
            callQueue: [],
            _indexes: [],
            methods: {},
            methodOptions: {},
            statics: {},
            tree: [Object],
            query: {},
            childSchemas: [],
            plugins: [Array],
            '$id': 1,
            mapPaths: [],
            s: [Object],
            _userProvidedOptions: {},
            options: [Object],
            '$globalPluginsApplied': true
          },
          model: [Function: EmbeddedDocument] {
            schema: [Schema],
            '$isArraySubdocument': true,
            events: [EventEmitter],
            base: [Mongoose],
            _events: undefined,
            _eventsCount: 0,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            options: [Object],
            path: 'destinations',
            '$appliedMethods': true,
            '$appliedHooks': true,
            _middleware: [Kareem]
          }
        }
      ],
      plugins: [
        { fn: [Function: removeSubdocs], opts: { deduplicate: true } },
        { fn: [Function: saveSubdocs], opts: { deduplicate: true } },
        {
          fn: [Function: shardingPlugin] {
            storeShard: [Function: storeShard]
          },
          opts: { deduplicate: true }
        },
        {
          fn: [Function: trackTransaction],
          opts: { deduplicate: true }
        },
        {
          fn: [Function: validateBeforeSave],
          opts: { deduplicate: true }
        }
      ],
      '$id': 2,
      mapPaths: [],
      s: {
        hooks: Kareem {
          _pres: Map(9) {
            'save' => [Array],
            'findOneAndReplace' => [Array],
            'findOneAndUpdate' => [Array],
            'replaceOne' => [Array],
            'update' => [Array],
            'updateOne' => [Array],
            'updateMany' => [Array],
            'deleteOne' => [Array],
            'remove' => [Array]
          },
          _posts: Map(2) { 'save' => [Array], 'init' => [Array] }
        }
      },
      _userProvidedOptions: { timestamps: true },
      options: {
        timestamps: true,
        typeKey: 'type',
        id: true,
        _id: true,
        validateModifiedOnly: false,
        validateBeforeSave: true,
        read: null,
        shardKey: null,
        discriminatorKey: '__t',
        autoIndex: null,
        minimize: true,
        optimisticConcurrency: false,
        versionKey: '__v',
        capped: false,
        bufferCommands: true,
        strictQuery: false,
        strict: true,
        pluralization: true
      },
      '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' },
      '$globalPluginsApplied': true
    },
    collection: <ref *7> Collection {
      collection: Collection {
        s: {
          db: Db { s: [Object], client: [MongoClient] },
          options: {
            raw: false,
            useBigInt64: false,
            promoteLongs: true,
            promoteValues: true,
            promoteBuffers: false,
            ignoreUndefined: false,
            bsonRegExp: false,
            serializeFunctions: false,
            fieldsAsRaw: {},
            enableUtf8Validation: true,
            writeConcern: [WriteConcern],
            readPreference: [ReadPreference]
          },
          namespace: MongoDBCollectionNamespace {
            db: 'mongoose-flights',
            collection: 'flights'
          },
          pkFactory: { createPk: [Function: createPk] },
          readPreference: ReadPreference {
            mode: 'primary',
            tags: undefined,
            hedge: undefined,
            maxStalenessSeconds: undefined,
            minWireVersion: undefined
          },
          bsonOptions: {
            raw: false,
            useBigInt64: false,
            promoteLongs: true,
            promoteValues: true,
            promoteBuffers: false,
            ignoreUndefined: false,
            bsonRegExp: false,
            serializeFunctions: false,
            fieldsAsRaw: {},
            enableUtf8Validation: true
          },
          readConcern: undefined,
          writeConcern: WriteConcern { w: 'majority' }
        },
        client: <ref *5> MongoClient {
          _events: [Object: null prototype] {
            topologyDescriptionChanged: [Function (anonymous)]
          },
          _eventsCount: 1,
          _maxListeners: 0,
          mongoLogger: MongoLogger {
            error: [Function: bound log],
            warn: [Function: bound log],
            info: [Function: bound log],
            debug: [Function: bound log],
            trace: [Function: bound log],
            componentSeverities: [Object],
            maxDocumentLength: 1000,
            logDestination: [Object]
          },
          s: {
            url: 'mongodb+srv://rjwyse27:Rockwell1@cluster0.udxjpgm.mongodb.net/mongoose-flights?retryWrites=true&w=majority',
            bsonOptions: [Object],
            namespace: [MongoDBNamespace],
            hasBeenClosed: false,
            sessionPool: [ServerSessionPool],
            activeSessions: Set(0) {},
            options: [Getter],
            readConcern: [Getter],
            writeConcern: [Getter],
            readPreference: [Getter],
            isMongoClient: [Getter]
          },
          connectionLock: undefined,
          topology: Topology {
            _events: [Object: null prototype],
            _eventsCount: 26,
            _maxListeners: undefined,
            client: [Circular *5],
            selectServerAsync: [Function (anonymous)],
            s: [Object],
            [Symbol(kCapture)]: false,
            [Symbol(waitQueue)]: [List]
          },
          [Symbol(kCapture)]: false,
          [Symbol(options)]: [Object: null prototype] {
            hosts: [Array],
            credentials: [MongoCredentials],
            compressors: [Array],
            connectTimeoutMS: 30000,
            dbName: 'mongoose-flights',
            directConnection: false,
            driverInfo: [Object],
            enableUtf8Validation: true,
            forceServerObjectId: false,
            heartbeatFrequencyMS: 10000,
            keepAlive: true,
            keepAliveInitialDelay: 120000,
            loadBalanced: false,
            localThresholdMS: 15,
            maxConnecting: 2,
            maxIdleTimeMS: 0,
            maxPoolSize: 100,
            minPoolSize: 0,
            minHeartbeatFrequencyMS: 500,
            monitorCommands: false,
            noDelay: true,
            pkFactory: [Object],
            raw: false,
            readPreference: [ReadPreference],
            retryReads: true,
            retryWrites: true,
            serverSelectionTimeoutMS: 30000,
            socketTimeoutMS: 0,
            srvMaxHosts: 0,
            srvServiceName: 'mongodb',
            writeConcern: [WriteConcern],
            waitQueueTimeoutMS: 0,
            zlibCompressionLevel: 0,
            userSpecifiedAuthSource: false,
            userSpecifiedReplicaSet: false,
            srvHost: 'cluster0.udxjpgm.mongodb.net',
            tls: true,
            mongoLoggerOptions: [Object],
            metadata: [Object],
            replicaSet: 'atlas-kc5ppa-shard-0',
            [Symbol(@@mdb.enableMongoLogger)]: false
          }
        }
      },
      Promise: [Function: Promise],
      modelName: 'Flight',
      _closed: false,
      opts: {
        autoIndex: true,
        autoCreate: true,
        schemaUserProvidedOptions: { timestamps: true },
        capped: false,
        Promise: undefined,
        '$wasForceClosed': undefined
      },
      name: 'flights',
      collectionName: 'flights',
      conn: <ref *3> NativeConnection {
        base: <ref *1> Mongoose {
          connections: [ [Circular *3] ],
          nextConnectionId: 1,
          models: <ref *4> { Flight: [Circular *2], Ticket: [Function] },
          events: EventEmitter {
            _events: [Object: null prototype] {},
            _eventsCount: 0,
            _maxListeners: undefined,
            [Symbol(kCapture)]: false
          },
          __driver: {
            Collection: [Function: NativeCollection],
            Connection: [Function]
          },
          options: {
            pluralization: true,
            autoIndex: true,
            autoCreate: true,
            [Symbol(mongoose:default)]: true
          },
          _pluralize: [Function: pluralize],
          Schema: [Function: Schema] {
            reserved: [Object: null prototype],
            Types: [Object],
            ObjectId: [Function]
          },
          model: [Function (anonymous)],
          plugins: [ [Array], [Array], [Array], [Array], [Array] ],
          default: [Circular *1],
          mongoose: [Circular *1],
          cast: [Function: cast],
          STATES: [Object: null prototype] {
            '0': 'disconnected',
            '1': 'connected',
            '2': 'connecting',
            '3': 'disconnecting',
            '99': 'uninitialized',
            disconnected: 0,
            connected: 1,
            connecting: 2,
            disconnecting: 3,
            uninitialized: 99
          },
          setDriver: [Function: setDriver],
          set: [Function (anonymous)],
          get: [Function (anonymous)],
          createConnection: [Function (anonymous)],
          connect: [AsyncFunction: connect],
          disconnect: [AsyncFunction: disconnect],
          startSession: [Function (anonymous)],
          pluralize: [Function (anonymous)],
          deleteModel: [Function (anonymous)],
          modelNames: [Function (anonymous)],
          plugin: [Function (anonymous)],
          version: '7.5.0',
          Mongoose: [Function: Mongoose],
          SchemaType: [Function: SchemaType] {
            cast: [Function: cast],
            set: [Function: set],
            get: [Function (anonymous)],
            _isRef: [Function (anonymous)],
            checkRequired: [Function (anonymous)],
            CastError: [class CastError extends MongooseError],
            ValidatorError: [class ValidatorError extends MongooseError]
          },
          SchemaTypes: {
            Array: [Function],
            Boolean: [Function],
            BigInt: [Function],
            Buffer: [Function],
            Date: [Function],
            Decimal: [Function],
            Decimal128: [Function],
            DocumentArray: [Function],
            Map: [Function],
            Mixed: [Function],
            Number: [Function],
            ObjectId: [Function],
            String: [Function],
            Subdocument: [Function],
            UUID: [Function],
            Oid: [Function],
            Object: [Function],
            Bool: [Function],
            ObjectID: [Function]
          },
          VirtualType: [Function: VirtualType],
          Types: {
            Array: [Function: MongooseArray],
            Buffer: [Function],
            Embedded: [Function],
            Document: [Function],
            DocumentArray: [Function: MongooseDocumentArray],
            Decimal128: [class Decimal128 extends BSONValue],
            ObjectId: [Function],
            Map: [class MongooseMap extends Map],
            Subdocument: [Function: Subdocument],
            UUID: [Function]
          },
          Query: [Function: Query] { base: [Object], 'use$geoWithin': true },
          Model: [Function: Model] {
            exists: [Function: exists],
            discriminator: [Function (anonymous)],
            _events: undefined,
            _eventsCount: 0,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            createCollection: [AsyncFunction: createCollection],
            syncIndexes: [AsyncFunction: syncIndexes],
            diffIndexes: [AsyncFunction: diffIndexes],
            cleanIndexes: [AsyncFunction: cleanIndexes],
            listIndexes: [AsyncFunction: listIndexes],
            ensureIndexes: [AsyncFunction: ensureIndexes],
            createIndexes: [AsyncFunction: createIndexes],
            translateAliases: [Function: translateAliases],
            deleteOne: [Function: deleteOne],
            deleteMany: [Function: deleteMany],
            find: [Function: find],
            findById: [Function: findById],
            findOne: [Function: findOne],
            estimatedDocumentCount: [Function: estimatedDocumentCount],
            countDocuments: [Function: countDocuments],
            count: [Function: count],
            distinct: [Function: distinct],
            where: [Function: where],
            '$where': [Function: $where],
            findOneAndUpdate: [Function (anonymous)],
            findByIdAndUpdate: [Function (anonymous)],
            findOneAndDelete: [Function (anonymous)],
            findByIdAndDelete: [Function (anonymous)],
            findOneAndReplace: [Function (anonymous)],
            findOneAndRemove: [Function (anonymous)],
            findByIdAndRemove: [Function (anonymous)],
            create: [AsyncFunction: create],
            watch: [Function (anonymous)],
            startSession: [Function (anonymous)],
            insertMany: [AsyncFunction: insertMany],
            '$__insertMany': [Function (anonymous)],
            bulkWrite: [AsyncFunction: bulkWrite],
            bulkSave: [AsyncFunction (anonymous)],
            applyDefaults: [Function: applyDefaults],
            castObject: [Function: castObject],
            buildBulkWriteOperations: [Function: buildBulkWriteOperations],
            hydrate: [Function (anonymous)],
            updateMany: [Function: updateMany],
            updateOne: [Function: updateOne],
            replaceOne: [Function: replaceOne],
            aggregate: [Function: aggregate],
            validate: [AsyncFunction: validate],
            populate: [AsyncFunction: populate],
            compile: [Function: compile],
            __subclass: [Function: subclass],
            inspect: [Function (anonymous)],
            [Symbol(nodejs.util.inspect.custom)]: [Function (anonymous)]
          },
          Document: [Function: Document] {
            _events: undefined,
            _eventsCount: 0,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            ValidationError: [class ValidationError extends MongooseError]
          },
          ObjectId: [Function: ObjectId] {
            schemaName: 'ObjectId',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _checkRequired: [Function (anonymous)],
            _cast: [Function: castObjectId],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          isValidObjectId: [Function (anonymous)],
          isObjectIdOrHexString: [Function (anonymous)],
          syncIndexes: [Function (anonymous)],
          Decimal128: [Function: Decimal128] {
            schemaName: 'Decimal128',
            defaultOptions: {},
            _cast: [Function: castDecimal128],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Mixed: [Function: Mixed] {
            schemaName: 'Mixed',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: []
          },
          Date: [Function: SchemaDate] {
            schemaName: 'Date',
            defaultOptions: {},
            _cast: [Function: castDate],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Number: [Function: SchemaNumber] {
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _cast: [Function: castNumber],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            schemaName: 'Number',
            defaultOptions: {},
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Error: [class MongooseError extends Error] {
            messages: [Object],
            Messages: [Object],
            DocumentNotFoundError: [class DocumentNotFoundError extends MongooseError],
            CastError: [class CastError extends MongooseError],
            ValidationError: [class ValidationError extends MongooseError],
            ValidatorError: [class ValidatorError extends MongooseError],
            VersionError: [class VersionError extends MongooseError],
            ParallelSaveError: [class ParallelSaveError extends MongooseError],
            OverwriteModelError: [class OverwriteModelError extends MongooseError],
            MissingSchemaError: [class MissingSchemaError extends MongooseError],
            MongooseServerSelectionError: [class MongooseServerSelectionError extends MongooseError],
            DivergentArrayError: [class DivergentArrayError extends MongooseError],
            StrictModeError: [class StrictModeError extends MongooseError],
            StrictPopulateError: [class StrictPopulateError extends MongooseError]
          },
          MongooseError: [class MongooseError extends Error] {
            messages: [Object],
            Messages: [Object],
            DocumentNotFoundError: [class DocumentNotFoundError extends MongooseError],
            CastError: [class CastError extends MongooseError],
            ValidationError: [class ValidationError extends MongooseError],
            ValidatorError: [class ValidatorError extends MongooseError],
            VersionError: [class VersionError extends MongooseError],
            ParallelSaveError: [class ParallelSaveError extends MongooseError],
            OverwriteModelError: [class OverwriteModelError extends MongooseError],
            MissingSchemaError: [class MissingSchemaError extends MongooseError],
            MongooseServerSelectionError: [class MongooseServerSelectionError extends MongooseError],
            DivergentArrayError: [class DivergentArrayError extends MongooseError],
            StrictModeError: [class StrictModeError extends MongooseError],
            StrictPopulateError: [class StrictPopulateError extends MongooseError]
          },
          now: [Function: now],
          CastError: [class CastError extends MongooseError],
          SchemaTypeOptions: [class SchemaTypeOptions],
          mongo: {
            BSON: [Getter],
            Binary: [Getter],
            BSONRegExp: [Getter],
            BSONSymbol: [Getter],
            BSONType: [Getter],
            Code: [Getter],
            DBRef: [Getter],
            Decimal128: [Getter],
            Double: [Getter],
            Int32: [Getter],
            Long: [Getter],
            MaxKey: [Getter],
            MinKey: [Getter],
            ObjectId: [Getter],
            Timestamp: [Getter],
            MongoBulkWriteError: [Getter],
            ChangeStreamCursor: [Getter],
            MongoAPIError: [Getter],
            MongoAWSError: [Getter],
            MongoAzureError: [Getter],
            MongoBatchReExecutionError: [Getter],
            MongoChangeStreamError: [Getter],
            MongoCompatibilityError: [Getter],
            MongoCursorExhaustedError: [Getter],
            MongoCursorInUseError: [Getter],
            MongoDecompressionError: [Getter],
            MongoDriverError: [Getter],
            MongoError: [Getter],
            MongoExpiredSessionError: [Getter],
            MongoGridFSChunkError: [Getter],
            MongoGridFSStreamError: [Getter],
            MongoInvalidArgumentError: [Getter],
            MongoKerberosError: [Getter],
            MongoMissingCredentialsError: [Getter],
            MongoMissingDependencyError: [Getter],
            MongoNetworkError: [Getter],
            MongoNetworkTimeoutError: [Getter],
            MongoNotConnectedError: [Getter],
            MongoParseError: [Getter],
            MongoRuntimeError: [Getter],
            MongoServerClosedError: [Getter],
            MongoServerError: [Getter],
            MongoServerSelectionError: [Getter],
            MongoSystemError: [Getter],
            MongoTailableCursorError: [Getter],
            MongoTopologyClosedError: [Getter],
            MongoTransactionError: [Getter],
            MongoUnexpectedServerResponseError: [Getter],
            MongoWriteConcernError: [Getter],
            AbstractCursor: [Getter],
            Admin: [Getter],
            AggregationCursor: [Getter],
            CancellationToken: [Getter],
            ChangeStream: [Getter],
            ClientSession: [Getter],
            Collection: [Getter],
            Db: [Getter],
            FindCursor: [Getter],
            GridFSBucket: [Getter],
            GridFSBucketReadStream: [Getter],
            GridFSBucketWriteStream: [Getter],
            ListCollectionsCursor: [Getter],
            ListIndexesCursor: [Getter],
            MongoClient: [Getter],
            OrderedBulkOperation: [Getter],
            UnorderedBulkOperation: [Getter],
            BatchType: [Getter],
            GSSAPICanonicalizationValue: [Getter],
            AuthMechanism: [Getter],
            Compressor: [Getter],
            CURSOR_FLAGS: [Getter],
            AutoEncryptionLoggerLevel: [Getter],
            MongoErrorLabel: [Getter],
            ExplainVerbosity: [Getter],
            ServerApiVersion: [Getter],
            ReturnDocument: [Getter],
            ProfilingLevel: [Getter],
            ReadConcernLevel: [Getter],
            ReadPreferenceMode: [Getter],
            ServerType: [Getter],
            TopologyType: [Getter],
            ReadConcern: [Getter],
            ReadPreference: [Getter],
            WriteConcern: [Getter],
            CommandFailedEvent: [Getter],
            CommandStartedEvent: [Getter],
            CommandSucceededEvent: [Getter],
            ConnectionCheckedInEvent: [Getter],
            ConnectionCheckedOutEvent: [Getter],
            ConnectionCheckOutFailedEvent: [Getter],
            ConnectionCheckOutStartedEvent: [Getter],
            ConnectionClosedEvent: [Getter],
            ConnectionCreatedEvent: [Getter],
            ConnectionPoolClearedEvent: [Getter],
            ConnectionPoolClosedEvent: [Getter],
            ConnectionPoolCreatedEvent: [Getter],
            ConnectionPoolMonitoringEvent: [Getter],
            ConnectionPoolReadyEvent: [Getter],
            ConnectionReadyEvent: [Getter],
            ServerClosedEvent: [Getter],
            ServerDescriptionChangedEvent: [Getter],
            ServerHeartbeatFailedEvent: [Getter],
            ServerHeartbeatStartedEvent: [Getter],
            ServerHeartbeatSucceededEvent: [Getter],
            ServerOpeningEvent: [Getter],
            TopologyClosedEvent: [Getter],
            TopologyDescriptionChangedEvent: [Getter],
            TopologyOpeningEvent: [Getter],
            SrvPollingEvent: [Getter]
          },
          mquery: [Function: Query] {
            permissions: [Object],
            _isPermitted: [Function (anonymous)],
            canMerge: [Function (anonymous)],
            setGlobalTraceFunction: [Function (anonymous)],
            utils: [Object],
            env: [Object],
            Collection: [class NodeCollection extends Collection],
            BaseCollection: [Function]
          },
          sanitizeFilter: [Function: sanitizeFilter],
          trusted: [Function: trusted],
          skipMiddlewareFunction: [Function: skipWrappedFunction],
          overwriteMiddlewareResult: [Function: overwriteResult]
        },
        collections: {
          flights: [Circular *7],
          tickets: Collection {
            collection: [Collection],
            Promise: [Function: Promise],
            modelName: 'Ticket',
            _closed: false,
            opts: [Object],
            name: 'tickets',
            collectionName: 'tickets',
            conn: [Circular *3],
            queue: [],
            buffer: false,
            emitter: [EventEmitter]
          }
        },
        models: <ref *4> {
          Flight: [Circular *2],
          Ticket: [Function: model] {
            hooks: [Kareem],
            base: [Mongoose],
            modelName: 'Ticket',
            model: [Function: model],
            db: [Circular *3],
            discriminators: undefined,
            events: [EventEmitter],
            '$appliedMethods': true,
            '$appliedHooks': true,
            _middleware: [Kareem],
            '$__insertMany': [Function (anonymous)],
            schema: [Schema],
            collection: [Collection],
            '$__collection': [Collection],
            Query: [Function],
            '$init': [Promise],
            '$caught': true,
            [Symbol(mongoose#Model)]: true
          }
        },
        config: {},
        replica: false,
        options: null,
        otherDbs: [],
        relatedDbs: {},
        states: [Object: null prototype] {
          '0': 'disconnected',
          '1': 'connected',
          '2': 'connecting',
          '3': 'disconnecting',
          '99': 'uninitialized',
          disconnected: 0,
          connected: 1,
          connecting: 2,
          disconnecting: 3,
          uninitialized: 99
        },
        _readyState: 1,
        _closeCalled: undefined,
        _hasOpened: true,
        plugins: [],
        id: 0,
        _queue: [],
        _listening: false,
        _connectionOptions: { driverInfo: { name: 'Mongoose', version: '7.5.0' } },
        _connectionString: 'mongodb+srv://rjwyse27:Rockwell1@cluster0.udxjpgm.mongodb.net/mongoose-flights?retryWrites=true&w=majority',
        client: <ref *5> MongoClient {
          _events: [Object: null prototype] {
            topologyDescriptionChanged: [Function (anonymous)]
          },
          _eventsCount: 1,
          _maxListeners: 0,
          mongoLogger: MongoLogger {
            error: [Function: bound log],
            warn: [Function: bound log],
            info: [Function: bound log],
            debug: [Function: bound log],
            trace: [Function: bound log],
            componentSeverities: [Object],
            maxDocumentLength: 1000,
            logDestination: [Object]
          },
          s: {
            url: 'mongodb+srv://rjwyse27:Rockwell1@cluster0.udxjpgm.mongodb.net/mongoose-flights?retryWrites=true&w=majority',
            bsonOptions: [Object],
            namespace: [MongoDBNamespace],
            hasBeenClosed: false,
            sessionPool: [ServerSessionPool],
            activeSessions: Set(0) {},
            options: [Getter],
            readConcern: [Getter],
            writeConcern: [Getter],
            readPreference: [Getter],
            isMongoClient: [Getter]
          },
          connectionLock: undefined,
          topology: Topology {
            _events: [Object: null prototype],
            _eventsCount: 26,
            _maxListeners: undefined,
            client: [Circular *5],
            selectServerAsync: [Function (anonymous)],
            s: [Object],
            [Symbol(kCapture)]: false,
            [Symbol(waitQueue)]: [List]
          },
          [Symbol(kCapture)]: false,
          [Symbol(options)]: [Object: null prototype] {
            hosts: [Array],
            credentials: [MongoCredentials],
            compressors: [Array],
            connectTimeoutMS: 30000,
            dbName: 'mongoose-flights',
            directConnection: false,
            driverInfo: [Object],
            enableUtf8Validation: true,
            forceServerObjectId: false,
            heartbeatFrequencyMS: 10000,
            keepAlive: true,
            keepAliveInitialDelay: 120000,
            loadBalanced: false,
            localThresholdMS: 15,
            maxConnecting: 2,
            maxIdleTimeMS: 0,
            maxPoolSize: 100,
            minPoolSize: 0,
            minHeartbeatFrequencyMS: 500,
            monitorCommands: false,
            noDelay: true,
            pkFactory: [Object],
            raw: false,
            readPreference: [ReadPreference],
            retryReads: true,
            retryWrites: true,
            serverSelectionTimeoutMS: 30000,
            socketTimeoutMS: 0,
            srvMaxHosts: 0,
            srvServiceName: 'mongodb',
            writeConcern: [WriteConcern],
            waitQueueTimeoutMS: 0,
            zlibCompressionLevel: 0,
            userSpecifiedAuthSource: false,
            userSpecifiedReplicaSet: false,
            srvHost: 'cluster0.udxjpgm.mongodb.net',
            tls: true,
            mongoLoggerOptions: [Object],
            metadata: [Object],
            replicaSet: 'atlas-kc5ppa-shard-0',
            [Symbol(@@mdb.enableMongoLogger)]: false
          }
        },
        '$initialConnection': Promise { [Circular *3] },
        _events: [Object: null prototype] { connected: [Function (anonymous)] },
        _eventsCount: 1,
        db: Db {
          s: {
            options: [Object],
            readPreference: [ReadPreference],
            bsonOptions: [Object],
            pkFactory: [Object],
            readConcern: undefined,
            writeConcern: [WriteConcern],
            namespace: [MongoDBNamespace]
          },
          client: <ref *5> MongoClient {
            _events: [Object: null prototype],
            _eventsCount: 1,
            _maxListeners: 0,
            mongoLogger: [MongoLogger],
            s: [Object],
            connectionLock: undefined,
            topology: [Topology],
            [Symbol(kCapture)]: false,
            [Symbol(options)]: [Object: null prototype]
          }
        },
        host: 'ac-sjskon9-shard-00-01.udxjpgm.mongodb.net',
        port: 27017,
        name: 'mongoose-flights'
      },
      queue: [],
      buffer: false,
      emitter: EventEmitter {
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        [Symbol(kCapture)]: false
      }
    },
    '$__collection': <ref *7> Collection {
      collection: Collection {
        s: {
          db: Db { s: [Object], client: [MongoClient] },
          options: {
            raw: false,
            useBigInt64: false,
            promoteLongs: true,
            promoteValues: true,
            promoteBuffers: false,
            ignoreUndefined: false,
            bsonRegExp: false,
            serializeFunctions: false,
            fieldsAsRaw: {},
            enableUtf8Validation: true,
            writeConcern: [WriteConcern],
            readPreference: [ReadPreference]
          },
          namespace: MongoDBCollectionNamespace {
            db: 'mongoose-flights',
            collection: 'flights'
          },
          pkFactory: { createPk: [Function: createPk] },
          readPreference: ReadPreference {
            mode: 'primary',
            tags: undefined,
            hedge: undefined,
            maxStalenessSeconds: undefined,
            minWireVersion: undefined
          },
          bsonOptions: {
            raw: false,
            useBigInt64: false,
            promoteLongs: true,
            promoteValues: true,
            promoteBuffers: false,
            ignoreUndefined: false,
            bsonRegExp: false,
            serializeFunctions: false,
            fieldsAsRaw: {},
            enableUtf8Validation: true
          },
          readConcern: undefined,
          writeConcern: WriteConcern { w: 'majority' }
        },
        client: <ref *5> MongoClient {
          _events: [Object: null prototype] {
            topologyDescriptionChanged: [Function (anonymous)]
          },
          _eventsCount: 1,
          _maxListeners: 0,
          mongoLogger: MongoLogger {
            error: [Function: bound log],
            warn: [Function: bound log],
            info: [Function: bound log],
            debug: [Function: bound log],
            trace: [Function: bound log],
            componentSeverities: [Object],
            maxDocumentLength: 1000,
            logDestination: [Object]
          },
          s: {
            url: 'mongodb+srv://rjwyse27:Rockwell1@cluster0.udxjpgm.mongodb.net/mongoose-flights?retryWrites=true&w=majority',
            bsonOptions: [Object],
            namespace: [MongoDBNamespace],
            hasBeenClosed: false,
            sessionPool: [ServerSessionPool],
            activeSessions: Set(0) {},
            options: [Getter],
            readConcern: [Getter],
            writeConcern: [Getter],
            readPreference: [Getter],
            isMongoClient: [Getter]
          },
          connectionLock: undefined,
          topology: Topology {
            _events: [Object: null prototype],
            _eventsCount: 26,
            _maxListeners: undefined,
            client: [Circular *5],
            selectServerAsync: [Function (anonymous)],
            s: [Object],
            [Symbol(kCapture)]: false,
            [Symbol(waitQueue)]: [List]
          },
          [Symbol(kCapture)]: false,
          [Symbol(options)]: [Object: null prototype] {
            hosts: [Array],
            credentials: [MongoCredentials],
            compressors: [Array],
            connectTimeoutMS: 30000,
            dbName: 'mongoose-flights',
            directConnection: false,
            driverInfo: [Object],
            enableUtf8Validation: true,
            forceServerObjectId: false,
            heartbeatFrequencyMS: 10000,
            keepAlive: true,
            keepAliveInitialDelay: 120000,
            loadBalanced: false,
            localThresholdMS: 15,
            maxConnecting: 2,
            maxIdleTimeMS: 0,
            maxPoolSize: 100,
            minPoolSize: 0,
            minHeartbeatFrequencyMS: 500,
            monitorCommands: false,
            noDelay: true,
            pkFactory: [Object],
            raw: false,
            readPreference: [ReadPreference],
            retryReads: true,
            retryWrites: true,
            serverSelectionTimeoutMS: 30000,
            socketTimeoutMS: 0,
            srvMaxHosts: 0,
            srvServiceName: 'mongodb',
            writeConcern: [WriteConcern],
            waitQueueTimeoutMS: 0,
            zlibCompressionLevel: 0,
            userSpecifiedAuthSource: false,
            userSpecifiedReplicaSet: false,
            srvHost: 'cluster0.udxjpgm.mongodb.net',
            tls: true,
            mongoLoggerOptions: [Object],
            metadata: [Object],
            replicaSet: 'atlas-kc5ppa-shard-0',
            [Symbol(@@mdb.enableMongoLogger)]: false
          }
        }
      },
      Promise: [Function: Promise],
      modelName: 'Flight',
      _closed: false,
      opts: {
        autoIndex: true,
        autoCreate: true,
        schemaUserProvidedOptions: { timestamps: true },
        capped: false,
        Promise: undefined,
        '$wasForceClosed': undefined
      },
      name: 'flights',
      collectionName: 'flights',
      conn: <ref *3> NativeConnection {
        base: <ref *1> Mongoose {
          connections: [ [Circular *3] ],
          nextConnectionId: 1,
          models: <ref *4> { Flight: [Circular *2], Ticket: [Function] },
          events: EventEmitter {
            _events: [Object: null prototype] {},
            _eventsCount: 0,
            _maxListeners: undefined,
            [Symbol(kCapture)]: false
          },
          __driver: {
            Collection: [Function: NativeCollection],
            Connection: [Function]
          },
          options: {
            pluralization: true,
            autoIndex: true,
            autoCreate: true,
            [Symbol(mongoose:default)]: true
          },
          _pluralize: [Function: pluralize],
          Schema: [Function: Schema] {
            reserved: [Object: null prototype],
            Types: [Object],
            ObjectId: [Function]
          },
          model: [Function (anonymous)],
          plugins: [ [Array], [Array], [Array], [Array], [Array] ],
          default: [Circular *1],
          mongoose: [Circular *1],
          cast: [Function: cast],
          STATES: [Object: null prototype] {
            '0': 'disconnected',
            '1': 'connected',
            '2': 'connecting',
            '3': 'disconnecting',
            '99': 'uninitialized',
            disconnected: 0,
            connected: 1,
            connecting: 2,
            disconnecting: 3,
            uninitialized: 99
          },
          setDriver: [Function: setDriver],
          set: [Function (anonymous)],
          get: [Function (anonymous)],
          createConnection: [Function (anonymous)],
          connect: [AsyncFunction: connect],
          disconnect: [AsyncFunction: disconnect],
          startSession: [Function (anonymous)],
          pluralize: [Function (anonymous)],
          deleteModel: [Function (anonymous)],
          modelNames: [Function (anonymous)],
          plugin: [Function (anonymous)],
          version: '7.5.0',
          Mongoose: [Function: Mongoose],
          SchemaType: [Function: SchemaType] {
            cast: [Function: cast],
            set: [Function: set],
            get: [Function (anonymous)],
            _isRef: [Function (anonymous)],
            checkRequired: [Function (anonymous)],
            CastError: [class CastError extends MongooseError],
            ValidatorError: [class ValidatorError extends MongooseError]
          },
          SchemaTypes: {
            Array: [Function],
            Boolean: [Function],
            BigInt: [Function],
            Buffer: [Function],
            Date: [Function],
            Decimal: [Function],
            Decimal128: [Function],
            DocumentArray: [Function],
            Map: [Function],
            Mixed: [Function],
            Number: [Function],
            ObjectId: [Function],
            String: [Function],
            Subdocument: [Function],
            UUID: [Function],
            Oid: [Function],
            Object: [Function],
            Bool: [Function],
            ObjectID: [Function]
          },
          VirtualType: [Function: VirtualType],
          Types: {
            Array: [Function: MongooseArray],
            Buffer: [Function],
            Embedded: [Function],
            Document: [Function],
            DocumentArray: [Function: MongooseDocumentArray],
            Decimal128: [class Decimal128 extends BSONValue],
            ObjectId: [Function],
            Map: [class MongooseMap extends Map],
            Subdocument: [Function: Subdocument],
            UUID: [Function]
          },
          Query: [Function: Query] { base: [Object], 'use$geoWithin': true },
          Model: [Function: Model] {
            exists: [Function: exists],
            discriminator: [Function (anonymous)],
            _events: undefined,
            _eventsCount: 0,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            createCollection: [AsyncFunction: createCollection],
            syncIndexes: [AsyncFunction: syncIndexes],
            diffIndexes: [AsyncFunction: diffIndexes],
            cleanIndexes: [AsyncFunction: cleanIndexes],
            listIndexes: [AsyncFunction: listIndexes],
            ensureIndexes: [AsyncFunction: ensureIndexes],
            createIndexes: [AsyncFunction: createIndexes],
            translateAliases: [Function: translateAliases],
            deleteOne: [Function: deleteOne],
            deleteMany: [Function: deleteMany],
            find: [Function: find],
            findById: [Function: findById],
            findOne: [Function: findOne],
            estimatedDocumentCount: [Function: estimatedDocumentCount],
            countDocuments: [Function: countDocuments],
            count: [Function: count],
            distinct: [Function: distinct],
            where: [Function: where],
            '$where': [Function: $where],
            findOneAndUpdate: [Function (anonymous)],
            findByIdAndUpdate: [Function (anonymous)],
            findOneAndDelete: [Function (anonymous)],
            findByIdAndDelete: [Function (anonymous)],
            findOneAndReplace: [Function (anonymous)],
            findOneAndRemove: [Function (anonymous)],
            findByIdAndRemove: [Function (anonymous)],
            create: [AsyncFunction: create],
            watch: [Function (anonymous)],
            startSession: [Function (anonymous)],
            insertMany: [AsyncFunction: insertMany],
            '$__insertMany': [Function (anonymous)],
            bulkWrite: [AsyncFunction: bulkWrite],
            bulkSave: [AsyncFunction (anonymous)],
            applyDefaults: [Function: applyDefaults],
            castObject: [Function: castObject],
            buildBulkWriteOperations: [Function: buildBulkWriteOperations],
            hydrate: [Function (anonymous)],
            updateMany: [Function: updateMany],
            updateOne: [Function: updateOne],
            replaceOne: [Function: replaceOne],
            aggregate: [Function: aggregate],
            validate: [AsyncFunction: validate],
            populate: [AsyncFunction: populate],
            compile: [Function: compile],
            __subclass: [Function: subclass],
            inspect: [Function (anonymous)],
            [Symbol(nodejs.util.inspect.custom)]: [Function (anonymous)]
          },
          Document: [Function: Document] {
            _events: undefined,
            _eventsCount: 0,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            ValidationError: [class ValidationError extends MongooseError]
          },
          ObjectId: [Function: ObjectId] {
            schemaName: 'ObjectId',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _checkRequired: [Function (anonymous)],
            _cast: [Function: castObjectId],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          isValidObjectId: [Function (anonymous)],
          isObjectIdOrHexString: [Function (anonymous)],
          syncIndexes: [Function (anonymous)],
          Decimal128: [Function: Decimal128] {
            schemaName: 'Decimal128',
            defaultOptions: {},
            _cast: [Function: castDecimal128],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Mixed: [Function: Mixed] {
            schemaName: 'Mixed',
            defaultOptions: {},
            get: [Function (anonymous)],
            set: [Function: set],
            setters: []
          },
          Date: [Function: SchemaDate] {
            schemaName: 'Date',
            defaultOptions: {},
            _cast: [Function: castDate],
            set: [Function: set],
            setters: [],
            get: [Function (anonymous)],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Number: [Function: SchemaNumber] {
            get: [Function (anonymous)],
            set: [Function: set],
            setters: [],
            _cast: [Function: castNumber],
            cast: [Function: cast],
            _defaultCaster: [Function (anonymous)],
            schemaName: 'Number',
            defaultOptions: {},
            _checkRequired: [Function (anonymous)],
            checkRequired: [Function (anonymous)]
          },
          Error: [class MongooseError extends Error] {
            messages: [Object],
            Messages: [Object],
            DocumentNotFoundError: [class DocumentNotFoundError extends MongooseError],
            CastError: [class CastError extends MongooseError],
            ValidationError: [class ValidationError extends MongooseError],
            ValidatorError: [class ValidatorError extends MongooseError],
            VersionError: [class VersionError extends MongooseError],
            ParallelSaveError: [class ParallelSaveError extends MongooseError],
            OverwriteModelError: [class OverwriteModelError extends MongooseError],
            MissingSchemaError: [class MissingSchemaError extends MongooseError],
            MongooseServerSelectionError: [class MongooseServerSelectionError extends MongooseError],
            DivergentArrayError: [class DivergentArrayError extends MongooseError],
            StrictModeError: [class StrictModeError extends MongooseError],
            StrictPopulateError: [class StrictPopulateError extends MongooseError]
          },
          MongooseError: [class MongooseError extends Error] {
            messages: [Object],
            Messages: [Object],
            DocumentNotFoundError: [class DocumentNotFoundError extends MongooseError],
            CastError: [class CastError extends MongooseError],
            ValidationError: [class ValidationError extends MongooseError],
            ValidatorError: [class ValidatorError extends MongooseError],
            VersionError: [class VersionError extends MongooseError],
            ParallelSaveError: [class ParallelSaveError extends MongooseError],
            OverwriteModelError: [class OverwriteModelError extends MongooseError],
            MissingSchemaError: [class MissingSchemaError extends MongooseError],
            MongooseServerSelectionError: [class MongooseServerSelectionError extends MongooseError],
            DivergentArrayError: [class DivergentArrayError extends MongooseError],
            StrictModeError: [class StrictModeError extends MongooseError],
            StrictPopulateError: [class StrictPopulateError extends MongooseError]
          },
          now: [Function: now],
          CastError: [class CastError extends MongooseError],
          SchemaTypeOptions: [class SchemaTypeOptions],
          mongo: {
            BSON: [Getter],
            Binary: [Getter],
            BSONRegExp: [Getter],
            BSONSymbol: [Getter],
            BSONType: [Getter],
            Code: [Getter],
            DBRef: [Getter],
            Decimal128: [Getter],
            Double: [Getter],
            Int32: [Getter],
            Long: [Getter],
            MaxKey: [Getter],
            MinKey: [Getter],
            ObjectId: [Getter],
            Timestamp: [Getter],
            MongoBulkWriteError: [Getter],
            ChangeStreamCursor: [Getter],
            MongoAPIError: [Getter],
            MongoAWSError: [Getter],
            MongoAzureError: [Getter],
            MongoBatchReExecutionError: [Getter],
            MongoChangeStreamError: [Getter],
            MongoCompatibilityError: [Getter],
            MongoCursorExhaustedError: [Getter],
            MongoCursorInUseError: [Getter],
            MongoDecompressionError: [Getter],
            MongoDriverError: [Getter],
            MongoError: [Getter],
            MongoExpiredSessionError: [Getter],
            MongoGridFSChunkError: [Getter],
            MongoGridFSStreamError: [Getter],
            MongoInvalidArgumentError: [Getter],
            MongoKerberosError: [Getter],
            MongoMissingCredentialsError: [Getter],
            MongoMissingDependencyError: [Getter],
            MongoNetworkError: [Getter],
            MongoNetworkTimeoutError: [Getter],
            MongoNotConnectedError: [Getter],
            MongoParseError: [Getter],
            MongoRuntimeError: [Getter],
            MongoServerClosedError: [Getter],
            MongoServerError: [Getter],
            MongoServerSelectionError: [Getter],
            MongoSystemError: [Getter],
            MongoTailableCursorError: [Getter],
            MongoTopologyClosedError: [Getter],
            MongoTransactionError: [Getter],
            MongoUnexpectedServerResponseError: [Getter],
            MongoWriteConcernError: [Getter],
            AbstractCursor: [Getter],
            Admin: [Getter],
            AggregationCursor: [Getter],
            CancellationToken: [Getter],
            ChangeStream: [Getter],
            ClientSession: [Getter],
            Collection: [Getter],
            Db: [Getter],
            FindCursor: [Getter],
            GridFSBucket: [Getter],
            GridFSBucketReadStream: [Getter],
            GridFSBucketWriteStream: [Getter],
            ListCollectionsCursor: [Getter],
            ListIndexesCursor: [Getter],
            MongoClient: [Getter],
            OrderedBulkOperation: [Getter],
            UnorderedBulkOperation: [Getter],
            BatchType: [Getter],
            GSSAPICanonicalizationValue: [Getter],
            AuthMechanism: [Getter],
            Compressor: [Getter],
            CURSOR_FLAGS: [Getter],
            AutoEncryptionLoggerLevel: [Getter],
            MongoErrorLabel: [Getter],
            ExplainVerbosity: [Getter],
            ServerApiVersion: [Getter],
            ReturnDocument: [Getter],
            ProfilingLevel: [Getter],
            ReadConcernLevel: [Getter],
            ReadPreferenceMode: [Getter],
            ServerType: [Getter],
            TopologyType: [Getter],
            ReadConcern: [Getter],
            ReadPreference: [Getter],
            WriteConcern: [Getter],
            CommandFailedEvent: [Getter],
            CommandStartedEvent: [Getter],
            CommandSucceededEvent: [Getter],
            ConnectionCheckedInEvent: [Getter],
            ConnectionCheckedOutEvent: [Getter],
            ConnectionCheckOutFailedEvent: [Getter],
            ConnectionCheckOutStartedEvent: [Getter],
            ConnectionClosedEvent: [Getter],
            ConnectionCreatedEvent: [Getter],
            ConnectionPoolClearedEvent: [Getter],
            ConnectionPoolClosedEvent: [Getter],
            ConnectionPoolCreatedEvent: [Getter],
            ConnectionPoolMonitoringEvent: [Getter],
            ConnectionPoolReadyEvent: [Getter],
            ConnectionReadyEvent: [Getter],
            ServerClosedEvent: [Getter],
            ServerDescriptionChangedEvent: [Getter],
            ServerHeartbeatFailedEvent: [Getter],
            ServerHeartbeatStartedEvent: [Getter],
            ServerHeartbeatSucceededEvent: [Getter],
            ServerOpeningEvent: [Getter],
            TopologyClosedEvent: [Getter],
            TopologyDescriptionChangedEvent: [Getter],
            TopologyOpeningEvent: [Getter],
            SrvPollingEvent: [Getter]
          },
          mquery: [Function: Query] {
            permissions: [Object],
            _isPermitted: [Function (anonymous)],
            canMerge: [Function (anonymous)],
            setGlobalTraceFunction: [Function (anonymous)],
            utils: [Object],
            env: [Object],
            Collection: [class NodeCollection extends Collection],
            BaseCollection: [Function]
          },
          sanitizeFilter: [Function: sanitizeFilter],
          trusted: [Function: trusted],
          skipMiddlewareFunction: [Function: skipWrappedFunction],
          overwriteMiddlewareResult: [Function: overwriteResult]
        },
        collections: {
          flights: [Circular *7],
          tickets: Collection {
            collection: [Collection],
            Promise: [Function: Promise],
            modelName: 'Ticket',
            _closed: false,
            opts: [Object],
            name: 'tickets',
            collectionName: 'tickets',
            conn: [Circular *3],
            queue: [],
            buffer: false,
            emitter: [EventEmitter]
          }
        },
        models: <ref *4> {
          Flight: [Circular *2],
          Ticket: [Function: model] {
            hooks: [Kareem],
            base: [Mongoose],
            modelName: 'Ticket',
            model: [Function: model],
            db: [Circular *3],
            discriminators: undefined,
            events: [EventEmitter],
            '$appliedMethods': true,
            '$appliedHooks': true,
            _middleware: [Kareem],
            '$__insertMany': [Function (anonymous)],
            schema: [Schema],
            collection: [Collection],
            '$__collection': [Collection],
            Query: [Function],
            '$init': [Promise],
            '$caught': true,
            [Symbol(mongoose#Model)]: true
          }
        },
        config: {},
        replica: false,
        options: null,
        otherDbs: [],
        relatedDbs: {},
        states: [Object: null prototype] {
          '0': 'disconnected',
          '1': 'connected',
          '2': 'connecting',
          '3': 'disconnecting',
          '99': 'uninitialized',
          disconnected: 0,
          connected: 1,
          connecting: 2,
          disconnecting: 3,
          uninitialized: 99
        },
        _readyState: 1,
        _closeCalled: undefined,
        _hasOpened: true,
        plugins: [],
        id: 0,
        _queue: [],
        _listening: false,
        _connectionOptions: { driverInfo: { name: 'Mongoose', version: '7.5.0' } },
        _connectionString: 'mongodb+srv://rjwyse27:Rockwell1@cluster0.udxjpgm.mongodb.net/mongoose-flights?retryWrites=true&w=majority',
        client: <ref *5> MongoClient {
          _events: [Object: null prototype] {
            topologyDescriptionChanged: [Function (anonymous)]
          },
          _eventsCount: 1,
          _maxListeners: 0,
          mongoLogger: MongoLogger {
            error: [Function: bound log],
            warn: [Function: bound log],
            info: [Function: bound log],
            debug: [Function: bound log],
            trace: [Function: bound log],
            componentSeverities: [Object],
            maxDocumentLength: 1000,
            logDestination: [Object]
          },
          s: {
            url: 'mongodb+srv://rjwyse27:Rockwell1@cluster0.udxjpgm.mongodb.net/mongoose-flights?retryWrites=true&w=majority',
            bsonOptions: [Object],
            namespace: [MongoDBNamespace],
            hasBeenClosed: false,
            sessionPool: [ServerSessionPool],
            activeSessions: Set(0) {},
            options: [Getter],
            readConcern: [Getter],
            writeConcern: [Getter],
            readPreference: [Getter],
            isMongoClient: [Getter]
          },
          connectionLock: undefined,
          topology: Topology {
            _events: [Object: null prototype],
            _eventsCount: 26,
            _maxListeners: undefined,
            client: [Circular *5],
            selectServerAsync: [Function (anonymous)],
            s: [Object],
            [Symbol(kCapture)]: false,
            [Symbol(waitQueue)]: [List]
          },
          [Symbol(kCapture)]: false,
          [Symbol(options)]: [Object: null prototype] {
            hosts: [Array],
            credentials: [MongoCredentials],
            compressors: [Array],
            connectTimeoutMS: 30000,
            dbName: 'mongoose-flights',
            directConnection: false,
            driverInfo: [Object],
            enableUtf8Validation: true,
            forceServerObjectId: false,
            heartbeatFrequencyMS: 10000,
            keepAlive: true,
            keepAliveInitialDelay: 120000,
            loadBalanced: false,
            localThresholdMS: 15,
            maxConnecting: 2,
            maxIdleTimeMS: 0,
            maxPoolSize: 100,
            minPoolSize: 0,
            minHeartbeatFrequencyMS: 500,
            monitorCommands: false,
            noDelay: true,
            pkFactory: [Object],
            raw: false,
            readPreference: [ReadPreference],
            retryReads: true,
            retryWrites: true,
            serverSelectionTimeoutMS: 30000,
            socketTimeoutMS: 0,
            srvMaxHosts: 0,
            srvServiceName: 'mongodb',
            writeConcern: [WriteConcern],
            waitQueueTimeoutMS: 0,
            zlibCompressionLevel: 0,
            userSpecifiedAuthSource: false,
            userSpecifiedReplicaSet: false,
            srvHost: 'cluster0.udxjpgm.mongodb.net',
            tls: true,
            mongoLoggerOptions: [Object],
            metadata: [Object],
            replicaSet: 'atlas-kc5ppa-shard-0',
            [Symbol(@@mdb.enableMongoLogger)]: false
          }
        },
        '$initialConnection': Promise { [Circular *3] },
        _events: [Object: null prototype] { connected: [Function (anonymous)] },
        _eventsCount: 1,
        db: Db {
          s: {
            options: [Object],
            readPreference: [ReadPreference],
            bsonOptions: [Object],
            pkFactory: [Object],
            readConcern: undefined,
            writeConcern: [WriteConcern],
            namespace: [MongoDBNamespace]
          },
          client: <ref *5> MongoClient {
            _events: [Object: null prototype],
            _eventsCount: 1,
            _maxListeners: 0,
            mongoLogger: [MongoLogger],
            s: [Object],
            connectionLock: undefined,
            topology: [Topology],
            [Symbol(kCapture)]: false,
            [Symbol(options)]: [Object: null prototype]
          }
        },
        host: 'ac-sjskon9-shard-00-01.udxjpgm.mongodb.net',
        port: 27017,
        name: 'mongoose-flights'
      },
      queue: [],
      buffer: false,
      emitter: EventEmitter {
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        [Symbol(kCapture)]: false
      }
    },
    Query: [Function (anonymous)] {
      base: {
        toConstructor: [Function: toConstructor],
        setOptions: [Function (anonymous)],
        collection: [Function: collection],
        collation: [Function (anonymous)],
        '$where': [Function (anonymous)],
        where: [Function (anonymous)],
        equals: [Function: equals],
        eq: [Function: eq],
        or: [Function: or],
        nor: [Function: nor],
        and: [Function: and],
        gt: [Function (anonymous)],
        gte: [Function (anonymous)],
        lt: [Function (anonymous)],
        lte: [Function (anonymous)],
        ne: [Function (anonymous)],
        in: [Function (anonymous)],
        nin: [Function (anonymous)],
        all: [Function (anonymous)],
        regex: [Function (anonymous)],
        size: [Function (anonymous)],
        maxDistance: [Function (anonymous)],
        minDistance: [Function (anonymous)],
        mod: [Function (anonymous)],
        exists: [Function (anonymous)],
        elemMatch: [Function (anonymous)],
        within: [Function: within],
        box: [Function (anonymous)],
        polygon: [Function (anonymous)],
        circle: [Function (anonymous)],
        near: [Function: near],
        intersects: [Function: intersects],
        geometry: [Function: geometry],
        select: [Function: select],
        slice: [Function (anonymous)],
        sort: [Function (anonymous)],
        limit: [Function (anonymous)],
        skip: [Function (anonymous)],
        batchSize: [Function (anonymous)],
        comment: [Function (anonymous)],
        maxTimeMS: [Function (anonymous)],
        maxTime: [Function (anonymous)],
        hint: [Function (anonymous)],
        j: [Function: j],
        slaveOk: [Function (anonymous)],
        setReadPreference: [Function (anonymous)],
        read: [Function (anonymous)],
        r: [Function (anonymous)],
        readConcern: [Function (anonymous)],
        tailable: [Function (anonymous)],
        w: [Function: writeConcern],
        writeConcern: [Function: writeConcern],
        wTimeout: [Function: wtimeout],
        wtimeout: [Function: wtimeout],
        merge: [Function (anonymous)],
        find: [Function (anonymous)],
        _find: [AsyncFunction: _find],
        cursor: [Function (anonymous)],
        findOne: [Function (anonymous)],
        _findOne: [AsyncFunction: _findOne],
        count: [Function (anonymous)],
        _count: [AsyncFunction: _count],
        distinct: [Function (anonymous)],
        _distinct: [AsyncFunction: _distinct],
        updateMany: [Function: updateMany],
        _updateMany: [AsyncFunction (anonymous)],
        updateOne: [Function: updateOne],
        _updateOne: [AsyncFunction (anonymous)],
        replaceOne: [Function: replaceOne],
        _replaceOne: [AsyncFunction (anonymous)],
        deleteOne: [Function (anonymous)],
        _deleteOne: [AsyncFunction (anonymous)],
        deleteMany: [Function (anonymous)],
        _deleteMany: [AsyncFunction (anonymous)],
        findOneAndUpdate: [Function (anonymous)],
        _findOneAndUpdate: [AsyncFunction (anonymous)],
        findOneAndDelete: [Function (anonymous)],
        findOneAndRemove: [Function (anonymous)],
        _findOneAndRemove: [AsyncFunction (anonymous)],
        setTraceFunction: [Function (anonymous)],
        exec: [AsyncFunction: exec],
        then: [AsyncFunction (anonymous)],
        selected: [Function: selected],
        selectedInclusively: [Function: selectedInclusively],
        selectedExclusively: [Function: selectedExclusively],
        _mergeUpdate: [Function (anonymous)],
        _optionsForExec: [Function (anonymous)],
        _fieldsForExec: [Function (anonymous)],
        _updateForExec: [Function (anonymous)],
        _ensurePath: [Function (anonymous)],
        _validate: [Function (anonymous)]
      }
    },
    '$init': Promise { undefined, catch: [Function (anonymous)] },
    '$caught': true,
    [Symbol(mongoose#Model)]: true
  }
}

Node.js v20.5.0
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
